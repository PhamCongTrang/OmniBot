
chatter_F407VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f964  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010024  08010024  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08010024  08010024  00020024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801002c  0801002c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801002c  0801002c  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010038  08010038  00020038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801003c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00001278  20000090  20000090  00030090  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001308  20001308  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf82  00000000  00000000  00030103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003303  00000000  00000000  0004d085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001530  00000000  00000000  00050388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010cd  00000000  00000000  000518b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022741  00000000  00000000  00052985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019dfe  00000000  00000000  000750c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d618e  00000000  00000000  0008eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000062d0  00000000  00000000  00165054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0016b324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fad4 	.word	0x0800fad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800fad4 	.word	0x0800fad4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0a5a      	lsrs	r2, r3, #9
 8000e5c:	490f      	ldr	r1, [pc, #60]	; (8000e9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e5e:	fba1 1202 	umull	r1, r2, r1, r2
 8000e62:	09d2      	lsrs	r2, r2, #7
 8000e64:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e66:	fb01 f202 	mul.w	r2, r1, r2
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	09db      	lsrs	r3, r3, #7
 8000e7c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	441a      	add	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	00044b83 	.word	0x00044b83
 8000ea0:	3b9aca00 	.word	0x3b9aca00

08000ea4 <_Z3PIDv>:
float data_PID[12]= {0,0,0,0,0,0,0,0,0,0,0,0};
bool check_PID = 0;
float test_w = 1.213, test_r;
uint8_t error =0;
void PID()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e0cf      	b.n	8001050 <_Z3PIDv+0x1ac>
		if (v_set[i] == 0) duty[i] = 0;
 8000eb0:	4ab9      	ldr	r2, [pc, #740]	; (8001198 <_Z3PIDv+0x2f4>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	d105      	bne.n	8000ed2 <_Z3PIDv+0x2e>
 8000ec6:	4ab5      	ldr	r2, [pc, #724]	; (800119c <_Z3PIDv+0x2f8>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2100      	movs	r1, #0
 8000ecc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ed0:	e0bb      	b.n	800104a <_Z3PIDv+0x1a6>
		else {
			e[i] = v_set[i] - v_enc[i];
 8000ed2:	4ab1      	ldr	r2, [pc, #708]	; (8001198 <_Z3PIDv+0x2f4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	4ab0      	ldr	r2, [pc, #704]	; (80011a0 <_Z3PIDv+0x2fc>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eee:	4aad      	ldr	r2, [pc, #692]	; (80011a4 <_Z3PIDv+0x300>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	edc3 7a00 	vstr	s15, [r3]
			sum_e[i] += (e[i] + pre_e[i])/2;
 8000efa:	4aab      	ldr	r2, [pc, #684]	; (80011a8 <_Z3PIDv+0x304>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	4aa7      	ldr	r2, [pc, #668]	; (80011a4 <_Z3PIDv+0x300>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	edd3 6a00 	vldr	s13, [r3]
 8000f12:	4aa6      	ldr	r2, [pc, #664]	; (80011ac <_Z3PIDv+0x308>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f22:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000f26:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2e:	4a9e      	ldr	r2, [pc, #632]	; (80011a8 <_Z3PIDv+0x304>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	edc3 7a00 	vstr	s15, [r3]
			d_e[i] = e[i] - pre_e[i];
 8000f3a:	4a9a      	ldr	r2, [pc, #616]	; (80011a4 <_Z3PIDv+0x300>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	ed93 7a00 	vldr	s14, [r3]
 8000f46:	4a99      	ldr	r2, [pc, #612]	; (80011ac <_Z3PIDv+0x308>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f56:	4a96      	ldr	r2, [pc, #600]	; (80011b0 <_Z3PIDv+0x30c>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
			pre_e[i] = e[i];
 8000f62:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <_Z3PIDv+0x300>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	498f      	ldr	r1, [pc, #572]	; (80011ac <_Z3PIDv+0x308>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	601a      	str	r2, [r3, #0]
			duty[i] += (Kp[i] * e[i] + Ki[i] * Ta * sum_e[i] + Kd[i] * (1 / Ta) * d_e[i]);
 8000f76:	4a89      	ldr	r2, [pc, #548]	; (800119c <_Z3PIDv+0x2f8>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f86:	4a8b      	ldr	r2, [pc, #556]	; (80011b4 <_Z3PIDv+0x310>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	edd3 6a00 	vldr	s13, [r3]
 8000f92:	4a84      	ldr	r2, [pc, #528]	; (80011a4 <_Z3PIDv+0x300>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fa2:	4a85      	ldr	r2, [pc, #532]	; (80011b8 <_Z3PIDv+0x314>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	ed93 6a00 	vldr	s12, [r3]
 8000fae:	4b83      	ldr	r3, [pc, #524]	; (80011bc <_Z3PIDv+0x318>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fb8:	4a7b      	ldr	r2, [pc, #492]	; (80011a8 <_Z3PIDv+0x304>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fcc:	4a7c      	ldr	r2, [pc, #496]	; (80011c0 <_Z3PIDv+0x31c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	ed93 6a00 	vldr	s12, [r3]
 8000fd8:	4b78      	ldr	r3, [pc, #480]	; (80011bc <_Z3PIDv+0x318>)
 8000fda:	edd3 5a00 	vldr	s11, [r3]
 8000fde:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8000fe2:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8000fe6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fea:	4a71      	ldr	r2, [pc, #452]	; (80011b0 <_Z3PIDv+0x30c>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	b219      	sxth	r1, r3
 800100c:	4a63      	ldr	r2, [pc, #396]	; (800119c <_Z3PIDv+0x2f8>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			//Limit the Duty value
			if (duty[i] > 999)
 8001014:	4a61      	ldr	r2, [pc, #388]	; (800119c <_Z3PIDv+0x2f8>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001020:	db06      	blt.n	8001030 <_Z3PIDv+0x18c>
			{
				duty[i] = 999;
 8001022:	4a5e      	ldr	r2, [pc, #376]	; (800119c <_Z3PIDv+0x2f8>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f240 31e7 	movw	r1, #999	; 0x3e7
 800102a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800102e:	e00c      	b.n	800104a <_Z3PIDv+0x1a6>
			}
			else if (duty[i] < -999 )
 8001030:	4a5a      	ldr	r2, [pc, #360]	; (800119c <_Z3PIDv+0x2f8>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001038:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800103c:	dc05      	bgt.n	800104a <_Z3PIDv+0x1a6>
			{
				duty[i] = -999;
 800103e:	4a57      	ldr	r2, [pc, #348]	; (800119c <_Z3PIDv+0x2f8>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f64f 4119 	movw	r1, #64537	; 0xfc19
 8001046:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b03      	cmp	r3, #3
 8001054:	f77f af2c 	ble.w	8000eb0 <_Z3PIDv+0xc>
			}
		}
	}

	if (duty[0] >= 0){
 8001058:	4b50      	ldr	r3, [pc, #320]	; (800119c <_Z3PIDv+0x2f8>)
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db10      	blt.n	8001084 <_Z3PIDv+0x1e0>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2120      	movs	r1, #32
 8001066:	4857      	ldr	r0, [pc, #348]	; (80011c4 <_Z3PIDv+0x320>)
 8001068:	f008 fca4 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2101      	movs	r1, #1
 8001070:	4855      	ldr	r0, [pc, #340]	; (80011c8 <_Z3PIDv+0x324>)
 8001072:	f008 fc9f 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty[0]);
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <_Z3PIDv+0x2f8>)
 8001078:	f9b3 2000 	ldrsh.w	r2, [r3]
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <_Z3PIDv+0x328>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
 8001082:	e015      	b.n	80010b0 <_Z3PIDv+0x20c>
	}
	else if (duty[0] < 0){
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <_Z3PIDv+0x2f8>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	da10      	bge.n	80010b0 <_Z3PIDv+0x20c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <_Z3PIDv+0x320>)
 8001094:	f008 fc8e 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	484a      	ldr	r0, [pc, #296]	; (80011c8 <_Z3PIDv+0x324>)
 800109e:	f008 fc89 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-duty[0]);
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <_Z3PIDv+0x2f8>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	425a      	negs	r2, r3
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <_Z3PIDv+0x328>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (duty[1] >= 0){
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <_Z3PIDv+0x2f8>)
 80010b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db10      	blt.n	80010dc <_Z3PIDv+0x238>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2102      	movs	r1, #2
 80010be:	4842      	ldr	r0, [pc, #264]	; (80011c8 <_Z3PIDv+0x324>)
 80010c0:	f008 fc78 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2104      	movs	r1, #4
 80010c8:	483f      	ldr	r0, [pc, #252]	; (80011c8 <_Z3PIDv+0x324>)
 80010ca:	f008 fc73 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,duty[1]);
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <_Z3PIDv+0x2f8>)
 80010d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <_Z3PIDv+0x328>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
 80010da:	e015      	b.n	8001108 <_Z3PIDv+0x264>
	}
	else if (duty[1] < 0){
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <_Z3PIDv+0x2f8>)
 80010de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da10      	bge.n	8001108 <_Z3PIDv+0x264>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2102      	movs	r1, #2
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <_Z3PIDv+0x324>)
 80010ec:	f008 fc62 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2104      	movs	r1, #4
 80010f4:	4834      	ldr	r0, [pc, #208]	; (80011c8 <_Z3PIDv+0x324>)
 80010f6:	f008 fc5d 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-duty[1]);
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <_Z3PIDv+0x2f8>)
 80010fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001100:	425a      	negs	r2, r3
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <_Z3PIDv+0x328>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (duty[2] >= 0){
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <_Z3PIDv+0x2f8>)
 800110a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db12      	blt.n	8001138 <_Z3PIDv+0x294>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	482b      	ldr	r0, [pc, #172]	; (80011c8 <_Z3PIDv+0x324>)
 800111a:	f008 fc4b 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001124:	4828      	ldr	r0, [pc, #160]	; (80011c8 <_Z3PIDv+0x324>)
 8001126:	f008 fc45 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,duty[2]);
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <_Z3PIDv+0x2f8>)
 800112c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <_Z3PIDv+0x328>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
 8001136:	e017      	b.n	8001168 <_Z3PIDv+0x2c4>
	}
	else if (duty[2] < 0){
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <_Z3PIDv+0x2f8>)
 800113a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	da12      	bge.n	8001168 <_Z3PIDv+0x2c4>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <_Z3PIDv+0x324>)
 800114a:	f008 fc33 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <_Z3PIDv+0x324>)
 8001156:	f008 fc2d 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,-duty[2]);
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_Z3PIDv+0x2f8>)
 800115c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001160:	425a      	negs	r2, r3
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <_Z3PIDv+0x328>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if (duty[3] >= 0){
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <_Z3PIDv+0x2f8>)
 800116a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db2e      	blt.n	80011d0 <_Z3PIDv+0x32c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <_Z3PIDv+0x324>)
 800117a:	f008 fc1b 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <_Z3PIDv+0x324>)
 8001186:	f008 fc15 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,duty[3]);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <_Z3PIDv+0x2f8>)
 800118c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_Z3PIDv+0x328>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
 8001196:	e033      	b.n	8001200 <_Z3PIDv+0x35c>
 8001198:	20000444 	.word	0x20000444
 800119c:	200004d4 	.word	0x200004d4
 80011a0:	20000454 	.word	0x20000454
 80011a4:	20000494 	.word	0x20000494
 80011a8:	200004a4 	.word	0x200004a4
 80011ac:	200004b4 	.word	0x200004b4
 80011b0:	200004c4 	.word	0x200004c4
 80011b4:	20000464 	.word	0x20000464
 80011b8:	20000474 	.word	0x20000474
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20000484 	.word	0x20000484
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	20000100 	.word	0x20000100
	}
	else if (duty[3] < 0){
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <_Z3PIDv+0x36c>)
 80011d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da12      	bge.n	8001200 <_Z3PIDv+0x35c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <_Z3PIDv+0x370>)
 80011e2:	f008 fbe7 	bl	80099b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <_Z3PIDv+0x370>)
 80011ee:	f008 fbe1 	bl	80099b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-duty[3]);
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_Z3PIDv+0x36c>)
 80011f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011f8:	425a      	negs	r2, r3
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_Z3PIDv+0x374>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
	}
	check_PID = 0;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <_Z3PIDv+0x378>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200004d4 	.word	0x200004d4
 8001214:	40020400 	.word	0x40020400
 8001218:	20000100 	.word	0x20000100
 800121c:	20000528 	.word	0x20000528

08001220 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	// Check if timer has triggered and update attitude
	if (htim == &htim7)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d102      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		MPU_calcAttitude(&hi2c1);
 8001230:	4850      	ldr	r0, [pc, #320]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001232:	f005 fe51 	bl	8006ed8 <MPU_calcAttitude>
	}
	if (htim->Instance == TIM6)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800123c:	4293      	cmp	r3, r2
 800123e:	f040 8092 	bne.w	8001366 <HAL_TIM_PeriodElapsedCallback+0x146>
	{
			encoder_cnt[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800124c:	801a      	strh	r2, [r3, #0]
			encoder_cnt[1] = __HAL_TIM_GET_COUNTER(&htim3);
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001258:	805a      	strh	r2, [r3, #2]
			encoder_cnt[2] = __HAL_TIM_GET_COUNTER(&htim4);
 800125a:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001264:	809a      	strh	r2, [r3, #4]
			encoder_cnt[3] = __HAL_TIM_GET_COUNTER(&htim5);
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001270:	80da      	strh	r2, [r3, #6]
			for (int i = 0; i < 4; i++){
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e06e      	b.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x136>
				if(-encoder_cnt[i] + encoder_cnt_pre[i] > 30000)			// Handle counter overflow when reversing
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001280:	4619      	mov	r1, r3
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128a:	1acb      	subs	r3, r1, r3
 800128c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001290:	4293      	cmp	r3, r2
 8001292:	dd0f      	ble.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x94>
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i] - 65536;
 8001294:	4a3e      	ldr	r2, [pc, #248]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800129c:	4938      	ldr	r1, [pc, #224]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b219      	sxth	r1, r3
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012b2:	e02b      	b.n	800130c <HAL_TIM_PeriodElapsedCallback+0xec>
				}
				else if(-encoder_cnt[i] + encoder_cnt_pre[i] < -30000)	// Handling counter overflow during forward rotation
 80012b4:	4a36      	ldr	r2, [pc, #216]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012bc:	4619      	mov	r1, r3
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	4a33      	ldr	r2, [pc, #204]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	da0f      	bge.n	80012ee <HAL_TIM_PeriodElapsedCallback+0xce>
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i] + 65536;
 80012ce:	4a30      	ldr	r2, [pc, #192]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012d6:	492a      	ldr	r1, [pc, #168]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b219      	sxth	r1, r3
 80012e4:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012ec:	e00e      	b.n	800130c <HAL_TIM_PeriodElapsedCallback+0xec>
				}
				else
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i];
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012f6:	4922      	ldr	r1, [pc, #136]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	b219      	sxth	r1, r3
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				v_enc[i] = (float)(delta[i])*60*5/1440;
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800139c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800132c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80013a0 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	edc3 7a00 	vstr	s15, [r3]
				encoder_cnt_pre[i] = encoder_cnt[i] ;
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 4; i++){
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b03      	cmp	r3, #3
 800135a:	dd8d      	ble.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x58>
			}
			check_PID = 1;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
			PID();
 8001362:	f7ff fd9f 	bl	8000ea4 <_Z3PIDv>
	}
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002b0 	.word	0x200002b0
 8001374:	200000ac 	.word	0x200000ac
 8001378:	40001000 	.word	0x40001000
 800137c:	20000148 	.word	0x20000148
 8001380:	200004dc 	.word	0x200004dc
 8001384:	20000190 	.word	0x20000190
 8001388:	200001d8 	.word	0x200001d8
 800138c:	20000220 	.word	0x20000220
 8001390:	200004e4 	.word	0x200004e4
 8001394:	200004ec 	.word	0x200004ec
 8001398:	ffff8ad0 	.word	0xffff8ad0
 800139c:	42700000 	.word	0x42700000
 80013a0:	44b40000 	.word	0x44b40000
 80013a4:	20000454 	.word	0x20000454
 80013a8:	20000528 	.word	0x20000528

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f007 f8d4 	bl	800855c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f8cc 	bl	8001550 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f000 fcf6 	bl	8001da8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80013bc:	f000 fccc 	bl	8001d58 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80013c0:	f000 fc9c 	bl	8001cfc <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80013c4:	f000 fa5e 	bl	8001884 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80013c8:	f000 faba 	bl	8001940 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80013cc:	f000 fb16 	bl	80019fc <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 80013d0:	f000 fb72 	bl	8001ab8 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 80013d4:	f000 f964 	bl	80016a0 <_ZL12MX_TIM1_Initv>
  MX_TIM9_Init();
 80013d8:	f000 fc4c 	bl	8001c74 <_ZL12MX_TIM9_Initv>
  MX_TIM6_Init();
 80013dc:	f000 fbca 	bl	8001b74 <_ZL12MX_TIM6_Initv>
  MX_I2C1_Init();
 80013e0:	f000 f92a 	bl	8001638 <_ZL12MX_I2C1_Initv>
  MX_TIM7_Init();
 80013e4:	f000 fc06 	bl	8001bf4 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */
  Flash_Read_Array_Float(0x080A0000, Kp, 4);
 80013e8:	2204      	movs	r2, #4
 80013ea:	4946      	ldr	r1, [pc, #280]	; (8001504 <main+0x158>)
 80013ec:	4846      	ldr	r0, [pc, #280]	; (8001508 <main+0x15c>)
 80013ee:	f005 f9c2 	bl	8006776 <Flash_Read_Array_Float>
  Flash_Read_Array_Float(0x080C0000, Ki, 4);
 80013f2:	2204      	movs	r2, #4
 80013f4:	4945      	ldr	r1, [pc, #276]	; (800150c <main+0x160>)
 80013f6:	4846      	ldr	r0, [pc, #280]	; (8001510 <main+0x164>)
 80013f8:	f005 f9bd 	bl	8006776 <Flash_Read_Array_Float>
  Flash_Read_Array_Float(0x080E0000, Kd, 4);
 80013fc:	2204      	movs	r2, #4
 80013fe:	4945      	ldr	r1, [pc, #276]	; (8001514 <main+0x168>)
 8001400:	4845      	ldr	r0, [pc, #276]	; (8001518 <main+0x16c>)
 8001402:	f005 f9b8 	bl	8006776 <Flash_Read_Array_Float>

  setup();
 8001406:	f004 fdd3 	bl	8005fb0 <setup>
  if (MPU_begin(&hi2c1, AD0_LOW, tau, dt))
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <main+0x170>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <main+0x174>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	2168      	movs	r1, #104	; 0x68
 8001420:	4840      	ldr	r0, [pc, #256]	; (8001524 <main+0x178>)
 8001422:	f005 fa1b 	bl	800685c <MPU_begin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <main+0x92>
   {
	  error =0;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <main+0x17c>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e002      	b.n	8001444 <main+0x98>
   }
  else error =1;
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <main+0x17c>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]

  MPU_calibrateGyro(&hi2c1, num_cal_point);
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <main+0x180>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	4836      	ldr	r0, [pc, #216]	; (8001524 <main+0x178>)
 800144c:	f005 fc4a 	bl	8006ce4 <MPU_calibrateGyro>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	4837      	ldr	r0, [pc, #220]	; (8001530 <main+0x184>)
 8001454:	f00b fcac 	bl	800cdb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001458:	2104      	movs	r1, #4
 800145a:	4835      	ldr	r0, [pc, #212]	; (8001530 <main+0x184>)
 800145c:	f00b fca8 	bl	800cdb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001460:	2108      	movs	r1, #8
 8001462:	4833      	ldr	r0, [pc, #204]	; (8001530 <main+0x184>)
 8001464:	f00b fca4 	bl	800cdb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001468:	210c      	movs	r1, #12
 800146a:	4831      	ldr	r0, [pc, #196]	; (8001530 <main+0x184>)
 800146c:	f00b fca0 	bl	800cdb0 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	4830      	ldr	r0, [pc, #192]	; (8001534 <main+0x188>)
 8001474:	f00b fe0a 	bl	800d08c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001478:	213c      	movs	r1, #60	; 0x3c
 800147a:	482f      	ldr	r0, [pc, #188]	; (8001538 <main+0x18c>)
 800147c:	f00b fe06 	bl	800d08c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001480:	213c      	movs	r1, #60	; 0x3c
 8001482:	482e      	ldr	r0, [pc, #184]	; (800153c <main+0x190>)
 8001484:	f00b fe02 	bl	800d08c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8001488:	213c      	movs	r1, #60	; 0x3c
 800148a:	482d      	ldr	r0, [pc, #180]	; (8001540 <main+0x194>)
 800148c:	f00b fdfe 	bl	800d08c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8001490:	482c      	ldr	r0, [pc, #176]	; (8001544 <main+0x198>)
 8001492:	f00b fbc3 	bl	800cc1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001496:	482c      	ldr	r0, [pc, #176]	; (8001548 <main+0x19c>)
 8001498:	f00b fbc0 	bl	800cc1c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	data_PID[0] = Kp[0]; data_PID[1] = Ki[0]; data_PID[2] = Kd[0]; data_PID[3] = Kp[1]; data_PID[4] = Ki[1]; data_PID[5] = Kd[1]; data_PID[6] = Kp[2]; data_PID[7] = Ki[2]; data_PID[8] = Kd[2]; data_PID[9] = Kp[3]; data_PID[10] = Ki[3]; data_PID[11] = Kd[3];
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <main+0x158>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <main+0x1a0>)
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <main+0x160>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <main+0x1a0>)
 80014aa:	6053      	str	r3, [r2, #4]
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <main+0x168>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <main+0x1a0>)
 80014b2:	6093      	str	r3, [r2, #8]
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <main+0x158>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <main+0x1a0>)
 80014ba:	60d3      	str	r3, [r2, #12]
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <main+0x160>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <main+0x1a0>)
 80014c2:	6113      	str	r3, [r2, #16]
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <main+0x168>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a20      	ldr	r2, [pc, #128]	; (800154c <main+0x1a0>)
 80014ca:	6153      	str	r3, [r2, #20]
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <main+0x158>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <main+0x1a0>)
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <main+0x160>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <main+0x1a0>)
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <main+0x168>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <main+0x1a0>)
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <main+0x158>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <main+0x1a0>)
 80014ea:	6253      	str	r3, [r2, #36]	; 0x24
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <main+0x160>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <main+0x1a0>)
 80014f2:	6293      	str	r3, [r2, #40]	; 0x28
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <main+0x168>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <main+0x1a0>)
 80014fa:	62d3      	str	r3, [r2, #44]	; 0x2c

	loop();
 80014fc:	f004 fd80 	bl	8006000 <loop>
	data_PID[0] = Kp[0]; data_PID[1] = Ki[0]; data_PID[2] = Kd[0]; data_PID[3] = Kp[1]; data_PID[4] = Ki[1]; data_PID[5] = Kd[1]; data_PID[6] = Kp[2]; data_PID[7] = Ki[2]; data_PID[8] = Kd[2]; data_PID[9] = Kp[3]; data_PID[10] = Ki[3]; data_PID[11] = Kd[3];
 8001500:	e7cc      	b.n	800149c <main+0xf0>
 8001502:	bf00      	nop
 8001504:	20000464 	.word	0x20000464
 8001508:	080a0000 	.word	0x080a0000
 800150c:	20000474 	.word	0x20000474
 8001510:	080c0000 	.word	0x080c0000
 8001514:	20000484 	.word	0x20000484
 8001518:	080e0000 	.word	0x080e0000
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004
 8001524:	200000ac 	.word	0x200000ac
 8001528:	20000529 	.word	0x20000529
 800152c:	20000008 	.word	0x20000008
 8001530:	20000100 	.word	0x20000100
 8001534:	20000148 	.word	0x20000148
 8001538:	20000190 	.word	0x20000190
 800153c:	200001d8 	.word	0x200001d8
 8001540:	20000220 	.word	0x20000220
 8001544:	20000268 	.word	0x20000268
 8001548:	200002b0 	.word	0x200002b0
 800154c:	200004f8 	.word	0x200004f8

08001550 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f00e f965 	bl	800f82e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <_Z18SystemClock_Configv+0xe0>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <_Z18SystemClock_Configv+0xe0>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <_Z18SystemClock_Configv+0xe0>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <_Z18SystemClock_Configv+0xe4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <_Z18SystemClock_Configv+0xe4>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <_Z18SystemClock_Configv+0xe4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015c4:	23a8      	movs	r3, #168	; 0xa8
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00a fe79 	bl	800c2cc <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80015ea:	f000 fc6f 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ee:	230f      	movs	r3, #15
 80015f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f2:	2302      	movs	r3, #2
 80015f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2105      	movs	r1, #5
 800160c:	4618      	mov	r0, r3
 800160e:	f00b f8d5 	bl	800c7bc <HAL_RCC_ClockConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001622:	f000 fc53 	bl	8001ecc <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	; 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <_ZL12MX_I2C1_Initv+0x60>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <_ZL12MX_I2C1_Initv+0x64>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <_ZL12MX_I2C1_Initv+0x5c>)
 8001676:	f008 f9b7 	bl	80099e8 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800168a:	f000 fc1f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000ac 	.word	0x200000ac
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2220      	movs	r2, #32
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f00e f8a8 	bl	800f82e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80016e0:	4a67      	ldr	r2, [pc, #412]	; (8001880 <_ZL12MX_TIM1_Initv+0x1e0>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80016e4:	4b65      	ldr	r3, [pc, #404]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80016e6:	22a7      	movs	r2, #167	; 0xa7
 80016e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80016f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fe:	4b5f      	ldr	r3, [pc, #380]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001704:	4b5d      	ldr	r3, [pc, #372]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800170a:	485c      	ldr	r0, [pc, #368]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 800170c:	f00b fa36 	bl	800cb7c <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001720:	f000 fbd4 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800172e:	4619      	mov	r1, r3
 8001730:	4852      	ldr	r0, [pc, #328]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001732:	f00b ff03 	bl	800d53c <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf14      	ite	ne
 800173c:	2301      	movne	r3, #1
 800173e:	2300      	moveq	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001746:	f000 fbc1 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800174a:	484c      	ldr	r0, [pc, #304]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 800174c:	f00b fad6 	bl	800ccfc <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001760:	f000 fbb4 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001770:	4619      	mov	r1, r3
 8001772:	4842      	ldr	r0, [pc, #264]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001774:	f00c fae2 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001788:	f000 fba0 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4832      	ldr	r0, [pc, #200]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80017b2:	f00b fe01 	bl	800d3b8 <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 80017c6:	f000 fb81 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80017d4:	f00b fdf0 	bl	800d3b8 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 80017e8:	f000 fb70 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	2208      	movs	r2, #8
 80017f2:	4619      	mov	r1, r3
 80017f4:	4821      	ldr	r0, [pc, #132]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 80017f6:	f00b fddf 	bl	800d3b8 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800180a:	f000 fb5f 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	220c      	movs	r2, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4819      	ldr	r0, [pc, #100]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001818:	f00b fdce 	bl	800d3b8 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 800182c:	f000 fb4e 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001854:	f00c faee 	bl	800de34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8001868:	f000 fb30 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <_ZL12MX_TIM1_Initv+0x1dc>)
 800186e:	f006 fc95 	bl	800819c <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3758      	adds	r7, #88	; 0x58
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000100 	.word	0x20000100
 8001880:	40010000 	.word	0x40010000

08001884 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00d ffcb 	bl	800f82e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018c8:	2303      	movs	r3, #3
 80018ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	4812      	ldr	r0, [pc, #72]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 80018f4:	f00b fb24 	bl	800cf40 <HAL_TIM_Encoder_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001908:	f000 fae0 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <_ZL12MX_TIM2_Initv+0xb8>)
 800191a:	f00c fa0f 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800192e:	f000 facd 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	; 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000148 	.word	0x20000148

08001940 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f00d ff6d 	bl	800f82e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 800195e:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <_ZL12MX_TIM3_Initv+0xb8>)
 8001960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001982:	2303      	movs	r3, #3
 8001984:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 80019ae:	f00b fac7 	bl	800cf40 <HAL_TIM_Encoder_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80019c2:	f000 fa83 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <_ZL12MX_TIM3_Initv+0xb4>)
 80019d4:	f00c f9b2 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80019e8:	f000 fa70 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000190 	.word	0x20000190
 80019f8:	40000400 	.word	0x40000400

080019fc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2224      	movs	r2, #36	; 0x24
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d ff0f 	bl	800f82e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <_ZL12MX_TIM4_Initv+0xb8>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a46:	2301      	movs	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a56:	2301      	movs	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a6a:	f00b fa69 	bl	800cf40 <HAL_TIM_Encoder_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001a7e:	f000 fa25 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a90:	f00c f954 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001aa4:	f000 fa12 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001d8 	.word	0x200001d8
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00d feb1 	bl	800f82e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <_ZL12MX_TIM5_Initv+0xb8>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001b26:	f00b fa0b 	bl	800cf40 <HAL_TIM_Encoder_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001b3a:	f000 f9c7 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001b4c:	f00c f8f6 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001b60:	f000 f9b4 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000220 	.word	0x20000220
 8001b70:	40000c00 	.word	0x40000c00

08001b74 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <_ZL12MX_TIM6_Initv+0x7c>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b8a:	f240 628f 	movw	r2, #1679	; 0x68f
 8001b8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b98:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001ba6:	f00a ffe9 	bl	800cb7c <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001bba:	f000 f987 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001bcc:	f00c f8b6 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001be0:	f000 f974 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000268 	.word	0x20000268
 8001bf0:	40001000 	.word	0x40001000

08001bf4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <_ZL12MX_TIM7_Initv+0x7c>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3359;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c0a:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001c0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c18:	2263      	movs	r2, #99	; 0x63
 8001c1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c24:	f00a ffaa 	bl	800cb7c <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8001c38:	f000 f948 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <_ZL12MX_TIM7_Initv+0x78>)
 8001c4a:	f00c f877 	bl	800dd3c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8001c5e:	f000 f935 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200002b0 	.word	0x200002b0
 8001c70:	40001400 	.word	0x40001400

08001c74 <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <_ZL12MX_TIM9_Initv+0x84>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001c8e:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001c92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001c9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ca0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001cb0:	f00a ff64 	bl	800cb7c <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <_ZL12MX_TIM9_Initv+0x54>
  {
    Error_Handler();
 8001cc4:	f000 f902 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <_ZL12MX_TIM9_Initv+0x80>)
 8001cd4:	f00b fc32 	bl	800d53c <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <_ZL12MX_TIM9_Initv+0x78>
  {
    Error_Handler();
 8001ce8:	f000 f8f0 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200002f8 	.word	0x200002f8
 8001cf8:	40014000 	.word	0x40014000

08001cfc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d02:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d08:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d34:	f00c f8e4 	bl	800df00 <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001d48:	f000 f8c0 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000340 	.word	0x20000340
 8001d54:	40004400 	.word	0x40004400

08001d58 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_ZL11MX_DMA_Initv+0x4c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <_ZL11MX_DMA_Initv+0x4c>)
 8001d68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <_ZL11MX_DMA_Initv+0x4c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f006 fd5d 	bl	800883e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d84:	2010      	movs	r0, #16
 8001d86:	f006 fd76 	bl	8008876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f006 fd55 	bl	800883e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d94:	2011      	movs	r0, #17
 8001d96:	f006 fd6e 	bl	8008876 <HAL_NVIC_EnableIRQ>

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a29      	ldr	r2, [pc, #164]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e38:	f043 0310 	orr.w	r3, r3, #16
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <_ZL12MX_GPIO_Initv+0x118>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <_ZL12MX_GPIO_Initv+0x11c>)
 8001e6c:	f007 fda2 	bl	80099b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001e70:	2200      	movs	r2, #0
 8001e72:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001e76:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <_ZL12MX_GPIO_Initv+0x120>)
 8001e78:	f007 fd9c 	bl	80099b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <_ZL12MX_GPIO_Initv+0x11c>)
 8001e94:	f007 fbf2 	bl	800967c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001e98:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001e9c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <_ZL12MX_GPIO_Initv+0x120>)
 8001eb2:	f007 fbe3 	bl	800967c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	; 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>
	...

08001ed8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d117      	bne.n	8001f18 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d112      	bne.n	8001f18 <_Z41__static_initialization_and_destruction_0ii+0x40>
float r = 0.05, d = 0.175*sqrt(2), l = 2*pi*r;
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fad2 	bl	80004a0 <__aeabi_f2d>
 8001efc:	a308      	add	r3, pc, #32	; (adr r3, 8001f20 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb25 	bl	8000550 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fdcf 	bl	8000ab0 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	54442d28 	.word	0x54442d28
 8001f24:	401921fb 	.word	0x401921fb
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	200004f4 	.word	0x200004f4

08001f30 <_GLOBAL__sub_I_hi2c1>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff ffcd 	bl	8001ed8 <_Z41__static_initialization_and_destruction_0ii>
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f4a:	edc7 0a00 	vstr	s1, [r7]
 8001f4e:	edd7 0a00 	vldr	s1, [r7]
 8001f52:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f56:	f00d f9db 	bl	800f310 <atan2f>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	0800ffbc 	.word	0x0800ffbc

08001fac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
      data()
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffe8 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ffce 	bl	8001f68 <_ZN3ros4TimeC1Ev>
    {
    }
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	0800ffa4 	.word	0x0800ffa4

08001fdc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	0a19      	lsrs	r1, r3, #8
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0c19      	lsrs	r1, r3, #16
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3302      	adds	r3, #2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b2ca      	uxtb	r2, r1
 800201a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0e19      	lsrs	r1, r3, #24
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3303      	adds	r3, #3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6899      	ldr	r1, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4413      	add	r3, r2
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0a19      	lsrs	r1, r3, #8
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	0c19      	lsrs	r1, r3, #16
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3302      	adds	r3, #2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0e19      	lsrs	r1, r3, #24
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3303      	adds	r3, #3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	b2ca      	uxtb	r2, r1
 8002076:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3304      	adds	r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
      return offset;
 800207e:	68fb      	ldr	r3, [r7, #12]
    }
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3301      	adds	r3, #1
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	440b      	add	r3, r1
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3302      	adds	r3, #2
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	440b      	add	r3, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3303      	adds	r3, #3
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	440b      	add	r3, r1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	440b      	add	r3, r1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3302      	adds	r3, #2
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	440b      	add	r3, r1
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	041b      	lsls	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3303      	adds	r3, #3
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	440b      	add	r3, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3304      	adds	r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
     return offset;
 8002146:	68fb      	ldr	r3, [r7, #12]
    }
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0800faec 	.word	0x0800faec

08002170 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	0800fafc 	.word	0x0800fafc

0800218c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fef8 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021ac:	609a      	str	r2, [r3, #8]
      message_type(""),
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021b2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021b8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
    {
    }
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800ff8c 	.word	0x0800ff8c
 80021d0:	0800fb20 	.word	0x0800fb20

080021d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8899      	ldrh	r1, [r3, #4]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	b2ca      	uxtb	r2, r1
 80021ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b299      	uxth	r1, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3302      	adds	r3, #2
 8002208:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd ffda 	bl	80001c8 <strlen>
 8002214:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	69b9      	ldr	r1, [r7, #24]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 ff12 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3304      	adds	r3, #4
 8002228:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	18d0      	adds	r0, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4619      	mov	r1, r3
 8002238:	f00d fb2e 	bl	800f898 <memcpy>
      offset += length_topic_name;
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4413      	add	r3, r2
 8002242:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fd ffbd 	bl	80001c8 <strlen>
 800224e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	4618      	mov	r0, r3
 800225a:	f004 fef5 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	18d0      	adds	r0, r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4619      	mov	r1, r3
 8002272:	f00d fb11 	bl	800f898 <memcpy>
      offset += length_message_type;
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4413      	add	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ffa0 	bl	80001c8 <strlen>
 8002288:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4413      	add	r3, r2
 8002290:	6939      	ldr	r1, [r7, #16]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fed8 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3304      	adds	r3, #4
 800229c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	18d0      	adds	r0, r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4619      	mov	r1, r3
 80022ac:	f00d faf4 	bl	800f898 <memcpy>
      offset += length_md5sum;
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0a19      	lsrs	r1, r3, #8
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c19      	lsrs	r1, r3, #16
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3302      	adds	r3, #2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	0e19      	lsrs	r1, r3, #24
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3303      	adds	r3, #3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	61fb      	str	r3, [r7, #28]
      return offset;
 8002300:	69fb      	ldr	r3, [r7, #28]
    }
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	889b      	ldrh	r3, [r3, #4]
 800232a:	b21a      	sxth	r2, r3
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3301      	adds	r3, #1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	440b      	add	r3, r1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21b      	sxth	r3, r3
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3302      	adds	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	441a      	add	r2, r3
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f004 fe95 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3304      	adds	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e00b      	b.n	8002380 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	441a      	add	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3b01      	subs	r3, #1
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	440b      	add	r3, r1
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4413      	add	r3, r2
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	429a      	cmp	r2, r3
 800238a:	d3ed      	bcc.n	8002368 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4413      	add	r3, r2
 8002392:	3b01      	subs	r3, #1
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4413      	add	r3, r2
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3b01      	subs	r3, #1
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	441a      	add	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4413      	add	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	441a      	add	r2, r3
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fe62 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	3304      	adds	r3, #4
 80023c6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	e00b      	b.n	80023e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	441a      	add	r2, r3
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6839      	ldr	r1, [r7, #0]
 80023da:	440b      	add	r3, r1
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	3301      	adds	r3, #1
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3ed      	bcc.n	80023ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	3b01      	subs	r3, #1
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	3b01      	subs	r3, #1
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	441a      	add	r2, r3
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fe2f 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3304      	adds	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e00b      	b.n	800244c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	441a      	add	r2, r3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b01      	subs	r3, #1
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	440b      	add	r3, r1
 8002442:	7812      	ldrb	r2, [r2, #0]
 8002444:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3ed      	bcc.n	8002434 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	3b01      	subs	r3, #1
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	4413      	add	r3, r2
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	3b01      	subs	r3, #1
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	441a      	add	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	440a      	add	r2, r1
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3301      	adds	r3, #1
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	440b      	add	r3, r1
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	4313      	orrs	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3302      	adds	r3, #2
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	3303      	adds	r3, #3
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	440b      	add	r3, r1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3304      	adds	r3, #4
 80024ce:	61bb      	str	r3, [r7, #24]
     return offset;
 80024d0:	69bb      	ldr	r3, [r7, #24]
    }
 80024d2:	4618      	mov	r0, r3
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	0800fb24 	.word	0x0800fb24

080024f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	0800fb40 	.word	0x0800fb40

08002514 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fd34 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
      level(0),
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002534:	609a      	str	r2, [r3, #8]
    {
    }
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	0800ff74 	.word	0x0800ff74
 8002544:	0800fb20 	.word	0x0800fb20

08002548 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	7912      	ldrb	r2, [r2, #4]
 8002560:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fe2b 	bl	80001c8 <strlen>
 8002572:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fd63 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	18d0      	adds	r0, r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	4619      	mov	r1, r3
 8002596:	f00d f97f 	bl	800f898 <memcpy>
      offset += length_msg;
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80025a2:	68fb      	ldr	r3, [r7, #12]
    }
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3301      	adds	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	441a      	add	r2, r3
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 fd54 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	3304      	adds	r3, #4
 80025e2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e00b      	b.n	8002602 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	441a      	add	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	440b      	add	r3, r1
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3ed      	bcc.n	80025ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	3b01      	subs	r3, #1
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3b01      	subs	r3, #1
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	441a      	add	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
     return offset;
 8002632:	693b      	ldr	r3, [r7, #16]
    }
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	0800fb64 	.word	0x0800fb64

08002658 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	0800fb78 	.word	0x0800fb78

08002674 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fc84 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0800ff5c 	.word	0x0800ff5c

080026d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	b2ca      	uxtb	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0a19      	lsrs	r1, r3, #8
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0c19      	lsrs	r1, r3, #16
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	3302      	adds	r3, #2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0e19      	lsrs	r1, r3, #24
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3303      	adds	r3, #3
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3304      	adds	r3, #4
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	e02a      	b.n	8002784 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	b2ca      	uxtb	r2, r1
 8002746:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	0a19      	lsrs	r1, r3, #8
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4413      	add	r3, r2
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	0c19      	lsrs	r1, r3, #16
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3302      	adds	r3, #2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4413      	add	r3, r2
 8002764:	b2ca      	uxtb	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	0e19      	lsrs	r1, r3, #24
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3303      	adds	r3, #3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	b2ca      	uxtb	r2, r1
 8002776:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3304      	adds	r3, #4
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	3301      	adds	r3, #1
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3cf      	bcc.n	800272e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4413      	add	r3, r2
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	0a19      	lsrs	r1, r3, #8
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	3301      	adds	r3, #1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	4413      	add	r3, r2
 80027aa:	b2ca      	uxtb	r2, r1
 80027ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	0c19      	lsrs	r1, r3, #16
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	3302      	adds	r3, #2
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	0e19      	lsrs	r1, r3, #24
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3303      	adds	r3, #3
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3304      	adds	r3, #4
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e02a      	b.n	8002834 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	0a19      	lsrs	r1, r3, #8
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	b2ca      	uxtb	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	0c19      	lsrs	r1, r3, #16
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3302      	adds	r3, #2
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4413      	add	r3, r2
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0e19      	lsrs	r1, r3, #24
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3303      	adds	r3, #3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	3304      	adds	r3, #4
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	429a      	cmp	r2, r3
 800283c:	d3cf      	bcc.n	80027de <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69d9      	ldr	r1, [r3, #28]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	0a19      	lsrs	r1, r3, #8
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4413      	add	r3, r2
 800285a:	b2ca      	uxtb	r2, r1
 800285c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	0c19      	lsrs	r1, r3, #16
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3302      	adds	r3, #2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	0e19      	lsrs	r1, r3, #24
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	3303      	adds	r3, #3
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	4413      	add	r3, r2
 800287e:	b2ca      	uxtb	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3304      	adds	r3, #4
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	e027      	b.n	80028de <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fc94 	bl	80001c8 <strlen>
 80028a0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fbcc 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3304      	adds	r3, #4
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	18d0      	adds	r0, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f00c ffe4 	bl	800f898 <memcpy>
      offset += length_stringsi;
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4413      	add	r3, r2
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	3301      	adds	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3d2      	bcc.n	800288e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028ea:	4618      	mov	r0, r3
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08e      	sub	sp, #56	; 0x38
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	3301      	adds	r3, #1
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	4313      	orrs	r3, r2
 800291a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	3302      	adds	r3, #2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	4313      	orrs	r3, r2
 800292c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	3303      	adds	r3, #3
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	4313      	orrs	r3, r2
 800293e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	3304      	adds	r3, #4
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	429a      	cmp	r2, r3
 800294e:	d90a      	bls.n	8002966 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f00c ff30 	bl	800f7c0 <realloc>
 8002960:	4602      	mov	r2, r0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
 8002970:	e035      	b.n	80029de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	440a      	add	r2, r1
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	3301      	adds	r3, #1
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	440b      	add	r3, r1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	3302      	adds	r3, #2
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	440b      	add	r3, r1
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	3303      	adds	r3, #3
 80029ae:	6839      	ldr	r1, [r7, #0]
 80029b0:	440b      	add	r3, r1
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	3304      	adds	r3, #4
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	3301      	adds	r3, #1
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3c4      	bcc.n	8002972 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	3301      	adds	r3, #1
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a06:	3302      	adds	r3, #2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	3303      	adds	r3, #3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d90a      	bls.n	8002a4e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f00c febc 	bl	800f7c0 <realloc>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	e035      	b.n	8002ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	440a      	add	r2, r1
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	3301      	adds	r3, #1
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	440b      	add	r3, r1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	3302      	adds	r3, #2
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	440b      	add	r3, r1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	3303      	adds	r3, #3
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	440b      	add	r3, r1
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	3304      	adds	r3, #4
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	3214      	adds	r2, #20
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d3c4      	bcc.n	8002a5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	3301      	adds	r3, #1
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aee:	3302      	adds	r3, #2
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	3303      	adds	r3, #3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	3304      	adds	r3, #4
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d90a      	bls.n	8002b36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f00c fe48 	bl	800f7c0 <realloc>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b40:	e03e      	b.n	8002bc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	441a      	add	r2, r3
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fa99 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	3304      	adds	r3, #4
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e00b      	b.n	8002b78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	441a      	add	r2, r3
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	440b      	add	r3, r1
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3ed      	bcc.n	8002b60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	3b01      	subs	r3, #1
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	3220      	adds	r2, #32
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3bb      	bcc.n	8002b42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3738      	adds	r7, #56	; 0x38
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	0800fe08 	.word	0x0800fe08

08002bf0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	0800fb9c 	.word	0x0800fb9c

08002c0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	611a      	str	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68d8      	ldr	r0, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6891      	ldr	r1, [r2, #8]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4798      	blx	r3
 8002c58:	4603      	mov	r3, r0
  };
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
  }
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <_ZN13STM32HardwareC1Ev+0x34>)
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	20000340 	.word	0x20000340

08002cd8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f804 	bl	8002cee <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d02:	4619      	mov	r1, r3
 8002d04:	f00b f9c8 	bl	800e098 <HAL_UART_Receive_DMA>
    }
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffa8 	bl	8002c7a <_ZN13STM32Hardware10getRdmaIndEv>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d40:	1c59      	adds	r1, r3, #1
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	791b      	ldrb	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002d60:	68fb      	ldr	r3, [r7, #12]
    }
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
	...

08002d6c <_ZN13STM32Hardware5flushEv>:
          tfind = (tfind + len) % tbuflen;
        }
        mutex = false;
      }
    }*/
    void flush(void){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d108      	bne.n	8002d94 <_ZN13STM32Hardware5flushEv+0x28>
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZN13STM32Hardware5flushEv+0x28>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <_ZN13STM32Hardware5flushEv+0x2a>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03f      	beq.n	8002e1a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d031      	beq.n	8002e14 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d20a      	bcs.n	8002dd6 <_ZN13STM32Hardware5flushEv+0x6a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	e006      	b.n	8002de4 <_ZN13STM32Hardware5flushEv+0x78>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002df0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	89fa      	ldrh	r2, [r7, #14]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f00b f8ce 	bl	800df9c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
      }
    }
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	2000052a 	.word	0x2000052a

08002e28 <_ZN13STM32Hardware5writeEPhi>:


    void write(uint8_t* data, int length){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
      int n = length;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3e:	bfa8      	it	ge
 8002e40:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002e44:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e4c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bf28      	it	cs
 8002e56:	4613      	movcs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00c fd13 	bl	800f898 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d00b      	beq.n	8002ea6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	18d1      	adds	r1, r2, r3
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f00c fcf9 	bl	800f898 <memcpy>
      }

      flush();
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff ff60 	bl	8002d6c <_ZN13STM32Hardware5flushEv>
    }
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	f005 fbb4 	bl	8008628 <HAL_GetTick>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f858 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8002edc:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
      label(""),
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002ee6:	605a      	str	r2, [r3, #4]
      size(0),
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
      stride(0)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
    {
    }
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	0800ff18 	.word	0x0800ff18
 8002f04:	0800fb20 	.word	0x0800fb20

08002f08 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd f954 	bl	80001c8 <strlen>
 8002f20:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 f88c 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3304      	adds	r3, #4
 8002f34:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	18d0      	adds	r0, r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	4619      	mov	r1, r3
 8002f44:	f00c fca8 	bl	800f898 <memcpy>
      offset += length_label;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	b2ca      	uxtb	r2, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	0a19      	lsrs	r1, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2ca      	uxtb	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	0c19      	lsrs	r1, r3, #16
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	b2ca      	uxtb	r2, r1
 8002f80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0e19      	lsrs	r1, r3, #24
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b2ca      	uxtb	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3304      	adds	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b2ca      	uxtb	r2, r1
 8002fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a19      	lsrs	r1, r3, #8
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b2ca      	uxtb	r2, r1
 8002fb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	0c19      	lsrs	r1, r3, #16
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b2ca      	uxtb	r2, r1
 8002fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0e19      	lsrs	r1, r3, #24
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3303      	adds	r3, #3
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b2ca      	uxtb	r2, r1
 8002fdc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	441a      	add	r2, r3
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f004 f83c 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3304      	adds	r3, #4
 8003012:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e00b      	b.n	8003032 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	441a      	add	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3b01      	subs	r3, #1
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	440b      	add	r3, r1
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3ed      	bcc.n	800301a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	3b01      	subs	r3, #1
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	4413      	add	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3b01      	subs	r3, #1
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]
      offset += length_label;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3301      	adds	r3, #1
 8003078:	6839      	ldr	r1, [r7, #0]
 800307a:	440b      	add	r3, r1
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3302      	adds	r3, #2
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	440b      	add	r3, r1
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	3303      	adds	r3, #3
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	440b      	add	r3, r1
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	3304      	adds	r3, #4
 80030b6:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	3301      	adds	r3, #1
 80030ce:	6839      	ldr	r1, [r7, #0]
 80030d0:	440b      	add	r3, r1
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	3302      	adds	r3, #2
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	440b      	add	r3, r1
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3303      	adds	r3, #3
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	440b      	add	r3, r1
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3304      	adds	r3, #4
 800310c:	613b      	str	r3, [r7, #16]
     return offset;
 800310e:	693b      	ldr	r3, [r7, #16]
    }
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	0800fbc0 	.word	0x0800fbc0

08003134 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	0800fbe0 	.word	0x0800fbe0

08003150 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe ff16 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8003160:	4a0a      	ldr	r2, [pc, #40]	; (800318c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3308      	adds	r3, #8
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff feab 	bl	8002ecc <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
    {
    }
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	0800ff00 	.word	0x0800ff00

08003190 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	b2ca      	uxtb	r2, r1
 80031aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0a19      	lsrs	r1, r3, #8
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3301      	adds	r3, #1
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	b2ca      	uxtb	r2, r1
 80031bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	0c19      	lsrs	r1, r3, #16
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3302      	adds	r3, #2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	b2ca      	uxtb	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	0e19      	lsrs	r1, r3, #24
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3303      	adds	r3, #3
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	b2ca      	uxtb	r2, r1
 80031e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3304      	adds	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	e017      	b.n	800321e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	18d0      	adds	r0, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4413      	add	r3, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	440a      	add	r2, r1
 800320c:	4611      	mov	r1, r2
 800320e:	4798      	blx	r3
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3e2      	bcc.n	80031ee <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69d9      	ldr	r1, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	b2ca      	uxtb	r2, r1
 8003234:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	0a19      	lsrs	r1, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3301      	adds	r3, #1
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	b2ca      	uxtb	r2, r1
 8003246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	0c19      	lsrs	r1, r3, #16
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3302      	adds	r3, #2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	b2ca      	uxtb	r2, r1
 8003258:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	0e19      	lsrs	r1, r3, #24
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3303      	adds	r3, #3
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	b2ca      	uxtb	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3304      	adds	r3, #4
 8003270:	60fb      	str	r3, [r7, #12]
      return offset;
 8003272:	68fb      	ldr	r3, [r7, #12]
    }
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3302      	adds	r3, #2
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3303      	adds	r3, #3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3304      	adds	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d90a      	bls.n	80032f0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f00c fa6b 	bl	800f7c0 <realloc>
 80032ea:	4602      	mov	r2, r0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e01a      	b.n	8003332 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f103 0008 	add.w	r0, r3, #8
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	4619      	mov	r1, r3
 800330a:	f7ff fe70 	bl	8002fee <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4413      	add	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	18d0      	adds	r0, r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3308      	adds	r3, #8
 8003324:	2210      	movs	r2, #16
 8003326:	4619      	mov	r1, r3
 8003328:	f00c fab6 	bl	800f898 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3301      	adds	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	429a      	cmp	r2, r3
 800333a:	d3df      	bcc.n	80032fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3301      	adds	r3, #1
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	440b      	add	r3, r1
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3302      	adds	r3, #2
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	440b      	add	r3, r1
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3303      	adds	r3, #3
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	440b      	add	r3, r1
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3304      	adds	r3, #4
 8003390:	617b      	str	r3, [r7, #20]
     return offset;
 8003392:	697b      	ldr	r3, [r7, #20]
    }
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	0800fc04 	.word	0x0800fc04

080033b8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	0800fc20 	.word	0x0800fc20

080033d4 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fdd4 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 80033e4:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
      layout(),
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff feae 	bl	8003150 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	0800fee8 	.word	0x0800fee8

08003418 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1d18      	adds	r0, r3, #4
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4619      	mov	r1, r3
 8003432:	f7ff fead 	bl	8003190 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4413      	add	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4413      	add	r3, r2
 8003448:	b2ca      	uxtb	r2, r1
 800344a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	0a19      	lsrs	r1, r3, #8
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3301      	adds	r3, #1
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	b2ca      	uxtb	r2, r1
 800345c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	0c19      	lsrs	r1, r3, #16
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3302      	adds	r3, #2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	4413      	add	r3, r2
 800346c:	b2ca      	uxtb	r2, r1
 800346e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	0e19      	lsrs	r1, r3, #24
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3303      	adds	r3, #3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4413      	add	r3, r2
 800347e:	b2ca      	uxtb	r2, r1
 8003480:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3304      	adds	r3, #4
 8003486:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e02a      	b.n	80034e4 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	b2ca      	uxtb	r2, r1
 80034a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	0a19      	lsrs	r1, r3, #8
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3301      	adds	r3, #1
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	b2ca      	uxtb	r2, r1
 80034b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	0c19      	lsrs	r1, r3, #16
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3302      	adds	r3, #2
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	b2ca      	uxtb	r2, r1
 80034c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	0e19      	lsrs	r1, r3, #24
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3303      	adds	r3, #3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3304      	adds	r3, #4
 80034dc:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3301      	adds	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3cf      	bcc.n	800348e <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 80034ee:	697b      	ldr	r3, [r7, #20]
    }
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1d18      	adds	r0, r3, #4
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7ff feb3 	bl	800327c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003516:	4602      	mov	r2, r0
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4413      	add	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3302      	adds	r3, #2
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3303      	adds	r3, #3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	4413      	add	r3, r2
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3304      	adds	r3, #4
 8003562:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90a      	bls.n	8003584 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f00c f921 	bl	800f7c0 <realloc>
 800357e:	4602      	mov	r2, r0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e035      	b.n	80035fc <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	440a      	add	r2, r1
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	440b      	add	r3, r1
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3302      	adds	r3, #2
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	440b      	add	r3, r1
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3303      	adds	r3, #3
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	440b      	add	r3, r1
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	3228      	adds	r2, #40	; 0x28
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	429a      	cmp	r2, r3
 8003604:	d3c4      	bcc.n	8003590 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003606:	697b      	ldr	r3, [r7, #20]
    }
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	0800fc44 	.word	0x0800fc44

0800362c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	0800fc60 	.word	0x0800fc60

08003648 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fc9a 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8003658:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
      x(0),
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	0800fed0 	.word	0x0800fed0

08003698 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003698:	b480      	push	{r7}
 800369a:	b08b      	sub	sp, #44	; 0x2c
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b6:	6838      	ldr	r0, [r7, #0]
 80036b8:	4401      	add	r1, r0
 80036ba:	b2d3      	uxtb	r3, r2
 80036bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80036be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	0a02      	lsrs	r2, r0, #8
 80036cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036d0:	0a0b      	lsrs	r3, r1, #8
 80036d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d4:	3101      	adds	r1, #1
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	4401      	add	r1, r0
 80036da:	b2d3      	uxtb	r3, r2
 80036dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80036de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	0c02      	lsrs	r2, r0, #16
 80036ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036f0:	0c0b      	lsrs	r3, r1, #16
 80036f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f4:	3102      	adds	r1, #2
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	4401      	add	r1, r0
 80036fa:	b2d3      	uxtb	r3, r2
 80036fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80036fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	0e02      	lsrs	r2, r0, #24
 800370c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003710:	0e0b      	lsrs	r3, r1, #24
 8003712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003714:	3103      	adds	r1, #3
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	4401      	add	r1, r0
 800371a:	b2d3      	uxtb	r3, r2
 800371c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800371e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	000a      	movs	r2, r1
 800372c:	2300      	movs	r3, #0
 800372e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003730:	3104      	adds	r1, #4
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4401      	add	r1, r0
 8003736:	b2d3      	uxtb	r3, r2
 8003738:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800373a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	0a0a      	lsrs	r2, r1, #8
 8003748:	2300      	movs	r3, #0
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	3105      	adds	r1, #5
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	4401      	add	r1, r0
 8003752:	b2d3      	uxtb	r3, r2
 8003754:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	0c0a      	lsrs	r2, r1, #16
 8003764:	2300      	movs	r3, #0
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	3106      	adds	r1, #6
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	4401      	add	r1, r0
 800376e:	b2d3      	uxtb	r3, r2
 8003770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003772:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	0e0a      	lsrs	r2, r1, #24
 8003780:	2300      	movs	r3, #0
 8003782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003784:	3107      	adds	r1, #7
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	4401      	add	r1, r0
 800378a:	b2d3      	uxtb	r3, r2
 800378c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	3308      	adds	r3, #8
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800379a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800379e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a4:	6838      	ldr	r0, [r7, #0]
 80037a6:	4401      	add	r1, r0
 80037a8:	b2d3      	uxtb	r3, r2
 80037aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80037ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	0a02      	lsrs	r2, r0, #8
 80037ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80037be:	0a0b      	lsrs	r3, r1, #8
 80037c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c2:	3101      	adds	r1, #1
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	4401      	add	r1, r0
 80037c8:	b2d3      	uxtb	r3, r2
 80037ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80037cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	0c02      	lsrs	r2, r0, #16
 80037da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037de:	0c0b      	lsrs	r3, r1, #16
 80037e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e2:	3102      	adds	r1, #2
 80037e4:	6838      	ldr	r0, [r7, #0]
 80037e6:	4401      	add	r1, r0
 80037e8:	b2d3      	uxtb	r3, r2
 80037ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80037ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	0e02      	lsrs	r2, r0, #24
 80037fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037fe:	0e0b      	lsrs	r3, r1, #24
 8003800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003802:	3103      	adds	r1, #3
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	4401      	add	r1, r0
 8003808:	b2d3      	uxtb	r3, r2
 800380a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800380c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	000a      	movs	r2, r1
 800381a:	2300      	movs	r3, #0
 800381c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381e:	3104      	adds	r1, #4
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4401      	add	r1, r0
 8003824:	b2d3      	uxtb	r3, r2
 8003826:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003828:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	0a0a      	lsrs	r2, r1, #8
 8003836:	2300      	movs	r3, #0
 8003838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800383a:	3105      	adds	r1, #5
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	4401      	add	r1, r0
 8003840:	b2d3      	uxtb	r3, r2
 8003842:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003844:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	0c0a      	lsrs	r2, r1, #16
 8003852:	2300      	movs	r3, #0
 8003854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003856:	3106      	adds	r1, #6
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	4401      	add	r1, r0
 800385c:	b2d3      	uxtb	r3, r2
 800385e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003860:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	0e0a      	lsrs	r2, r1, #24
 800386e:	2300      	movs	r3, #0
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	3107      	adds	r1, #7
 8003874:	6838      	ldr	r0, [r7, #0]
 8003876:	4401      	add	r1, r0
 8003878:	b2d3      	uxtb	r3, r2
 800387a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	3308      	adds	r3, #8
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003888:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800388c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003892:	6838      	ldr	r0, [r7, #0]
 8003894:	4401      	add	r1, r0
 8003896:	b2d3      	uxtb	r3, r2
 8003898:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800389a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	0a02      	lsrs	r2, r0, #8
 80038a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80038ac:	0a0b      	lsrs	r3, r1, #8
 80038ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b0:	3101      	adds	r1, #1
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	4401      	add	r1, r0
 80038b6:	b2d3      	uxtb	r3, r2
 80038b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80038ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	0c02      	lsrs	r2, r0, #16
 80038c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80038cc:	0c0b      	lsrs	r3, r1, #16
 80038ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d0:	3102      	adds	r1, #2
 80038d2:	6838      	ldr	r0, [r7, #0]
 80038d4:	4401      	add	r1, r0
 80038d6:	b2d3      	uxtb	r3, r2
 80038d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80038da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	0e02      	lsrs	r2, r0, #24
 80038e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038ec:	0e0b      	lsrs	r3, r1, #24
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	3103      	adds	r1, #3
 80038f2:	6838      	ldr	r0, [r7, #0]
 80038f4:	4401      	add	r1, r0
 80038f6:	b2d3      	uxtb	r3, r2
 80038f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80038fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	000a      	movs	r2, r1
 8003908:	2300      	movs	r3, #0
 800390a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390c:	3104      	adds	r1, #4
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	4401      	add	r1, r0
 8003912:	b2d3      	uxtb	r3, r2
 8003914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	0a0a      	lsrs	r2, r1, #8
 8003924:	2300      	movs	r3, #0
 8003926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003928:	3105      	adds	r1, #5
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	4401      	add	r1, r0
 800392e:	b2d3      	uxtb	r3, r2
 8003930:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	0c0a      	lsrs	r2, r1, #16
 8003940:	2300      	movs	r3, #0
 8003942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003944:	3106      	adds	r1, #6
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	4401      	add	r1, r0
 800394a:	b2d3      	uxtb	r3, r2
 800394c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800394e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	0e0a      	lsrs	r2, r1, #24
 800395c:	2300      	movs	r3, #0
 800395e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003960:	3107      	adds	r1, #7
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	4401      	add	r1, r0
 8003966:	b2d3      	uxtb	r3, r2
 8003968:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	3308      	adds	r3, #8
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003972:	4618      	mov	r0, r3
 8003974:	372c      	adds	r7, #44	; 0x2c
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800397e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003982:	b0eb      	sub	sp, #428	; 0x1ac
 8003984:	af00      	add	r7, sp, #0
 8003986:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800398a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039a4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80039a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	461c      	mov	r4, r3
 80039b6:	4615      	mov	r5, r2
 80039b8:	ea40 0804 	orr.w	r8, r0, r4
 80039bc:	ea41 0905 	orr.w	r9, r1, r5
 80039c0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039d2:	4413      	add	r3, r2
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	469a      	mov	sl, r3
 80039dc:	4693      	mov	fp, r2
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80039ea:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80039ee:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80039f2:	ea40 0402 	orr.w	r4, r0, r2
 80039f6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80039fa:	430b      	orrs	r3, r1
 80039fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a00:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003a04:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a08:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003a22:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003a32:	464c      	mov	r4, r9
 8003a34:	0423      	lsls	r3, r4, #16
 8003a36:	4644      	mov	r4, r8
 8003a38:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a3c:	4644      	mov	r4, r8
 8003a3e:	0422      	lsls	r2, r4, #16
 8003a40:	ea40 0402 	orr.w	r4, r0, r2
 8003a44:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003a4e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003a52:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a56:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a5e:	1cda      	adds	r2, r3, #3
 8003a60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003a70:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003a74:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003a78:	4623      	mov	r3, r4
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003a80:	4623      	mov	r3, r4
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003a88:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	4303      	orrs	r3, r0
 8003a90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a94:	462b      	mov	r3, r5
 8003a96:	430b      	orrs	r3, r1
 8003a98:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a9c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003aa0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003aa4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003aa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aac:	1d1a      	adds	r2, r3, #4
 8003aae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003abe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003ace:	0023      	movs	r3, r4
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	ea40 0402 	orr.w	r4, r0, r2
 8003ad6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003ada:	430b      	orrs	r3, r1
 8003adc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003ae0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003ae4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ae8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003aec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003af0:	1d5a      	adds	r2, r3, #5
 8003af2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003b02:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003b12:	0223      	lsls	r3, r4, #8
 8003b14:	2200      	movs	r2, #0
 8003b16:	ea40 0402 	orr.w	r4, r0, r2
 8003b1a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003b24:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003b28:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b34:	1d9a      	adds	r2, r3, #6
 8003b36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b46:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003b56:	0423      	lsls	r3, r4, #16
 8003b58:	2200      	movs	r2, #0
 8003b5a:	ea40 0402 	orr.w	r4, r0, r2
 8003b5e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003b62:	430b      	orrs	r3, r1
 8003b64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b68:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003b6c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003b74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b78:	1dda      	adds	r2, r3, #7
 8003b7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003b8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003b9a:	0623      	lsls	r3, r4, #24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	ea40 0402 	orr.w	r4, r0, r2
 8003ba2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003bac:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003bb0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003bb4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003bb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003bbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003bc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003bd6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bda:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003bde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003bee:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003bf2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	4303      	orrs	r3, r0
 8003bfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bfe:	462b      	mov	r3, r5
 8003c00:	430b      	orrs	r3, r1
 8003c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c06:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003c0a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c0e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c28:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003c38:	464c      	mov	r4, r9
 8003c3a:	0223      	lsls	r3, r4, #8
 8003c3c:	4644      	mov	r4, r8
 8003c3e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c42:	4644      	mov	r4, r8
 8003c44:	0222      	lsls	r2, r4, #8
 8003c46:	ea40 0402 	orr.w	r4, r0, r2
 8003c4a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c54:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003c58:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c5c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003c86:	464c      	mov	r4, r9
 8003c88:	0423      	lsls	r3, r4, #16
 8003c8a:	4644      	mov	r4, r8
 8003c8c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c90:	4644      	mov	r4, r8
 8003c92:	0422      	lsls	r2, r4, #16
 8003c94:	ea40 0402 	orr.w	r4, r0, r2
 8003c98:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ca2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003ca6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003caa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cb2:	1cda      	adds	r2, r3, #3
 8003cb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cb8:	4413      	add	r3, r2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cc4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cc8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003ccc:	4623      	mov	r3, r4
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cdc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	4303      	orrs	r3, r0
 8003ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce8:	462b      	mov	r3, r5
 8003cea:	430b      	orrs	r3, r1
 8003cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003cf4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003cf8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d12:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003d22:	0023      	movs	r3, r4
 8003d24:	2200      	movs	r2, #0
 8003d26:	ea40 0402 	orr.w	r4, r0, r2
 8003d2a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d34:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003d38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d44:	1d5a      	adds	r2, r3, #5
 8003d46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d56:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003d66:	0223      	lsls	r3, r4, #8
 8003d68:	2200      	movs	r2, #0
 8003d6a:	ea40 0402 	orr.w	r4, r0, r2
 8003d6e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003d72:	430b      	orrs	r3, r1
 8003d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d78:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003d7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d80:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003d84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d88:	1d9a      	adds	r2, r3, #6
 8003d8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d8e:	4413      	add	r3, r2
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003daa:	0423      	lsls	r3, r4, #16
 8003dac:	2200      	movs	r2, #0
 8003dae:	ea40 0402 	orr.w	r4, r0, r2
 8003db2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003db6:	430b      	orrs	r3, r1
 8003db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003dc0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003dc4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003dc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dcc:	1dda      	adds	r2, r3, #7
 8003dce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003dee:	0623      	lsls	r3, r4, #24
 8003df0:	2200      	movs	r2, #0
 8003df2:	ea40 0402 	orr.w	r4, r0, r2
 8003df6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e00:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003e04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003e08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e0c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003e10:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003e14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e18:	3308      	adds	r3, #8
 8003e1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e2e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003e32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e36:	4413      	add	r3, r2
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e42:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e46:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	4303      	orrs	r3, r0
 8003e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e50:	462b      	mov	r3, r5
 8003e52:	430b      	orrs	r3, r1
 8003e54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e56:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003e5a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e6c:	4413      	add	r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2200      	movs	r2, #0
 8003e74:	673b      	str	r3, [r7, #112]	; 0x70
 8003e76:	677a      	str	r2, [r7, #116]	; 0x74
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e84:	464c      	mov	r4, r9
 8003e86:	0223      	lsls	r3, r4, #8
 8003e88:	4644      	mov	r4, r8
 8003e8a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e8e:	4644      	mov	r4, r8
 8003e90:	0222      	lsls	r2, r4, #8
 8003e92:	ea40 0402 	orr.w	r4, r0, r2
 8003e96:	66bc      	str	r4, [r7, #104]	; 0x68
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e9c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ea0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ea4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ea8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	663b      	str	r3, [r7, #96]	; 0x60
 8003ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eca:	464c      	mov	r4, r9
 8003ecc:	0423      	lsls	r3, r4, #16
 8003ece:	4644      	mov	r4, r8
 8003ed0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ed4:	4644      	mov	r4, r8
 8003ed6:	0422      	lsls	r2, r4, #16
 8003ed8:	ea40 0402 	orr.w	r4, r0, r2
 8003edc:	65bc      	str	r4, [r7, #88]	; 0x58
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003ee6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003eea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003eee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ef2:	1cda      	adds	r2, r3, #3
 8003ef4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ef8:	4413      	add	r3, r2
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2200      	movs	r2, #0
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
 8003f02:	657a      	str	r2, [r7, #84]	; 0x54
 8003f04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003f08:	4623      	mov	r3, r4
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0e:	4623      	mov	r3, r4
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003f18:	4623      	mov	r3, r4
 8003f1a:	4303      	orrs	r3, r0
 8003f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f1e:	462b      	mov	r3, r5
 8003f20:	430b      	orrs	r3, r1
 8003f22:	647b      	str	r3, [r7, #68]	; 0x44
 8003f24:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003f28:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f2c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f3a:	4413      	add	r3, r2
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2200      	movs	r2, #0
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003f50:	0023      	movs	r3, r4
 8003f52:	2200      	movs	r2, #0
 8003f54:	ea40 0402 	orr.w	r4, r0, r2
 8003f58:	633c      	str	r4, [r7, #48]	; 0x30
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003f62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003f6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003f6e:	1d5a      	adds	r2, r3, #5
 8003f70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003f8a:	0223      	lsls	r3, r4, #8
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	ea40 0402 	orr.w	r4, r0, r2
 8003f92:	623c      	str	r4, [r7, #32]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003f9c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fa0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003fa4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fa8:	3306      	adds	r3, #6
 8003faa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003fae:	4413      	add	r3, r2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	61fa      	str	r2, [r7, #28]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	69bc      	ldr	r4, [r7, #24]
 8003fc4:	0423      	lsls	r3, r4, #16
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	ea40 0402 	orr.w	r4, r0, r2
 8003fcc:	613c      	str	r4, [r7, #16]
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003fd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003fda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003fde:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fe2:	3307      	adds	r3, #7
 8003fe4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	60fa      	str	r2, [r7, #12]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	68bc      	ldr	r4, [r7, #8]
 8003ffe:	0623      	lsls	r3, r4, #24
 8004000:	2200      	movs	r2, #0
 8004002:	ea40 0402 	orr.w	r4, r0, r2
 8004006:	603c      	str	r4, [r7, #0]
 8004008:	430b      	orrs	r3, r1
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004010:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8004014:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8004018:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800401c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004020:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004024:	3308      	adds	r3, #8
 8004026:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800402a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800402e:	4618      	mov	r0, r3
 8004030:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800403a:	4770      	bx	lr

0800403c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	0800fc84 	.word	0x0800fc84

08004058 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	0800fc9c 	.word	0x0800fc9c

08004074 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd ff84 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
      linear(),
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3308      	adds	r3, #8
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fada 	bl	8003648 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3328      	adds	r3, #40	; 0x28
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fad5 	bl	8003648 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	0800feb8 	.word	0x0800feb8

080040ac <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f103 0008 	add.w	r0, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7ff fae6 	bl	8003698 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff fad9 	bl	8003698 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80040ee:	68fb      	ldr	r3, [r7, #12]
    }
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 0008 	add.w	r0, r3, #8
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4413      	add	r3, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f7ff fc33 	bl	800397e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7ff fc26 	bl	800397e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
     return offset;
 800413a:	68fb      	ldr	r3, [r7, #12]
    }
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	0800fcc0 	.word	0x0800fcc0

08004160 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	0800fcd4 	.word	0x0800fcd4

0800417c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd ff00 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 800418c:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
      seq(0),
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	605a      	str	r2, [r3, #4]
      stamp(),
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3308      	adds	r3, #8
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd fee3 	bl	8001f68 <_ZN3ros4TimeC1Ev>
      frame_id("")
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80041a6:	611a      	str	r2, [r3, #16]
    {
    }
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	0800fea0 	.word	0x0800fea0
 80041b8:	0800fb20 	.word	0x0800fb20

080041bc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	b2ca      	uxtb	r2, r1
 80041d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0a19      	lsrs	r1, r3, #8
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3301      	adds	r3, #1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	b2ca      	uxtb	r2, r1
 80041e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	0c19      	lsrs	r1, r3, #16
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3302      	adds	r3, #2
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	b2ca      	uxtb	r2, r1
 80041fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	0e19      	lsrs	r1, r3, #24
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3303      	adds	r3, #3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	b2ca      	uxtb	r2, r1
 800420c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6899      	ldr	r1, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4413      	add	r3, r2
 800421e:	b2ca      	uxtb	r2, r1
 8004220:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0a19      	lsrs	r1, r3, #8
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	4413      	add	r3, r2
 8004230:	b2ca      	uxtb	r2, r1
 8004232:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	0c19      	lsrs	r1, r3, #16
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3302      	adds	r3, #2
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4413      	add	r3, r2
 8004242:	b2ca      	uxtb	r2, r1
 8004244:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0e19      	lsrs	r1, r3, #24
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3303      	adds	r3, #3
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	b2ca      	uxtb	r2, r1
 8004256:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68d9      	ldr	r1, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	4413      	add	r3, r2
 8004268:	b2ca      	uxtb	r2, r1
 800426a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a19      	lsrs	r1, r3, #8
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	4413      	add	r3, r2
 800427a:	b2ca      	uxtb	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	0c19      	lsrs	r1, r3, #16
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3302      	adds	r3, #2
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	4413      	add	r3, r2
 800428c:	b2ca      	uxtb	r2, r1
 800428e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	0e19      	lsrs	r1, r3, #24
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3303      	adds	r3, #3
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4413      	add	r3, r2
 800429e:	b2ca      	uxtb	r2, r1
 80042a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fb ff8b 	bl	80001c8 <strlen>
 80042b2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4413      	add	r3, r2
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 fec3 	bl	8007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	18d0      	adds	r0, r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4619      	mov	r1, r3
 80042d6:	f00b fadf 	bl	800f898 <memcpy>
      offset += length_frame_id;
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80042e2:	68fb      	ldr	r3, [r7, #12]
    }
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3301      	adds	r3, #1
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	440b      	add	r3, r1
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3302      	adds	r3, #2
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	440b      	add	r3, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3303      	adds	r3, #3
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	440b      	add	r3, r1
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3304      	adds	r3, #4
 800434e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4413      	add	r3, r2
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3301      	adds	r3, #1
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	440b      	add	r3, r1
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	3302      	adds	r3, #2
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	440b      	add	r3, r1
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3303      	adds	r3, #3
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	440b      	add	r3, r1
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3304      	adds	r3, #4
 80043a4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3301      	adds	r3, #1
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	440b      	add	r3, r1
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3302      	adds	r3, #2
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	440b      	add	r3, r1
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3303      	adds	r3, #3
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	440b      	add	r3, r1
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3304      	adds	r3, #4
 80043fa:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	441a      	add	r2, r3
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f002 fe3c 	bl	8007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3304      	adds	r3, #4
 8004412:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e00b      	b.n	8004432 <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	441a      	add	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3b01      	subs	r3, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	440b      	add	r3, r1
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3ed      	bcc.n	800441a <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	3b01      	subs	r3, #1
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	4413      	add	r3, r2
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3b01      	subs	r3, #1
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
     return offset;
 8004462:	693b      	ldr	r3, [r7, #16]
    }
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	0800fcf8 	.word	0x0800fcf8

08004488 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	0800fd08 	.word	0x0800fd08

080044a4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd fd6c 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
      x(0),
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	0800fe88 	.word	0x0800fe88

08004500 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004500:	b480      	push	{r7}
 8004502:	b08d      	sub	sp, #52	; 0x34
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004514:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004518:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800451c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451e:	6838      	ldr	r0, [r7, #0]
 8004520:	4401      	add	r1, r0
 8004522:	b2d3      	uxtb	r3, r2
 8004524:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004526:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	0a02      	lsrs	r2, r0, #8
 8004534:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004538:	0a0b      	lsrs	r3, r1, #8
 800453a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800453c:	3101      	adds	r1, #1
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	4401      	add	r1, r0
 8004542:	b2d3      	uxtb	r3, r2
 8004544:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004546:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	0c02      	lsrs	r2, r0, #16
 8004554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004558:	0c0b      	lsrs	r3, r1, #16
 800455a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800455c:	3102      	adds	r1, #2
 800455e:	6838      	ldr	r0, [r7, #0]
 8004560:	4401      	add	r1, r0
 8004562:	b2d3      	uxtb	r3, r2
 8004564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004566:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	0e02      	lsrs	r2, r0, #24
 8004574:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004578:	0e0b      	lsrs	r3, r1, #24
 800457a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800457c:	3103      	adds	r1, #3
 800457e:	6838      	ldr	r0, [r7, #0]
 8004580:	4401      	add	r1, r0
 8004582:	b2d3      	uxtb	r3, r2
 8004584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004586:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	000a      	movs	r2, r1
 8004594:	2300      	movs	r3, #0
 8004596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004598:	3104      	adds	r1, #4
 800459a:	6838      	ldr	r0, [r7, #0]
 800459c:	4401      	add	r1, r0
 800459e:	b2d3      	uxtb	r3, r2
 80045a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80045a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	0a0a      	lsrs	r2, r1, #8
 80045b0:	2300      	movs	r3, #0
 80045b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b4:	3105      	adds	r1, #5
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	4401      	add	r1, r0
 80045ba:	b2d3      	uxtb	r3, r2
 80045bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80045be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	0c0a      	lsrs	r2, r1, #16
 80045cc:	2300      	movs	r3, #0
 80045ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d0:	3106      	adds	r1, #6
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	4401      	add	r1, r0
 80045d6:	b2d3      	uxtb	r3, r2
 80045d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80045da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	0e0a      	lsrs	r2, r1, #24
 80045e8:	2300      	movs	r3, #0
 80045ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045ec:	3107      	adds	r1, #7
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	4401      	add	r1, r0
 80045f2:	b2d3      	uxtb	r3, r2
 80045f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	3308      	adds	r3, #8
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004602:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	4401      	add	r1, r0
 8004610:	b2d3      	uxtb	r3, r2
 8004612:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004614:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	0a02      	lsrs	r2, r0, #8
 8004622:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004626:	0a0b      	lsrs	r3, r1, #8
 8004628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462a:	3101      	adds	r1, #1
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	4401      	add	r1, r0
 8004630:	b2d3      	uxtb	r3, r2
 8004632:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004634:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	0c02      	lsrs	r2, r0, #16
 8004642:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004646:	0c0b      	lsrs	r3, r1, #16
 8004648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800464a:	3102      	adds	r1, #2
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	4401      	add	r1, r0
 8004650:	b2d3      	uxtb	r3, r2
 8004652:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	0e02      	lsrs	r2, r0, #24
 8004662:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004666:	0e0b      	lsrs	r3, r1, #24
 8004668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800466a:	3103      	adds	r1, #3
 800466c:	6838      	ldr	r0, [r7, #0]
 800466e:	4401      	add	r1, r0
 8004670:	b2d3      	uxtb	r3, r2
 8004672:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004674:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	000a      	movs	r2, r1
 8004682:	2300      	movs	r3, #0
 8004684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004686:	3104      	adds	r1, #4
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	4401      	add	r1, r0
 800468c:	b2d3      	uxtb	r3, r2
 800468e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004690:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	0a0a      	lsrs	r2, r1, #8
 800469e:	2300      	movs	r3, #0
 80046a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a2:	3105      	adds	r1, #5
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	4401      	add	r1, r0
 80046a8:	b2d3      	uxtb	r3, r2
 80046aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80046ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	0c0a      	lsrs	r2, r1, #16
 80046ba:	2300      	movs	r3, #0
 80046bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046be:	3106      	adds	r1, #6
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	4401      	add	r1, r0
 80046c4:	b2d3      	uxtb	r3, r2
 80046c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80046c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	0e0a      	lsrs	r2, r1, #24
 80046d6:	2300      	movs	r3, #0
 80046d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046da:	3107      	adds	r1, #7
 80046dc:	6838      	ldr	r0, [r7, #0]
 80046de:	4401      	add	r1, r0
 80046e0:	b2d3      	uxtb	r3, r2
 80046e2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	3308      	adds	r3, #8
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80046f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fa:	6838      	ldr	r0, [r7, #0]
 80046fc:	4401      	add	r1, r0
 80046fe:	b2d3      	uxtb	r3, r2
 8004700:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004702:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	0a02      	lsrs	r2, r0, #8
 8004710:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004714:	0a0b      	lsrs	r3, r1, #8
 8004716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004718:	3101      	adds	r1, #1
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	4401      	add	r1, r0
 800471e:	b2d3      	uxtb	r3, r2
 8004720:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	0c02      	lsrs	r2, r0, #16
 8004730:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004734:	0c0b      	lsrs	r3, r1, #16
 8004736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004738:	3102      	adds	r1, #2
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	4401      	add	r1, r0
 800473e:	b2d3      	uxtb	r3, r2
 8004740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004742:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	0e02      	lsrs	r2, r0, #24
 8004750:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004754:	0e0b      	lsrs	r3, r1, #24
 8004756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004758:	3103      	adds	r1, #3
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	4401      	add	r1, r0
 800475e:	b2d3      	uxtb	r3, r2
 8004760:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004762:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	000a      	movs	r2, r1
 8004770:	2300      	movs	r3, #0
 8004772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004774:	3104      	adds	r1, #4
 8004776:	6838      	ldr	r0, [r7, #0]
 8004778:	4401      	add	r1, r0
 800477a:	b2d3      	uxtb	r3, r2
 800477c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800477e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	0a0a      	lsrs	r2, r1, #8
 800478c:	2300      	movs	r3, #0
 800478e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004790:	3105      	adds	r1, #5
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	4401      	add	r1, r0
 8004796:	b2d3      	uxtb	r3, r2
 8004798:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800479a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	0c0a      	lsrs	r2, r1, #16
 80047a8:	2300      	movs	r3, #0
 80047aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ac:	3106      	adds	r1, #6
 80047ae:	6838      	ldr	r0, [r7, #0]
 80047b0:	4401      	add	r1, r0
 80047b2:	b2d3      	uxtb	r3, r2
 80047b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80047b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	0e0a      	lsrs	r2, r1, #24
 80047c4:	2300      	movs	r3, #0
 80047c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c8:	3107      	adds	r1, #7
 80047ca:	6838      	ldr	r0, [r7, #0]
 80047cc:	4401      	add	r1, r0
 80047ce:	b2d3      	uxtb	r3, r2
 80047d0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	3308      	adds	r3, #8
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047de:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 80047e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e8:	6838      	ldr	r0, [r7, #0]
 80047ea:	4401      	add	r1, r0
 80047ec:	b2d3      	uxtb	r3, r2
 80047ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 80047f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	0a02      	lsrs	r2, r0, #8
 80047fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004802:	0a0b      	lsrs	r3, r1, #8
 8004804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004806:	3101      	adds	r1, #1
 8004808:	6838      	ldr	r0, [r7, #0]
 800480a:	4401      	add	r1, r0
 800480c:	b2d3      	uxtb	r3, r2
 800480e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	0c02      	lsrs	r2, r0, #16
 800481e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004822:	0c0b      	lsrs	r3, r1, #16
 8004824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004826:	3102      	adds	r1, #2
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	4401      	add	r1, r0
 800482c:	b2d3      	uxtb	r3, r2
 800482e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004830:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	0e02      	lsrs	r2, r0, #24
 800483e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004842:	0e0b      	lsrs	r3, r1, #24
 8004844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004846:	3103      	adds	r1, #3
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	4401      	add	r1, r0
 800484c:	b2d3      	uxtb	r3, r2
 800484e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	000a      	movs	r2, r1
 800485e:	2300      	movs	r3, #0
 8004860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004862:	3104      	adds	r1, #4
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	4401      	add	r1, r0
 8004868:	b2d3      	uxtb	r3, r2
 800486a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 800486c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	0a0a      	lsrs	r2, r1, #8
 800487a:	2300      	movs	r3, #0
 800487c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800487e:	3105      	adds	r1, #5
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	4401      	add	r1, r0
 8004884:	b2d3      	uxtb	r3, r2
 8004886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8004888:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	0c0a      	lsrs	r2, r1, #16
 8004896:	2300      	movs	r3, #0
 8004898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489a:	3106      	adds	r1, #6
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	4401      	add	r1, r0
 80048a0:	b2d3      	uxtb	r3, r2
 80048a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80048a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	0e0a      	lsrs	r2, r1, #24
 80048b2:	2300      	movs	r3, #0
 80048b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048b6:	3107      	adds	r1, #7
 80048b8:	6838      	ldr	r0, [r7, #0]
 80048ba:	4401      	add	r1, r0
 80048bc:	b2d3      	uxtb	r3, r2
 80048be:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	3308      	adds	r3, #8
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80048c8:	4618      	mov	r0, r3
 80048ca:	3734      	adds	r7, #52	; 0x34
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80048d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80048d8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80048dc:	af00      	add	r7, sp, #0
 80048de:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 80048e2:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048f8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80048fc:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004900:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004904:	4413      	add	r3, r2
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2200      	movs	r2, #0
 800490c:	461c      	mov	r4, r3
 800490e:	4615      	mov	r5, r2
 8004910:	ea40 0804 	orr.w	r8, r0, r4
 8004914:	ea41 0905 	orr.w	r9, r1, r5
 8004918:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800491c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004920:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2200      	movs	r2, #0
 8004932:	469a      	mov	sl, r3
 8004934:	4693      	mov	fp, r2
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004942:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004946:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800494a:	ea40 0402 	orr.w	r4, r0, r2
 800494e:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004958:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800495c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004960:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004964:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800496e:	4413      	add	r3, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800497a:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 800498a:	464c      	mov	r4, r9
 800498c:	0423      	lsls	r3, r4, #16
 800498e:	4644      	mov	r4, r8
 8004990:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004994:	4644      	mov	r4, r8
 8004996:	0422      	lsls	r2, r4, #16
 8004998:	ea40 0402 	orr.w	r4, r0, r2
 800499c:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80049a0:	430b      	orrs	r3, r1
 80049a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80049a6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80049aa:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049ae:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80049b2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80049b6:	1cda      	adds	r2, r3, #3
 80049b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80049bc:	4413      	add	r3, r2
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80049c8:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 80049cc:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 80049d0:	4623      	mov	r3, r4
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049d8:	4623      	mov	r3, r4
 80049da:	061b      	lsls	r3, r3, #24
 80049dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049e0:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 80049e4:	4623      	mov	r3, r4
 80049e6:	4303      	orrs	r3, r0
 80049e8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80049ec:	462b      	mov	r3, r5
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049f4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80049f8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80049fc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004a00:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004a16:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8004a26:	0023      	movs	r3, r4
 8004a28:	2200      	movs	r2, #0
 8004a2a:	ea40 0402 	orr.w	r4, r0, r2
 8004a2e:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8004a32:	430b      	orrs	r3, r1
 8004a34:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8004a38:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8004a3c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004a40:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004a44:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004a48:	1d5a      	adds	r2, r3, #5
 8004a4a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a4e:	4413      	add	r3, r2
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a5a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 8004a6a:	0223      	lsls	r3, r4, #8
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	ea40 0402 	orr.w	r4, r0, r2
 8004a72:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8004a76:	430b      	orrs	r3, r1
 8004a78:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a7c:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8004a80:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004a84:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004a88:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004a8c:	1d9a      	adds	r2, r3, #6
 8004a8e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004a9e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8004aae:	0423      	lsls	r3, r4, #16
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	ea40 0402 	orr.w	r4, r0, r2
 8004ab6:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8004aba:	430b      	orrs	r3, r1
 8004abc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8004ac0:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8004ac4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004ac8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004acc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ad0:	1dda      	adds	r2, r3, #7
 8004ad2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004ae2:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8004af2:	0623      	lsls	r3, r4, #24
 8004af4:	2200      	movs	r2, #0
 8004af6:	ea40 0402 	orr.w	r4, r0, r2
 8004afa:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8004afe:	430b      	orrs	r3, r1
 8004b00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b04:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8004b08:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8004b0c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8004b10:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b14:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004b18:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b2e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004b32:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004b36:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b3a:	4413      	add	r3, r2
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004b46:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004b4a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8004b4e:	4623      	mov	r3, r4
 8004b50:	4303      	orrs	r3, r0
 8004b52:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004b56:	462b      	mov	r3, r5
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004b5e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004b62:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b66:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004b6a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b80:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8004b90:	464c      	mov	r4, r9
 8004b92:	0223      	lsls	r3, r4, #8
 8004b94:	4644      	mov	r4, r8
 8004b96:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b9a:	4644      	mov	r4, r8
 8004b9c:	0222      	lsls	r2, r4, #8
 8004b9e:	ea40 0402 	orr.w	r4, r0, r2
 8004ba2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004bac:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004bb0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bb4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004bb8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004bbc:	1c9a      	adds	r2, r3, #2
 8004bbe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004bc2:	4413      	add	r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004bce:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004bde:	464c      	mov	r4, r9
 8004be0:	0423      	lsls	r3, r4, #16
 8004be2:	4644      	mov	r4, r8
 8004be4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004be8:	4644      	mov	r4, r8
 8004bea:	0422      	lsls	r2, r4, #16
 8004bec:	ea40 0402 	orr.w	r4, r0, r2
 8004bf0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004bfa:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004bfe:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c02:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c06:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c0a:	1cda      	adds	r2, r3, #3
 8004c0c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004c1c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004c20:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004c24:	4623      	mov	r3, r4
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c34:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004c38:	4623      	mov	r3, r4
 8004c3a:	4303      	orrs	r3, r0
 8004c3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c40:	462b      	mov	r3, r5
 8004c42:	430b      	orrs	r3, r1
 8004c44:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c48:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8004c4c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c50:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c54:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004c5e:	4413      	add	r3, r2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004c6a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004c7a:	0023      	movs	r3, r4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	ea40 0402 	orr.w	r4, r0, r2
 8004c82:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004c86:	430b      	orrs	r3, r1
 8004c88:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004c8c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004c90:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004c94:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004c98:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004c9c:	1d5a      	adds	r2, r3, #5
 8004c9e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004cae:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004cbe:	0223      	lsls	r3, r4, #8
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	ea40 0402 	orr.w	r4, r0, r2
 8004cc6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004cd0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004cd4:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004cd8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004cdc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ce0:	1d9a      	adds	r2, r3, #6
 8004ce2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ce6:	4413      	add	r3, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cf2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004d02:	0423      	lsls	r3, r4, #16
 8004d04:	2200      	movs	r2, #0
 8004d06:	ea40 0402 	orr.w	r4, r0, r2
 8004d0a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d14:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8004d18:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004d1c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004d20:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d24:	1dda      	adds	r2, r3, #7
 8004d26:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d2a:	4413      	add	r3, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8004d46:	0623      	lsls	r3, r4, #24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	ea40 0402 	orr.w	r4, r0, r2
 8004d4e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8004d52:	430b      	orrs	r3, r1
 8004d54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d58:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8004d5c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 8004d60:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8004d64:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004d68:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004d6c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004d70:	3308      	adds	r3, #8
 8004d72:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004d82:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004d86:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004d8a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d9a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004d9e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004da2:	4623      	mov	r3, r4
 8004da4:	4303      	orrs	r3, r0
 8004da6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004daa:	462b      	mov	r3, r5
 8004dac:	430b      	orrs	r3, r1
 8004dae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004db2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004db6:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004dba:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004dbe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004dc8:	4413      	add	r3, r2
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dd4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004de4:	464c      	mov	r4, r9
 8004de6:	0223      	lsls	r3, r4, #8
 8004de8:	4644      	mov	r4, r8
 8004dea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dee:	4644      	mov	r4, r8
 8004df0:	0222      	lsls	r2, r4, #8
 8004df2:	ea40 0402 	orr.w	r4, r0, r2
 8004df6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e00:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004e04:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e08:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004e0c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e16:	4413      	add	r3, r2
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004e32:	464c      	mov	r4, r9
 8004e34:	0423      	lsls	r3, r4, #16
 8004e36:	4644      	mov	r4, r8
 8004e38:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004e3c:	4644      	mov	r4, r8
 8004e3e:	0422      	lsls	r2, r4, #16
 8004e40:	ea40 0402 	orr.w	r4, r0, r2
 8004e44:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e4e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8004e52:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e56:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004e5a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004e5e:	1cda      	adds	r2, r3, #3
 8004e60:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e70:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e74:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004e78:	4623      	mov	r3, r4
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e80:	4623      	mov	r3, r4
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e88:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	4303      	orrs	r3, r0
 8004e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e94:	462b      	mov	r3, r5
 8004e96:	430b      	orrs	r3, r1
 8004e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e9c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004ea0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ea4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004ea8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004ece:	0023      	movs	r3, r4
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	ea40 0402 	orr.w	r4, r0, r2
 8004ed6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004eda:	430b      	orrs	r3, r1
 8004edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ee0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004ee4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004ee8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004eec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004ef0:	1d5a      	adds	r2, r3, #5
 8004ef2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f02:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8004f12:	0223      	lsls	r3, r4, #8
 8004f14:	2200      	movs	r2, #0
 8004f16:	ea40 0402 	orr.w	r4, r0, r2
 8004f1a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f24:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004f28:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f2c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f30:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f34:	1d9a      	adds	r2, r3, #6
 8004f36:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f3a:	4413      	add	r3, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8004f56:	0423      	lsls	r3, r4, #16
 8004f58:	2200      	movs	r2, #0
 8004f5a:	ea40 0402 	orr.w	r4, r0, r2
 8004f5e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004f62:	430b      	orrs	r3, r1
 8004f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f68:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004f6c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004f70:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004f74:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004f78:	1dda      	adds	r2, r3, #7
 8004f7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8004f9a:	0623      	lsls	r3, r4, #24
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	ea40 0402 	orr.w	r4, r0, r2
 8004fa2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004fac:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004fb0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8004fb4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8004fb8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004fbc:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8004fc0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004fd6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8004fda:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8004fde:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004fe2:	4413      	add	r3, r2
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fee:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ff2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	4303      	orrs	r3, r0
 8004ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	430b      	orrs	r3, r1
 8005000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005002:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005006:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800500a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800500e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005018:	4413      	add	r3, r2
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2200      	movs	r2, #0
 8005020:	673b      	str	r3, [r7, #112]	; 0x70
 8005022:	677a      	str	r2, [r7, #116]	; 0x74
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005030:	464c      	mov	r4, r9
 8005032:	0223      	lsls	r3, r4, #8
 8005034:	4644      	mov	r4, r8
 8005036:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800503a:	4644      	mov	r4, r8
 800503c:	0222      	lsls	r2, r4, #8
 800503e:	ea40 0402 	orr.w	r4, r0, r2
 8005042:	66bc      	str	r4, [r7, #104]	; 0x68
 8005044:	430b      	orrs	r3, r1
 8005046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005048:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800504c:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005050:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005054:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2200      	movs	r2, #0
 8005066:	663b      	str	r3, [r7, #96]	; 0x60
 8005068:	667a      	str	r2, [r7, #100]	; 0x64
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005076:	464c      	mov	r4, r9
 8005078:	0423      	lsls	r3, r4, #16
 800507a:	4644      	mov	r4, r8
 800507c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005080:	4644      	mov	r4, r8
 8005082:	0422      	lsls	r2, r4, #16
 8005084:	ea40 0402 	orr.w	r4, r0, r2
 8005088:	65bc      	str	r4, [r7, #88]	; 0x58
 800508a:	430b      	orrs	r3, r1
 800508c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800508e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005092:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005096:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800509a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800509e:	1cda      	adds	r2, r3, #3
 80050a0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050a4:	4413      	add	r3, r2
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2200      	movs	r2, #0
 80050ac:	653b      	str	r3, [r7, #80]	; 0x50
 80050ae:	657a      	str	r2, [r7, #84]	; 0x54
 80050b0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80050b4:	4623      	mov	r3, r4
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ba:	4623      	mov	r3, r4
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80050c4:	4623      	mov	r3, r4
 80050c6:	4303      	orrs	r3, r0
 80050c8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ca:	462b      	mov	r3, r5
 80050cc:	430b      	orrs	r3, r1
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80050d4:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80050d8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80050dc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80050e0:	1d1a      	adds	r2, r3, #4
 80050e2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80050e6:	4413      	add	r3, r2
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80050fc:	0023      	movs	r3, r4
 80050fe:	2200      	movs	r2, #0
 8005100:	ea40 0402 	orr.w	r4, r0, r2
 8005104:	633c      	str	r4, [r7, #48]	; 0x30
 8005106:	430b      	orrs	r3, r1
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
 800510a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800510e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005112:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005116:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800511a:	1d5a      	adds	r2, r3, #5
 800511c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005120:	4413      	add	r3, r2
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2200      	movs	r2, #0
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
 800512a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005136:	0223      	lsls	r3, r4, #8
 8005138:	2200      	movs	r2, #0
 800513a:	ea40 0402 	orr.w	r4, r0, r2
 800513e:	623c      	str	r4, [r7, #32]
 8005140:	430b      	orrs	r3, r1
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
 8005144:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005148:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800514c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8005150:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005154:	3306      	adds	r3, #6
 8005156:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800515a:	4413      	add	r3, r2
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2200      	movs	r2, #0
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	61fa      	str	r2, [r7, #28]
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	69bc      	ldr	r4, [r7, #24]
 8005170:	0423      	lsls	r3, r4, #16
 8005172:	2200      	movs	r2, #0
 8005174:	ea40 0402 	orr.w	r4, r0, r2
 8005178:	613c      	str	r4, [r7, #16]
 800517a:	430b      	orrs	r3, r1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005182:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005186:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800518a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800518e:	3307      	adds	r3, #7
 8005190:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8005194:	4413      	add	r3, r2
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2200      	movs	r2, #0
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	60fa      	str	r2, [r7, #12]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	68bc      	ldr	r4, [r7, #8]
 80051aa:	0623      	lsls	r3, r4, #24
 80051ac:	2200      	movs	r2, #0
 80051ae:	ea40 0402 	orr.w	r4, r0, r2
 80051b2:	603c      	str	r4, [r7, #0]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80051bc:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 80051c0:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80051c4:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80051c8:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 80051cc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80051d0:	3308      	adds	r3, #8
 80051d2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 80051d6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 80051da:	4618      	mov	r0, r3
 80051dc:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80051e0:	46bd      	mov	sp, r7
 80051e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80051e6:	4770      	bx	lr

080051e8 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	4b03      	ldr	r3, [pc, #12]	; (8005200 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	0800fd2c 	.word	0x0800fd2c

08005204 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	0800fd48 	.word	0x0800fd48

08005220 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fc feae 	bl	8001f8c <_ZN3ros3MsgC1Ev>
 8005230:	4a24      	ldr	r2, [pc, #144]	; (80052c4 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
      header(),
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe ff9e 	bl	800417c <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3318      	adds	r3, #24
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff f92d 	bl	80044a4 <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005250:	2308      	movs	r3, #8
 8005252:	e007      	b.n	8005264 <_ZN11sensor_msgs3ImuC1Ev+0x44>
 8005254:	f04f 0000 	mov.w	r0, #0
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	e9c2 0100 	strd	r0, r1, [r2]
 8005260:	3208      	adds	r2, #8
 8005262:	3b01      	subs	r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	daf5      	bge.n	8005254 <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3388      	adds	r3, #136	; 0x88
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe f9eb 	bl	8003648 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8005278:	2308      	movs	r3, #8
 800527a:	e007      	b.n	800528c <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 800527c:	f04f 0000 	mov.w	r0, #0
 8005280:	f04f 0100 	mov.w	r1, #0
 8005284:	e9c2 0100 	strd	r0, r1, [r2]
 8005288:	3208      	adds	r2, #8
 800528a:	3b01      	subs	r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	daf5      	bge.n	800527c <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	33f0      	adds	r3, #240	; 0xf0
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe f9d7 	bl	8003648 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80052a0:	2308      	movs	r3, #8
 80052a2:	e007      	b.n	80052b4 <_ZN11sensor_msgs3ImuC1Ev+0x94>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	e9c2 0100 	strd	r0, r1, [r2]
 80052b0:	3208      	adds	r2, #8
 80052b2:	3b01      	subs	r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	daf5      	bge.n	80052a4 <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	0800fe70 	.word	0x0800fe70

080052c8 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	; 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	1d18      	adds	r0, r3, #4
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	4619      	mov	r1, r3
 80052e2:	f7fe ff6b 	bl	80041bc <_ZNK8std_msgs6Header9serializeEPh>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	4413      	add	r3, r2
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f103 0018 	add.w	r0, r3, #24
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7ff f900 	bl	8004500 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005300:	4602      	mov	r2, r0
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	4413      	add	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005308:	2300      	movs	r3, #0
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
 800530c:	e07d      	b.n	800540a <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	3308      	adds	r3, #8
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8005320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005326:	6838      	ldr	r0, [r7, #0]
 8005328:	4401      	add	r1, r0
 800532a:	b2d3      	uxtb	r3, r2
 800532c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800532e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	0a02      	lsrs	r2, r0, #8
 800533c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005340:	0a0b      	lsrs	r3, r1, #8
 8005342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005344:	3101      	adds	r1, #1
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	4401      	add	r1, r0
 800534a:	b2d3      	uxtb	r3, r2
 800534c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800534e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	0c02      	lsrs	r2, r0, #16
 800535c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005360:	0c0b      	lsrs	r3, r1, #16
 8005362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005364:	3102      	adds	r1, #2
 8005366:	6838      	ldr	r0, [r7, #0]
 8005368:	4401      	add	r1, r0
 800536a:	b2d3      	uxtb	r3, r2
 800536c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800536e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	0e02      	lsrs	r2, r0, #24
 800537c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005380:	0e0b      	lsrs	r3, r1, #24
 8005382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005384:	3103      	adds	r1, #3
 8005386:	6838      	ldr	r0, [r7, #0]
 8005388:	4401      	add	r1, r0
 800538a:	b2d3      	uxtb	r3, r2
 800538c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 800538e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	000a      	movs	r2, r1
 800539c:	2300      	movs	r3, #0
 800539e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a0:	3104      	adds	r1, #4
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	4401      	add	r1, r0
 80053a6:	b2d3      	uxtb	r3, r2
 80053a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80053aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	0a0a      	lsrs	r2, r1, #8
 80053b8:	2300      	movs	r3, #0
 80053ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053bc:	3105      	adds	r1, #5
 80053be:	6838      	ldr	r0, [r7, #0]
 80053c0:	4401      	add	r1, r0
 80053c2:	b2d3      	uxtb	r3, r2
 80053c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80053c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	0c0a      	lsrs	r2, r1, #16
 80053d4:	2300      	movs	r3, #0
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	3106      	adds	r1, #6
 80053da:	6838      	ldr	r0, [r7, #0]
 80053dc:	4401      	add	r1, r0
 80053de:	b2d3      	uxtb	r3, r2
 80053e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80053e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	0e0a      	lsrs	r2, r1, #24
 80053f0:	2300      	movs	r3, #0
 80053f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f4:	3107      	adds	r1, #7
 80053f6:	6838      	ldr	r0, [r7, #0]
 80053f8:	4401      	add	r1, r0
 80053fa:	b2d3      	uxtb	r3, r2
 80053fc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	3308      	adds	r3, #8
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	3301      	adds	r3, #1
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	2b08      	cmp	r3, #8
 800540e:	f67f af7e 	bls.w	800530e <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4413      	add	r3, r2
 800541e:	4619      	mov	r1, r3
 8005420:	f7fe f93a 	bl	8003698 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005424:	4602      	mov	r2, r0
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	4413      	add	r3, r2
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
 8005430:	e07d      	b.n	800552e <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	3315      	adds	r3, #21
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8005444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544a:	6838      	ldr	r0, [r7, #0]
 800544c:	4401      	add	r1, r0
 800544e:	b2d3      	uxtb	r3, r2
 8005450:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8005452:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	0a02      	lsrs	r2, r0, #8
 8005460:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005464:	0a0b      	lsrs	r3, r1, #8
 8005466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005468:	3101      	adds	r1, #1
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	4401      	add	r1, r0
 800546e:	b2d3      	uxtb	r3, r2
 8005470:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8005472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	0c02      	lsrs	r2, r0, #16
 8005480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005484:	0c0b      	lsrs	r3, r1, #16
 8005486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005488:	3102      	adds	r1, #2
 800548a:	6838      	ldr	r0, [r7, #0]
 800548c:	4401      	add	r1, r0
 800548e:	b2d3      	uxtb	r3, r2
 8005490:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8005492:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	0e02      	lsrs	r2, r0, #24
 80054a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054a4:	0e0b      	lsrs	r3, r1, #24
 80054a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054a8:	3103      	adds	r1, #3
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	4401      	add	r1, r0
 80054ae:	b2d3      	uxtb	r3, r2
 80054b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80054b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	000a      	movs	r2, r1
 80054c0:	2300      	movs	r3, #0
 80054c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054c4:	3104      	adds	r1, #4
 80054c6:	6838      	ldr	r0, [r7, #0]
 80054c8:	4401      	add	r1, r0
 80054ca:	b2d3      	uxtb	r3, r2
 80054cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80054ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	0a0a      	lsrs	r2, r1, #8
 80054dc:	2300      	movs	r3, #0
 80054de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e0:	3105      	adds	r1, #5
 80054e2:	6838      	ldr	r0, [r7, #0]
 80054e4:	4401      	add	r1, r0
 80054e6:	b2d3      	uxtb	r3, r2
 80054e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80054ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	0c0a      	lsrs	r2, r1, #16
 80054f8:	2300      	movs	r3, #0
 80054fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fc:	3106      	adds	r1, #6
 80054fe:	6838      	ldr	r0, [r7, #0]
 8005500:	4401      	add	r1, r0
 8005502:	b2d3      	uxtb	r3, r2
 8005504:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8005506:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	0e0a      	lsrs	r2, r1, #24
 8005514:	2300      	movs	r3, #0
 8005516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005518:	3107      	adds	r1, #7
 800551a:	6838      	ldr	r0, [r7, #0]
 800551c:	4401      	add	r1, r0
 800551e:	b2d3      	uxtb	r3, r2
 8005520:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	3308      	adds	r3, #8
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	3301      	adds	r3, #1
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	2b08      	cmp	r3, #8
 8005532:	f67f af7e 	bls.w	8005432 <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4413      	add	r3, r2
 8005542:	4619      	mov	r1, r3
 8005544:	f7fe f8a8 	bl	8003698 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005548:	4602      	mov	r2, r0
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	4413      	add	r3, r2
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005550:	2300      	movs	r3, #0
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	e07d      	b.n	8005652 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	3322      	adds	r3, #34	; 0x22
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8005568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800556c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556e:	6838      	ldr	r0, [r7, #0]
 8005570:	4401      	add	r1, r0
 8005572:	b2d3      	uxtb	r3, r2
 8005574:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8005576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	f04f 0300 	mov.w	r3, #0
 8005582:	0a02      	lsrs	r2, r0, #8
 8005584:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005588:	0a0b      	lsrs	r3, r1, #8
 800558a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800558c:	3101      	adds	r1, #1
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	4401      	add	r1, r0
 8005592:	b2d3      	uxtb	r3, r2
 8005594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8005596:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	0c02      	lsrs	r2, r0, #16
 80055a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055a8:	0c0b      	lsrs	r3, r1, #16
 80055aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ac:	3102      	adds	r1, #2
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	4401      	add	r1, r0
 80055b2:	b2d3      	uxtb	r3, r2
 80055b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80055b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	0e02      	lsrs	r2, r0, #24
 80055c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055c8:	0e0b      	lsrs	r3, r1, #24
 80055ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055cc:	3103      	adds	r1, #3
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	4401      	add	r1, r0
 80055d2:	b2d3      	uxtb	r3, r2
 80055d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80055d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	000a      	movs	r2, r1
 80055e4:	2300      	movs	r3, #0
 80055e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e8:	3104      	adds	r1, #4
 80055ea:	6838      	ldr	r0, [r7, #0]
 80055ec:	4401      	add	r1, r0
 80055ee:	b2d3      	uxtb	r3, r2
 80055f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80055f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	0a0a      	lsrs	r2, r1, #8
 8005600:	2300      	movs	r3, #0
 8005602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005604:	3105      	adds	r1, #5
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	4401      	add	r1, r0
 800560a:	b2d3      	uxtb	r3, r2
 800560c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 800560e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	0c0a      	lsrs	r2, r1, #16
 800561c:	2300      	movs	r3, #0
 800561e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005620:	3106      	adds	r1, #6
 8005622:	6838      	ldr	r0, [r7, #0]
 8005624:	4401      	add	r1, r0
 8005626:	b2d3      	uxtb	r3, r2
 8005628:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 800562a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	0e0a      	lsrs	r2, r1, #24
 8005638:	2300      	movs	r3, #0
 800563a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800563c:	3107      	adds	r1, #7
 800563e:	6838      	ldr	r0, [r7, #0]
 8005640:	4401      	add	r1, r0
 8005642:	b2d3      	uxtb	r3, r2
 8005644:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	3308      	adds	r3, #8
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	3301      	adds	r3, #1
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2b08      	cmp	r3, #8
 8005656:	f67f af7e 	bls.w	8005556 <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800565c:	4618      	mov	r0, r3
 800565e:	3730      	adds	r7, #48	; 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	b0ed      	sub	sp, #436	; 0x1b4
 800566a:	af00      	add	r7, sp, #0
 800566c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8005670:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 800567a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800567e:	1d18      	adds	r0, r3, #4
 8005680:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005684:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005688:	4413      	add	r3, r2
 800568a:	4619      	mov	r1, r3
 800568c:	f7fe fe2e 	bl	80042ec <_ZN8std_msgs6Header11deserializeEPh>
 8005690:	4602      	mov	r2, r0
 8005692:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005696:	4413      	add	r3, r2
 8005698:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 800569c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80056a0:	f103 0018 	add.w	r0, r3, #24
 80056a4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80056a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80056ac:	4413      	add	r3, r2
 80056ae:	4619      	mov	r1, r3
 80056b0:	f7ff f910 	bl	80048d4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80056b4:	4602      	mov	r2, r0
 80056b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056ba:	4413      	add	r3, r2
 80056bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80056c6:	e123      	b.n	8005910 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2ac>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80056d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80056d8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80056dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80056e0:	4413      	add	r3, r2
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80056ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80056f0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80056f4:	4303      	orrs	r3, r0
 80056f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80056fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80056fe:	430b      	orrs	r3, r1
 8005700:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005704:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005708:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800570c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005710:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800571a:	4413      	add	r3, r2
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2200      	movs	r2, #0
 8005722:	469a      	mov	sl, r3
 8005724:	4693      	mov	fp, r2
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8005732:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8005736:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800573a:	ea40 0602 	orr.w	r6, r0, r2
 800573e:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8005742:	430b      	orrs	r3, r1
 8005744:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005748:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800574c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005750:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005754:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005758:	1c9a      	adds	r2, r3, #2
 800575a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2200      	movs	r2, #0
 8005766:	4698      	mov	r8, r3
 8005768:	4691      	mov	r9, r2
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8005776:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800577a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800577e:	ea40 0602 	orr.w	r6, r0, r2
 8005782:	f8c7 6158 	str.w	r6, [r7, #344]	; 0x158
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800578c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005790:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005794:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005798:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800579c:	1cda      	adds	r2, r3, #3
 800579e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80057ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80057b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80057b6:	0a1d      	lsrs	r5, r3, #8
 80057b8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80057bc:	061c      	lsls	r4, r3, #24
 80057be:	ea40 0304 	orr.w	r3, r0, r4
 80057c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057c6:	ea41 0305 	orr.w	r3, r1, r5
 80057ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057ce:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80057d2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80057d6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80057da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80057e4:	4413      	add	r3, r2
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80057f0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8005800:	0033      	movs	r3, r6
 8005802:	2200      	movs	r2, #0
 8005804:	ea40 0602 	orr.w	r6, r0, r2
 8005808:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 800580c:	430b      	orrs	r3, r1
 800580e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005812:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005816:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800581a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800581e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005822:	1d5a      	adds	r2, r3, #5
 8005824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005828:	4413      	add	r3, r2
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005834:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
 8005844:	0233      	lsls	r3, r6, #8
 8005846:	2200      	movs	r2, #0
 8005848:	ea40 0602 	orr.w	r6, r0, r2
 800584c:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8005850:	430b      	orrs	r3, r1
 8005852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005856:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800585a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800585e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005862:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005866:	1d9a      	adds	r2, r3, #6
 8005868:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800586c:	4413      	add	r3, r2
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005878:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	f8d7 6128 	ldr.w	r6, [r7, #296]	; 0x128
 8005888:	0433      	lsls	r3, r6, #16
 800588a:	2200      	movs	r2, #0
 800588c:	ea40 0602 	orr.w	r6, r0, r2
 8005890:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8005894:	430b      	orrs	r3, r1
 8005896:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800589a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800589e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80058a2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80058a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80058aa:	1dda      	adds	r2, r3, #7
 80058ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058b0:	4413      	add	r3, r2
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058bc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	f8d7 6118 	ldr.w	r6, [r7, #280]	; 0x118
 80058cc:	0633      	lsls	r3, r6, #24
 80058ce:	2200      	movs	r2, #0
 80058d0:	ea40 0602 	orr.w	r6, r0, r2
 80058d4:	f8c7 6110 	str.w	r6, [r7, #272]	; 0x110
 80058d8:	430b      	orrs	r3, r1
 80058da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058de:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80058e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 80058e6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80058ea:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80058ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80058f2:	3308      	adds	r3, #8
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 80058fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005900:	3308      	adds	r3, #8
 8005902:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005906:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005910:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005914:	2b08      	cmp	r3, #8
 8005916:	f67f aed7 	bls.w	80056c8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 800591a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800591e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8005922:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005926:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800592a:	4413      	add	r3, r2
 800592c:	4619      	mov	r1, r3
 800592e:	f7fe f826 	bl	800397e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005932:	4602      	mov	r2, r0
 8005934:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005938:	4413      	add	r3, r2
 800593a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005944:	e133      	b.n	8005bae <_ZN11sensor_msgs3Imu11deserializeEPh+0x54a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005952:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005956:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800595a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800595e:	4413      	add	r3, r2
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800596a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800596e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005972:	4623      	mov	r3, r4
 8005974:	4303      	orrs	r3, r0
 8005976:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800597a:	462b      	mov	r3, r5
 800597c:	430b      	orrs	r3, r1
 800597e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005982:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005986:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800598a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800598e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005998:	4413      	add	r3, r2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059a4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 80059b4:	4634      	mov	r4, r6
 80059b6:	0223      	lsls	r3, r4, #8
 80059b8:	462c      	mov	r4, r5
 80059ba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059be:	462c      	mov	r4, r5
 80059c0:	0222      	lsls	r2, r4, #8
 80059c2:	ea40 0402 	orr.w	r4, r0, r2
 80059c6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059d0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80059d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80059d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80059dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8005a02:	4634      	mov	r4, r6
 8005a04:	0423      	lsls	r3, r4, #16
 8005a06:	462c      	mov	r4, r5
 8005a08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005a0c:	462c      	mov	r4, r5
 8005a0e:	0422      	lsls	r2, r4, #16
 8005a10:	ea40 0402 	orr.w	r4, r0, r2
 8005a14:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a1e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005a22:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a26:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005a2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a2e:	1cda      	adds	r2, r3, #3
 8005a30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a34:	4413      	add	r3, r2
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a40:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a44:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005a48:	4623      	mov	r3, r4
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a50:	4623      	mov	r3, r4
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	4303      	orrs	r3, r0
 8005a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a64:	462b      	mov	r3, r5
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a6c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005a70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005a74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005a78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8005a9e:	0023      	movs	r3, r4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	ea40 0402 	orr.w	r4, r0, r2
 8005aa6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ab0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005ab4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005ab8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005abc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ac0:	1d5a      	adds	r2, r3, #5
 8005ac2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ac6:	4413      	add	r3, r2
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8005ae2:	0223      	lsls	r3, r4, #8
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	ea40 0402 	orr.w	r4, r0, r2
 8005aea:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005aee:	430b      	orrs	r3, r1
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005af8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005afc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b04:	1d9a      	adds	r2, r3, #6
 8005b06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005b26:	0423      	lsls	r3, r4, #16
 8005b28:	2200      	movs	r2, #0
 8005b2a:	ea40 0402 	orr.w	r4, r0, r2
 8005b2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005b32:	430b      	orrs	r3, r1
 8005b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b38:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005b3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005b40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b48:	1dda      	adds	r2, r3, #7
 8005b4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b4e:	4413      	add	r3, r2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005b6a:	0623      	lsls	r3, r4, #24
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	ea40 0402 	orr.w	r4, r0, r2
 8005b72:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005b76:	430b      	orrs	r3, r1
 8005b78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b7c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005b80:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8005b84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005b88:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005b8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005b90:	3315      	adds	r3, #21
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005b9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005ba4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005bae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	f67f aec7 	bls.w	8005946 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e2>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005bb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005bbc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8005bc0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005bc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bc8:	4413      	add	r3, r2
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f7fd fed7 	bl	800397e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005be2:	e10f      	b.n	8005e04 <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a0>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005bf0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005bf4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8005bf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bfc:	4413      	add	r3, r2
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005c0c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8005c10:	4623      	mov	r3, r4
 8005c12:	4303      	orrs	r3, r0
 8005c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c16:	462b      	mov	r3, r5
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c1c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005c20:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c24:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005c28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c32:	4413      	add	r3, r2
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2200      	movs	r2, #0
 8005c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 8005c4a:	4634      	mov	r4, r6
 8005c4c:	0223      	lsls	r3, r4, #8
 8005c4e:	462c      	mov	r4, r5
 8005c50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c54:	462c      	mov	r4, r5
 8005c56:	0222      	lsls	r2, r4, #8
 8005c58:	ea40 0402 	orr.w	r4, r0, r2
 8005c5c:	66bc      	str	r4, [r7, #104]	; 0x68
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c62:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005c66:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005c6a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005c6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c78:	4413      	add	r3, r2
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	663b      	str	r3, [r7, #96]	; 0x60
 8005c82:	667a      	str	r2, [r7, #100]	; 0x64
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	; 0x60
 8005c90:	4634      	mov	r4, r6
 8005c92:	0423      	lsls	r3, r4, #16
 8005c94:	462c      	mov	r4, r5
 8005c96:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005c9a:	462c      	mov	r4, r5
 8005c9c:	0422      	lsls	r2, r4, #16
 8005c9e:	ea40 0402 	orr.w	r4, r0, r2
 8005ca2:	65bc      	str	r4, [r7, #88]	; 0x58
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005cac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005cb0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005cb4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005cb8:	1cda      	adds	r2, r3, #3
 8005cba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc8:	657a      	str	r2, [r7, #84]	; 0x54
 8005cca:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005cce:	4623      	mov	r3, r4
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cda:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005cde:	4623      	mov	r3, r4
 8005ce0:	4303      	orrs	r3, r0
 8005ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005cee:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005cf2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005cf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005cfa:	1d1a      	adds	r2, r3, #4
 8005cfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d00:	4413      	add	r3, r2
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2200      	movs	r2, #0
 8005d08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005d16:	0023      	movs	r3, r4
 8005d18:	2200      	movs	r2, #0
 8005d1a:	ea40 0402 	orr.w	r4, r0, r2
 8005d1e:	633c      	str	r4, [r7, #48]	; 0x30
 8005d20:	430b      	orrs	r3, r1
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005d28:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005d2c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d34:	1d5a      	adds	r2, r3, #5
 8005d36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2200      	movs	r2, #0
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005d50:	0223      	lsls	r3, r4, #8
 8005d52:	2200      	movs	r2, #0
 8005d54:	ea40 0402 	orr.w	r4, r0, r2
 8005d58:	623c      	str	r4, [r7, #32]
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005d62:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005d66:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005d6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005d6e:	1d9a      	adds	r2, r3, #6
 8005d70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	61fa      	str	r2, [r7, #28]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	69bc      	ldr	r4, [r7, #24]
 8005d8a:	0423      	lsls	r3, r4, #16
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	ea40 0402 	orr.w	r4, r0, r2
 8005d92:	613c      	str	r4, [r7, #16]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d9c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005da0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005da4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005da8:	1dda      	adds	r2, r3, #7
 8005daa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005dae:	4413      	add	r3, r2
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2200      	movs	r2, #0
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	60fa      	str	r2, [r7, #12]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	68bc      	ldr	r4, [r7, #8]
 8005dc4:	0623      	lsls	r3, r4, #24
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	ea40 0402 	orr.w	r4, r0, r2
 8005dcc:	603c      	str	r4, [r7, #0]
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005dd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8005dda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005dde:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005de2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005de6:	3322      	adds	r3, #34	; 0x22
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005df0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005df4:	3308      	adds	r3, #8
 8005df6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005dfa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005dfe:	3301      	adds	r3, #1
 8005e00:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005e04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	f67f aeeb 	bls.w	8005be4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x580>
      }
     return offset;
 8005e0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
    }
 8005e12:	4618      	mov	r0, r3
 8005e14:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005e20 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	0800fd6c 	.word	0x0800fd6c

08005e3c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	0800fd7c 	.word	0x0800fd7c

08005e58 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	0800ff48 	.word	0x0800ff48

08005e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ffe8 	bl	8005e58 <_ZN3ros15NodeHandleBase_C1Ev>
 8005e88:	4a36      	ldr	r2, [pc, #216]	; (8005f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fc ff04 	bl	8002ca0 <_ZN13STM32HardwareC1Ev>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f009 fcb2 	bl	800f82e <memset>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f009 fca9 	bl	800f82e <memset>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8005ee2:	2264      	movs	r2, #100	; 0x64
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f009 fca1 	bl	800f82e <memset>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8005ef2:	2264      	movs	r2, #100	; 0x64
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f009 fc99 	bl	800f82e <memset>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fc fb8e 	bl	8002674 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	0800fe5c 	.word	0x0800fe5c

08005f68 <HAL_UART_TxCpltCallback>:
extern float v_enc[4];
extern float v_set[4];
extern float Kp[4], Ki[4], Kd[4], data_PID[12];
extern float d, l;
long sequence = 0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8005f70:	4805      	ldr	r0, [pc, #20]	; (8005f88 <HAL_UART_TxCpltCallback+0x20>)
 8005f72:	f001 f907 	bl	8007184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fc fef7 	bl	8002d6c <_ZN13STM32Hardware5flushEv>
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	2000052c 	.word	0x2000052c

08005f8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <HAL_UART_RxCpltCallback+0x20>)
 8005f96:	f001 f8f5 	bl	8007184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fc fea6 	bl	8002cee <_ZN13STM32Hardware10reset_rbufEv>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	2000052c 	.word	0x2000052c

08005fb0 <setup>:

void setup(void) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
	nh.initNode();
 8005fb4:	480c      	ldr	r0, [pc, #48]	; (8005fe8 <setup+0x38>)
 8005fb6:	f001 f8f1 	bl	800719c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.advertise(vel_set);
 8005fba:	490c      	ldr	r1, [pc, #48]	; (8005fec <setup+0x3c>)
 8005fbc:	480a      	ldr	r0, [pc, #40]	; (8005fe8 <setup+0x38>)
 8005fbe:	f001 f90a 	bl	80071d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(vel_enc);
 8005fc2:	490b      	ldr	r1, [pc, #44]	; (8005ff0 <setup+0x40>)
 8005fc4:	4808      	ldr	r0, [pc, #32]	; (8005fe8 <setup+0x38>)
 8005fc6:	f001 f906 	bl	80071d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	//nh.advertise(PID);
	nh.advertise(imu);
 8005fca:	490a      	ldr	r1, [pc, #40]	; (8005ff4 <setup+0x44>)
 8005fcc:	4806      	ldr	r0, [pc, #24]	; (8005fe8 <setup+0x38>)
 8005fce:	f001 f902 	bl	80071d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.subscribe(cmd_vel);
 8005fd2:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <setup+0x48>)
 8005fd4:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <setup+0x38>)
 8005fd6:	f001 f92e 	bl	8007236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(cmd_PID);
 8005fda:	4908      	ldr	r1, [pc, #32]	; (8005ffc <setup+0x4c>)
 8005fdc:	4802      	ldr	r0, [pc, #8]	; (8005fe8 <setup+0x38>)
 8005fde:	f001 f92a 	bl	8007236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

}
 8005fe2:	bf00      	nop
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	2000052c 	.word	0x2000052c
 8005fec:	20001050 	.word	0x20001050
 8005ff0:	20001064 	.word	0x20001064
 8005ff4:	20001078 	.word	0x20001078
 8005ff8:	20001090 	.word	0x20001090
 8005ffc:	200010f0 	.word	0x200010f0

08006000 <loop>:
void loop(void) {
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0


	vel_set_msg.data_length = sizeof(v_set)/sizeof(v_set[0]);
 8006006:	4b49      	ldr	r3, [pc, #292]	; (800612c <loop+0x12c>)
 8006008:	2204      	movs	r2, #4
 800600a:	625a      	str	r2, [r3, #36]	; 0x24
	vel_set_msg.data = v_set;
 800600c:	4b47      	ldr	r3, [pc, #284]	; (800612c <loop+0x12c>)
 800600e:	4a48      	ldr	r2, [pc, #288]	; (8006130 <loop+0x130>)
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c
	vel_set.publish(&vel_set_msg);
 8006012:	4946      	ldr	r1, [pc, #280]	; (800612c <loop+0x12c>)
 8006014:	4847      	ldr	r0, [pc, #284]	; (8006134 <loop+0x134>)
 8006016:	f7fc fe10 	bl	8002c3a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(30);
 800601a:	201e      	movs	r0, #30
 800601c:	f002 fb10 	bl	8008640 <HAL_Delay>

	vel_enc_msg.data_length = sizeof(v_enc)/sizeof(v_enc[0]);
 8006020:	4b45      	ldr	r3, [pc, #276]	; (8006138 <loop+0x138>)
 8006022:	2204      	movs	r2, #4
 8006024:	625a      	str	r2, [r3, #36]	; 0x24
	vel_enc_msg.data = v_enc;
 8006026:	4b44      	ldr	r3, [pc, #272]	; (8006138 <loop+0x138>)
 8006028:	4a44      	ldr	r2, [pc, #272]	; (800613c <loop+0x13c>)
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c
	vel_enc.publish(&vel_enc_msg);
 800602c:	4942      	ldr	r1, [pc, #264]	; (8006138 <loop+0x138>)
 800602e:	4844      	ldr	r0, [pc, #272]	; (8006140 <loop+0x140>)
 8006030:	f7fc fe03 	bl	8002c3a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(30);
 8006034:	201e      	movs	r0, #30
 8006036:	f002 fb03 	bl	8008640 <HAL_Delay>
	/*PID_msg.data_length = sizeof(data_PID)/sizeof(data_PID[0]);
	PID_msg.data = data_PID;
	PID.publish(&PID_msg);
	HAL_Delay(40);*/
	  //Header
	MPU_readSensorData(&hi2c1);
 800603a:	4842      	ldr	r0, [pc, #264]	; (8006144 <loop+0x144>)
 800603c:	f000 febe 	bl	8006dbc <MPU_readSensorData>
	  imu_msg.header.stamp = nh.now();
 8006040:	4c41      	ldr	r4, [pc, #260]	; (8006148 <loop+0x148>)
 8006042:	463b      	mov	r3, r7
 8006044:	4941      	ldr	r1, [pc, #260]	; (800614c <loop+0x14c>)
 8006046:	4618      	mov	r0, r3
 8006048:	f001 f920 	bl	800728c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 800604c:	f104 030c 	add.w	r3, r4, #12
 8006050:	463a      	mov	r2, r7
 8006052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006056:	e883 0003 	stmia.w	r3, {r0, r1}
	  imu_msg.header.frame_id  ="imu";
 800605a:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <loop+0x148>)
 800605c:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <loop+0x150>)
 800605e:	615a      	str	r2, [r3, #20]

	  //Linear Acceleration
	  imu_msg.linear_acceleration.x = sensorData.ax ;
 8006060:	4b3c      	ldr	r3, [pc, #240]	; (8006154 <loop+0x154>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7fa fa1b 	bl	80004a0 <__aeabi_f2d>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4936      	ldr	r1, [pc, #216]	; (8006148 <loop+0x148>)
 8006070:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
	  imu_msg.linear_acceleration.y = sensorData.ay ;
 8006074:	4b37      	ldr	r3, [pc, #220]	; (8006154 <loop+0x154>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	f7fa fa11 	bl	80004a0 <__aeabi_f2d>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4931      	ldr	r1, [pc, #196]	; (8006148 <loop+0x148>)
 8006084:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
	  imu_msg.linear_acceleration.z = sensorData.az ;
 8006088:	4b32      	ldr	r3, [pc, #200]	; (8006154 <loop+0x154>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fa07 	bl	80004a0 <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	492c      	ldr	r1, [pc, #176]	; (8006148 <loop+0x148>)
 8006098:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

	  //Angular Velocity
	  imu_msg.angular_velocity.x = sensorData.gx ;
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <loop+0x154>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fa f9fd 	bl	80004a0 <__aeabi_f2d>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4927      	ldr	r1, [pc, #156]	; (8006148 <loop+0x148>)
 80060ac:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	  imu_msg.angular_velocity.y = sensorData.gy ;
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <loop+0x154>)
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fa f9f3 	bl	80004a0 <__aeabi_f2d>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4922      	ldr	r1, [pc, #136]	; (8006148 <loop+0x148>)
 80060c0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	  imu_msg.angular_velocity.z = sensorData.gz ;
 80060c4:	4b23      	ldr	r3, [pc, #140]	; (8006154 <loop+0x154>)
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fa f9e9 	bl	80004a0 <__aeabi_f2d>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	491d      	ldr	r1, [pc, #116]	; (8006148 <loop+0x148>)
 80060d4:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

	  //Orientation
	  imu_msg.orientation.x = 0 ;
 80060d8:	491b      	ldr	r1, [pc, #108]	; (8006148 <loop+0x148>)
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  imu_msg.orientation.y = 0 ;
 80060e6:	4918      	ldr	r1, [pc, #96]	; (8006148 <loop+0x148>)
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  imu_msg.orientation.z = 0 ;
 80060f4:	4914      	ldr	r1, [pc, #80]	; (8006148 <loop+0x148>)
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  imu_msg.orientation.w = 0 ;
 8006102:	4911      	ldr	r1, [pc, #68]	; (8006148 <loop+0x148>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  imu.publish(&imu_msg);
 8006110:	490d      	ldr	r1, [pc, #52]	; (8006148 <loop+0x148>)
 8006112:	4811      	ldr	r0, [pc, #68]	; (8006158 <loop+0x158>)
 8006114:	f7fc fd91 	bl	8002c3a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  HAL_Delay(40);
 8006118:	2028      	movs	r0, #40	; 0x28
 800611a:	f002 fa91 	bl	8008640 <HAL_Delay>
	nh.spinOnce();
 800611e:	480b      	ldr	r0, [pc, #44]	; (800614c <loop+0x14c>)
 8006120:	f001 f8f0 	bl	8007304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bd90      	pop	{r4, r7, pc}
 800612c:	20000e68 	.word	0x20000e68
 8006130:	20000444 	.word	0x20000444
 8006134:	20001050 	.word	0x20001050
 8006138:	20000e98 	.word	0x20000e98
 800613c:	20000454 	.word	0x20000454
 8006140:	20001064 	.word	0x20001064
 8006144:	200000ac 	.word	0x200000ac
 8006148:	20000ef8 	.word	0x20000ef8
 800614c:	2000052c 	.word	0x2000052c
 8006150:	0800fda0 	.word	0x0800fda0
 8006154:	20001154 	.word	0x20001154
 8006158:	20001078 	.word	0x20001078

0800615c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE>:

void cmd_vel_callback(const geometry_msgs::Twist& msg){
 800615c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
	v_set[0] = 60*((-msg.linear.x+msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006172:	f7fa f835 	bl	80001e0 <__aeabi_dsub>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4690      	mov	r8, r2
 800617c:	4699      	mov	r9, r3
 800617e:	2002      	movs	r0, #2
 8006180:	f001 fa99 	bl	80076b6 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8006184:	ec53 2b10 	vmov	r2, r3, d0
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	f7fa fb0a 	bl	80007a4 <__aeabi_ddiv>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4692      	mov	sl, r2
 8006196:	469b      	mov	fp, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 800619e:	4b93      	ldr	r3, [pc, #588]	; (80063ec <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa f97c 	bl	80004a0 <__aeabi_f2d>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4640      	mov	r0, r8
 80061ae:	4649      	mov	r1, r9
 80061b0:	f7fa f9ce 	bl	8000550 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	f7fa f812 	bl	80001e4 <__adddf3>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4610      	mov	r0, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	4b88      	ldr	r3, [pc, #544]	; (80063f0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 80061ce:	f7fa f9bf 	bl	8000550 <__aeabi_dmul>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4690      	mov	r8, r2
 80061d8:	4699      	mov	r9, r3
 80061da:	4b86      	ldr	r3, [pc, #536]	; (80063f4 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa f95e 	bl	80004a0 <__aeabi_f2d>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7fa fada 	bl	80007a4 <__aeabi_ddiv>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7fa fc5a 	bl	8000ab0 <__aeabi_d2f>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4a7e      	ldr	r2, [pc, #504]	; (80063f8 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 8006200:	6013      	str	r3, [r2, #0]
	v_set[1] = 60*((msg.linear.x+msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800620e:	f7f9 ffe9 	bl	80001e4 <__adddf3>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4690      	mov	r8, r2
 8006218:	4699      	mov	r9, r3
 800621a:	2002      	movs	r0, #2
 800621c:	f001 fa4b 	bl	80076b6 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8006220:	ec53 2b10 	vmov	r2, r3, d0
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fabc 	bl	80007a4 <__aeabi_ddiv>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4692      	mov	sl, r2
 8006232:	469b      	mov	fp, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 800623a:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa f92e 	bl	80004a0 <__aeabi_f2d>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4640      	mov	r0, r8
 800624a:	4649      	mov	r1, r9
 800624c:	f7fa f980 	bl	8000550 <__aeabi_dmul>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4650      	mov	r0, sl
 8006256:	4659      	mov	r1, fp
 8006258:	f7f9 ffc4 	bl	80001e4 <__adddf3>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	4b61      	ldr	r3, [pc, #388]	; (80063f0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 800626a:	f7fa f971 	bl	8000550 <__aeabi_dmul>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4690      	mov	r8, r2
 8006274:	4699      	mov	r9, r3
 8006276:	4b5f      	ldr	r3, [pc, #380]	; (80063f4 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fa f910 	bl	80004a0 <__aeabi_f2d>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4640      	mov	r0, r8
 8006286:	4649      	mov	r1, r9
 8006288:	f7fa fa8c 	bl	80007a4 <__aeabi_ddiv>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	f7fa fc0c 	bl	8000ab0 <__aeabi_d2f>
 8006298:	4603      	mov	r3, r0
 800629a:	4a57      	ldr	r2, [pc, #348]	; (80063f8 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 800629c:	6053      	str	r3, [r2, #4]
	v_set[2] = 60*((msg.linear.x-msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80062aa:	f7f9 ff99 	bl	80001e0 <__aeabi_dsub>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4690      	mov	r8, r2
 80062b4:	4699      	mov	r9, r3
 80062b6:	2002      	movs	r0, #2
 80062b8:	f001 f9fd 	bl	80076b6 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80062bc:	ec53 2b10 	vmov	r2, r3, d0
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa fa6e 	bl	80007a4 <__aeabi_ddiv>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4692      	mov	sl, r2
 80062ce:	469b      	mov	fp, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 80062d6:	4b45      	ldr	r3, [pc, #276]	; (80063ec <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa f8e0 	bl	80004a0 <__aeabi_f2d>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7fa f932 	bl	8000550 <__aeabi_dmul>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4650      	mov	r0, sl
 80062f2:	4659      	mov	r1, fp
 80062f4:	f7f9 ff76 	bl	80001e4 <__adddf3>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	4b3a      	ldr	r3, [pc, #232]	; (80063f0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 8006306:	f7fa f923 	bl	8000550 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4690      	mov	r8, r2
 8006310:	4699      	mov	r9, r3
 8006312:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fa f8c2 	bl	80004a0 <__aeabi_f2d>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7fa fa3e 	bl	80007a4 <__aeabi_ddiv>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	f7fa fbbe 	bl	8000ab0 <__aeabi_d2f>
 8006334:	4603      	mov	r3, r0
 8006336:	4a30      	ldr	r2, [pc, #192]	; (80063f8 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 8006338:	6093      	str	r3, [r2, #8]
	v_set[3] = 60*((-msg.linear.x-msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006340:	4614      	mov	r4, r2
 8006342:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7f9 ff46 	bl	80001e0 <__aeabi_dsub>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	2002      	movs	r0, #2
 800635e:	f001 f9aa 	bl	80076b6 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8006362:	ec53 2b10 	vmov	r2, r3, d0
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa fa1b 	bl	80007a4 <__aeabi_ddiv>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4690      	mov	r8, r2
 8006374:	4699      	mov	r9, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fa f88d 	bl	80004a0 <__aeabi_f2d>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa f8df 	bl	8000550 <__aeabi_dmul>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7f9 ff23 	bl	80001e4 <__adddf3>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4610      	mov	r0, r2
 80063a4:	4619      	mov	r1, r3
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 80063ac:	f7fa f8d0 	bl	8000550 <__aeabi_dmul>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4614      	mov	r4, r2
 80063b6:	461d      	mov	r5, r3
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fa f86f 	bl	80004a0 <__aeabi_f2d>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa f9eb 	bl	80007a4 <__aeabi_ddiv>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4610      	mov	r0, r2
 80063d4:	4619      	mov	r1, r3
 80063d6:	f7fa fb6b 	bl	8000ab0 <__aeabi_d2f>
 80063da:	4603      	mov	r3, r0
 80063dc:	4a06      	ldr	r2, [pc, #24]	; (80063f8 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 80063de:	60d3      	str	r3, [r2, #12]
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	20000014 	.word	0x20000014
 80063f0:	404e0000 	.word	0x404e0000
 80063f4:	200004f4 	.word	0x200004f4
 80063f8:	20000444 	.word	0x20000444

080063fc <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE>:

void cmd_PID_callback(const std_msgs::Float32MultiArray& msg){   //{Kp1,Ki1,Kd1,Kp2,Ki2,Kd2,Kp3,Ki3,Kd3,Kp4,Ki4,Kd4}
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	Kp[0] = msg.data[0]; Kp[1] = msg.data[3]; Kp[2] = msg.data[6]; Kp[3] = msg.data[9];
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 8006416:	6053      	str	r3, [r2, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 8006420:	6093      	str	r3, [r2, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 800642a:	60d3      	str	r3, [r2, #12]
	Ki[0] = msg.data[1]; Ki[1] = msg.data[4]; Ki[2] = msg.data[7]; Ki[3] = msg.data[10];
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	4a1a      	ldr	r2, [pc, #104]	; (80064a8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 800643e:	6053      	str	r3, [r2, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006448:	6093      	str	r3, [r2, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006452:	60d3      	str	r3, [r2, #12]
	Kd[0] = msg.data[2]; Kd[1] = msg.data[5]; Kd[2] = msg.data[8]; Kd[3] = msg.data[11];
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4a14      	ldr	r2, [pc, #80]	; (80064ac <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 8006466:	6053      	str	r3, [r2, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 8006470:	6093      	str	r3, [r2, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 800647a:	60d3      	str	r3, [r2, #12]

	Flash_Write_Array_Float(0x080A0000, Kp, 4);
 800647c:	2204      	movs	r2, #4
 800647e:	4909      	ldr	r1, [pc, #36]	; (80064a4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 8006480:	480b      	ldr	r0, [pc, #44]	; (80064b0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb4>)
 8006482:	f000 f90e 	bl	80066a2 <Flash_Write_Array_Float>
	Flash_Write_Array_Float(0x080C0000, Ki, 4);
 8006486:	2204      	movs	r2, #4
 8006488:	4907      	ldr	r1, [pc, #28]	; (80064a8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 800648a:	480a      	ldr	r0, [pc, #40]	; (80064b4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb8>)
 800648c:	f000 f909 	bl	80066a2 <Flash_Write_Array_Float>
	Flash_Write_Array_Float(0x080E0000, Kd, 4);
 8006490:	2204      	movs	r2, #4
 8006492:	4906      	ldr	r1, [pc, #24]	; (80064ac <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 8006494:	4808      	ldr	r0, [pc, #32]	; (80064b8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xbc>)
 8006496:	f000 f904 	bl	80066a2 <Flash_Write_Array_Float>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000464 	.word	0x20000464
 80064a8:	20000474 	.word	0x20000474
 80064ac:	20000484 	.word	0x20000484
 80064b0:	080a0000 	.word	0x080a0000
 80064b4:	080c0000 	.word	0x080c0000
 80064b8:	080e0000 	.word	0x080e0000

080064bc <_ZL9GetSectorm>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 11 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a44      	ldr	r2, [pc, #272]	; (80065dc <_ZL9GetSectorm+0x120>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d806      	bhi.n	80064de <_ZL9GetSectorm+0x22>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d6:	d302      	bcc.n	80064de <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e077      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a3f      	ldr	r2, [pc, #252]	; (80065e0 <_ZL9GetSectorm+0x124>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d806      	bhi.n	80064f4 <_ZL9GetSectorm+0x38>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a3e      	ldr	r2, [pc, #248]	; (80065e4 <_ZL9GetSectorm+0x128>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d302      	bcc.n	80064f4 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e06c      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <_ZL9GetSectorm+0x12c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d806      	bhi.n	800650a <_ZL9GetSectorm+0x4e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3b      	ldr	r2, [pc, #236]	; (80065ec <_ZL9GetSectorm+0x130>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d302      	bcc.n	800650a <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8006504:	2302      	movs	r3, #2
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	e061      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a38      	ldr	r2, [pc, #224]	; (80065f0 <_ZL9GetSectorm+0x134>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d206      	bcs.n	8006520 <_ZL9GetSectorm+0x64>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a37      	ldr	r2, [pc, #220]	; (80065f4 <_ZL9GetSectorm+0x138>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d302      	bcc.n	8006520 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 800651a:	2303      	movs	r3, #3
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e056      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a35      	ldr	r2, [pc, #212]	; (80065f8 <_ZL9GetSectorm+0x13c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d206      	bcs.n	8006536 <_ZL9GetSectorm+0x7a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a31      	ldr	r2, [pc, #196]	; (80065f0 <_ZL9GetSectorm+0x134>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d902      	bls.n	8006536 <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8006530:	2304      	movs	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e04b      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a30      	ldr	r2, [pc, #192]	; (80065fc <_ZL9GetSectorm+0x140>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d206      	bcs.n	800654c <_ZL9GetSectorm+0x90>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <_ZL9GetSectorm+0x13c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d902      	bls.n	800654c <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 8006546:	2305      	movs	r3, #5
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e040      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <_ZL9GetSectorm+0x144>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d206      	bcs.n	8006562 <_ZL9GetSectorm+0xa6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a29      	ldr	r2, [pc, #164]	; (80065fc <_ZL9GetSectorm+0x140>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d902      	bls.n	8006562 <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800655c:	2306      	movs	r3, #6
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e035      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <_ZL9GetSectorm+0x148>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d206      	bcs.n	8006578 <_ZL9GetSectorm+0xbc>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a24      	ldr	r2, [pc, #144]	; (8006600 <_ZL9GetSectorm+0x144>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d902      	bls.n	8006578 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8006572:	2307      	movs	r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e02a      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a23      	ldr	r2, [pc, #140]	; (8006608 <_ZL9GetSectorm+0x14c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d206      	bcs.n	800658e <_ZL9GetSectorm+0xd2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a20      	ldr	r2, [pc, #128]	; (8006604 <_ZL9GetSectorm+0x148>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d902      	bls.n	800658e <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8006588:	2308      	movs	r3, #8
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e01f      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1e      	ldr	r2, [pc, #120]	; (800660c <_ZL9GetSectorm+0x150>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d206      	bcs.n	80065a4 <_ZL9GetSectorm+0xe8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <_ZL9GetSectorm+0x14c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d902      	bls.n	80065a4 <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 800659e:	2309      	movs	r3, #9
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e014      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	; (8006610 <_ZL9GetSectorm+0x154>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d806      	bhi.n	80065ba <_ZL9GetSectorm+0xfe>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <_ZL9GetSectorm+0x150>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d902      	bls.n	80065ba <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80065b4:	230a      	movs	r3, #10
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e009      	b.n	80065ce <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <_ZL9GetSectorm+0x158>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d805      	bhi.n	80065ce <_ZL9GetSectorm+0x112>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <_ZL9GetSectorm+0x15c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 80065ca:	230b      	movs	r3, #11
 80065cc:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80065ce:	68fb      	ldr	r3, [r7, #12]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	08003ffe 	.word	0x08003ffe
 80065e0:	08007ffe 	.word	0x08007ffe
 80065e4:	08004000 	.word	0x08004000
 80065e8:	0800bffe 	.word	0x0800bffe
 80065ec:	08008000 	.word	0x08008000
 80065f0:	0800ffff 	.word	0x0800ffff
 80065f4:	0800c000 	.word	0x0800c000
 80065f8:	0801ffff 	.word	0x0801ffff
 80065fc:	0803ffff 	.word	0x0803ffff
 8006600:	0805ffff 	.word	0x0805ffff
 8006604:	0807ffff 	.word	0x0807ffff
 8006608:	0809ffff 	.word	0x0809ffff
 800660c:	080bffff 	.word	0x080bffff
 8006610:	080dfffe 	.word	0x080dfffe
 8006614:	080ffffe 	.word	0x080ffffe
 8006618:	080dffff 	.word	0x080dffff

0800661c <_Z11float2BytesPhf>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e00b      	b.n	800664a <_Z11float2BytesPhf+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	440b      	add	r3, r1
 800663a:	3210      	adds	r2, #16
 800663c:	443a      	add	r2, r7
 800663e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006642:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	3301      	adds	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d9f0      	bls.n	8006632 <_Z11float2BytesPhf+0x16>
    }

}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_Z11Bytes2floatPh>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]
 800666a:	e00b      	b.n	8006684 <_Z11Bytes2floatPh+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	441a      	add	r2, r3
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	3318      	adds	r3, #24
 8006678:	443b      	add	r3, r7
 800667a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	3301      	adds	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b03      	cmp	r3, #3
 8006688:	d9f0      	bls.n	800666c <_Z11Bytes2floatPh+0xe>
    }

   float float_variable =  thing.a;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	ee07 3a90 	vmov	s15, r3
}
 8006694:	eeb0 0a67 	vmov.f32	s0, s15
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <Flash_Write_Array_Float>:
	value = Bytes2float(buffer);
	return value;
}

void Flash_Write_Array_Float(uint32_t StartSectorAddress, float *Array, uint16_t ArrayLength)
{
 80066a2:	b5b0      	push	{r4, r5, r7, lr}
 80066a4:	b090      	sub	sp, #64	; 0x40
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes_temp[4];

    uint32_t i;
    uint32_t WordsToWrite = ArrayLength * sizeof(float) / sizeof(uint32_t);
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_FLASH_Unlock();
 80066b4:	f002 fd5e 	bl	8009174 <HAL_FLASH_Unlock>

    uint32_t StartSector = GetSector(StartSectorAddress);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff feff 	bl	80064bc <_ZL9GetSectorm>
 80066be:	6378      	str	r0, [r7, #52]	; 0x34
    uint32_t EndSectorAddress = StartSectorAddress + WordsToWrite * sizeof(uint32_t);
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t EndSector = GetSector(EndSectorAddress);
 80066ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066cc:	f7ff fef6 	bl	80064bc <_ZL9GetSectorm>
 80066d0:	62f8      	str	r0, [r7, #44]	; 0x2c

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80066d6:	2302      	movs	r3, #2
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
    EraseInitStruct.Sector = StartSector;
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = (EndSector - StartSector) + 1;
 80066de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	623b      	str	r3, [r7, #32]

    uint32_t SECTORError;
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80066e8:	f107 0210 	add.w	r2, r7, #16
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f002 fea0 	bl	8009438 <HAL_FLASHEx_Erase>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bf14      	ite	ne
 80066fe:	2301      	movne	r3, #1
 8006700:	2300      	moveq	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d130      	bne.n	800676a <Flash_Write_Array_Float+0xc8>
    {
        return;
    }

    for (i = 0; i < ArrayLength; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670c:	e026      	b.n	800675c <Flash_Write_Array_Float+0xba>
    {
        float2Bytes(bytes_temp, Array[i]);
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4413      	add	r3, r2
 8006716:	edd3 7a00 	vldr	s15, [r3]
 800671a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800671e:	eeb0 0a67 	vmov.f32	s0, s15
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff7a 	bl	800661c <_Z11float2BytesPhf>

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, *(uint32_t *)bytes_temp) != HAL_OK)
 8006728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	461c      	mov	r4, r3
 8006732:	4615      	mov	r5, r2
 8006734:	4622      	mov	r2, r4
 8006736:	462b      	mov	r3, r5
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	2002      	movs	r0, #2
 800673c:	f002 fcc6 	bl	80090cc <HAL_FLASH_Program>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10e      	bne.n	800676e <Flash_Write_Array_Float+0xcc>
        {
            return;
        }
        StartSectorAddress += sizeof(uint32_t);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3304      	adds	r3, #4
 8006754:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < ArrayLength; i++)
 8006756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006758:	3301      	adds	r3, #1
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006760:	429a      	cmp	r2, r3
 8006762:	d3d4      	bcc.n	800670e <Flash_Write_Array_Float+0x6c>
    }

    HAL_FLASH_Lock();
 8006764:	f002 fd28 	bl	80091b8 <HAL_FLASH_Lock>
 8006768:	e002      	b.n	8006770 <Flash_Write_Array_Float+0xce>
        return;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <Flash_Write_Array_Float+0xce>
            return;
 800676e:	bf00      	nop
}
 8006770:	3740      	adds	r7, #64	; 0x40
 8006772:	46bd      	mov	sp, r7
 8006774:	bdb0      	pop	{r4, r5, r7, pc}

08006776 <Flash_Read_Array_Float>:

void Flash_Read_Array_Float(uint32_t StartSectorAddress, float *Array, uint16_t ArrayLength)
{
 8006776:	b590      	push	{r4, r7, lr}
 8006778:	b089      	sub	sp, #36	; 0x24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4613      	mov	r3, r2
 8006782:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    uint8_t bytes_temp[4];

    for (i = 0; i < ArrayLength; i++)
 8006784:	2300      	movs	r3, #0
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e026      	b.n	80067d8 <Flash_Read_Array_Float+0x62>
    {
        for (int j = 0; j < 4; j++)
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e00d      	b.n	80067ac <Flash_Read_Array_Float+0x36>
        {
            bytes_temp[j] = *(__IO uint8_t *)(StartSectorAddress + j);
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b2d9      	uxtb	r1, r3
 800679a:	f107 0214 	add.w	r2, r7, #20
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	4413      	add	r3, r2
 80067a2:	460a      	mov	r2, r1
 80067a4:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	3301      	adds	r3, #1
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	ddee      	ble.n	8006790 <Flash_Read_Array_Float+0x1a>
        }

        Array[i] = Bytes2float(bytes_temp);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	18d4      	adds	r4, r2, r3
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff ff4d 	bl	800665e <_Z11Bytes2floatPh>
 80067c4:	eef0 7a40 	vmov.f32	s15, s0
 80067c8:	edc4 7a00 	vstr	s15, [r4]

        StartSectorAddress += 4;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3304      	adds	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < ArrayLength; i++)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d3d4      	bcc.n	800678a <Flash_Read_Array_Float+0x14>
    }
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	3724      	adds	r7, #36	; 0x24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd90      	pop	{r4, r7, pc}
	...

080067ec <limAngle>:
ScaleFactor scaleFactor;

/// @brief Limit attitude value within (-180;180) degree.
/// @param angle Attitude value.
float limAngle(float angle)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle > 180)
 80067f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80067fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006850 <limAngle+0x64>
 80067fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006806:	dd08      	ble.n	800681a <limAngle+0x2e>
	{
		angle -= 360;
 8006808:	edd7 7a01 	vldr	s15, [r7, #4]
 800680c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006854 <limAngle+0x68>
 8006810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006814:	edc7 7a01 	vstr	s15, [r7, #4]
 8006818:	e010      	b.n	800683c <limAngle+0x50>
	}
	else if (angle <= -180)
 800681a:	edd7 7a01 	vldr	s15, [r7, #4]
 800681e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006858 <limAngle+0x6c>
 8006822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682a:	d807      	bhi.n	800683c <limAngle+0x50>
	{
		angle += 360;
 800682c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006830:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006854 <limAngle+0x68>
 8006834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006838:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	return angle;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	ee07 3a90 	vmov	s15, r3
}
 8006842:	eeb0 0a67 	vmov.f32	s0, s15
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	43340000 	.word	0x43340000
 8006854:	43b40000 	.word	0x43b40000
 8006858:	c3340000 	.word	0xc3340000

0800685c <MPU_begin>:
/// @param I2Cx Pointer to I2C structure config.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, float tau, float dt)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af04      	add	r7, sp, #16
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	460b      	mov	r3, r1
 8006866:	ed87 0a01 	vstr	s0, [r7, #4]
 800686a:	edc7 0a00 	vstr	s1, [r7]
 800686e:	72fb      	strb	r3, [r7, #11]
    // Save values
    _addr = addr << 1;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4b24      	ldr	r3, [pc, #144]	; (8006908 <MPU_begin+0xac>)
 8006878:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 800687a:	4a24      	ldr	r2, [pc, #144]	; (800690c <MPU_begin+0xb0>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6013      	str	r3, [r2, #0]
    _dt = dt;
 8006880:	4a23      	ldr	r2, [pc, #140]	; (8006910 <MPU_begin+0xb4>)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 8006886:	4b20      	ldr	r3, [pc, #128]	; (8006908 <MPU_begin+0xac>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b299      	uxth	r1, r3
 800688c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006890:	9302      	str	r3, [sp, #8]
 8006892:	2301      	movs	r3, #1
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	f107 0317 	add.w	r3, r7, #23
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2301      	movs	r3, #1
 800689e:	2275      	movs	r2, #117	; 0x75
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f003 fadf 	bl	8009e64 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b71      	cmp	r3, #113	; 0x71
 80068aa:	d002      	beq.n	80068b2 <MPU_begin+0x56>
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b68      	cmp	r3, #104	; 0x68
 80068b0:	d125      	bne.n	80068fe <MPU_begin+0xa2>
    {
    	if (check == WHO_AM_I_9250_ANS)
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	2b71      	cmp	r3, #113	; 0x71
 80068b6:	d106      	bne.n	80068c6 <MPU_begin+0x6a>
    	{
    		_name = MPU9250;
 80068b8:	4b16      	ldr	r3, [pc, #88]	; (8006914 <MPU_begin+0xb8>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
    		_maddr = MAG_LOW << 1;
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <MPU_begin+0xbc>)
 80068c0:	2218      	movs	r2, #24
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e002      	b.n	80068cc <MPU_begin+0x70>
    	}
    	else
    	{
    		_name = MPU6050;
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <MPU_begin+0xb8>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
    	}
        // Startup / reset the sensor
        select = 0x00;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <MPU_begin+0xac>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b299      	uxth	r1, r3
 80068d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	2301      	movs	r3, #1
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	f107 0316 	add.w	r3, r7, #22
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2301      	movs	r3, #1
 80068e8:	226b      	movs	r2, #107	; 0x6b
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f003 f9c0 	bl	8009c70 <HAL_I2C_Mem_Write>
        MPU_setFullScaleRange(I2Cx, AFSR_4G, GFSR_500DPS);
 80068f0:	2201      	movs	r2, #1
 80068f2:	2101      	movs	r1, #1
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f811 	bl	800691c <MPU_setFullScaleRange>

        return 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <MPU_begin+0xa4>
    }
    else
    {
        return 0;
 80068fe:	2300      	movs	r3, #0
    }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20001134 	.word	0x20001134
 800690c:	20001138 	.word	0x20001138
 8006910:	2000113c 	.word	0x2000113c
 8006914:	20001136 	.word	0x20001136
 8006918:	20001135 	.word	0x20001135

0800691c <MPU_setFullScaleRange>:
/// @param _addr Hex address based on AD0 pin.
/// @param scaleFactor Save scale range.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_setFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale, uint8_t gScale)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
 8006928:	4613      	mov	r3, r2
 800692a:	70bb      	strb	r3, [r7, #2]
	// Set full scale range
	MPU_writeAccScaleRange(I2Cx, aScale);
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f809 	bl	8006948 <MPU_writeAccScaleRange>
	MPU_writeGyrScaleRange(I2Cx, gScale);
 8006936:	78bb      	ldrb	r3, [r7, #2]
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8a4 	bl	8006a88 <MPU_writeGyrScaleRange>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <MPU_writeAccScaleRange>:
/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param scaleFactor Save scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af04      	add	r7, sp, #16
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d872      	bhi.n	8006a40 <MPU_writeAccScaleRange+0xf8>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <MPU_writeAccScaleRange+0x18>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006971 	.word	0x08006971
 8006964:	080069a5 	.word	0x080069a5
 8006968:	080069d9 	.word	0x080069d9
 800696c:	08006a0d 	.word	0x08006a0d
    {
    case AFSR_2G:
    	AFSR = 2;
 8006970:	4b42      	ldr	r3, [pc, #264]	; (8006a7c <MPU_writeAccScaleRange+0x134>)
 8006972:	2202      	movs	r2, #2
 8006974:	601a      	str	r2, [r3, #0]
        scaleFactor.a = 16384.0;
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <MPU_writeAccScaleRange+0x138>)
 8006978:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800697c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006982:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <MPU_writeAccScaleRange+0x13c>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b299      	uxth	r1, r3
 8006988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800698c:	9302      	str	r3, [sp, #8]
 800698e:	2301      	movs	r3, #1
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	f107 030f 	add.w	r3, r7, #15
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	2301      	movs	r3, #1
 800699a:	221c      	movs	r2, #28
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f003 f967 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 80069a2:	e067      	b.n	8006a74 <MPU_writeAccScaleRange+0x12c>
    case AFSR_4G:
    	AFSR = 4;
 80069a4:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <MPU_writeAccScaleRange+0x134>)
 80069a6:	2204      	movs	r2, #4
 80069a8:	601a      	str	r2, [r3, #0]
        scaleFactor.a = 8192.0;
 80069aa:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <MPU_writeAccScaleRange+0x138>)
 80069ac:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80069b0:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80069b2:	2308      	movs	r3, #8
 80069b4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <MPU_writeAccScaleRange+0x13c>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b299      	uxth	r1, r3
 80069bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	2301      	movs	r3, #1
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	f107 030f 	add.w	r3, r7, #15
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	2301      	movs	r3, #1
 80069ce:	221c      	movs	r2, #28
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f003 f94d 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 80069d6:	e04d      	b.n	8006a74 <MPU_writeAccScaleRange+0x12c>
    case AFSR_8G:
    	AFSR = 8;
 80069d8:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <MPU_writeAccScaleRange+0x134>)
 80069da:	2208      	movs	r2, #8
 80069dc:	601a      	str	r2, [r3, #0]
        scaleFactor.a = 4096.0;
 80069de:	4b28      	ldr	r3, [pc, #160]	; (8006a80 <MPU_writeAccScaleRange+0x138>)
 80069e0:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80069e4:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80069e6:	2310      	movs	r3, #16
 80069e8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80069ea:	4b26      	ldr	r3, [pc, #152]	; (8006a84 <MPU_writeAccScaleRange+0x13c>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b299      	uxth	r1, r3
 80069f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f4:	9302      	str	r3, [sp, #8]
 80069f6:	2301      	movs	r3, #1
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	f107 030f 	add.w	r3, r7, #15
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2301      	movs	r3, #1
 8006a02:	221c      	movs	r2, #28
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f003 f933 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006a0a:	e033      	b.n	8006a74 <MPU_writeAccScaleRange+0x12c>
    case AFSR_16G:
    	AFSR = 16;
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <MPU_writeAccScaleRange+0x134>)
 8006a0e:	2210      	movs	r2, #16
 8006a10:	601a      	str	r2, [r3, #0]
        scaleFactor.a = 2048.0;
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <MPU_writeAccScaleRange+0x138>)
 8006a14:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8006a18:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8006a1a:	2318      	movs	r3, #24
 8006a1c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006a1e:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <MPU_writeAccScaleRange+0x13c>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b299      	uxth	r1, r3
 8006a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	f107 030f 	add.w	r3, r7, #15
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2301      	movs	r3, #1
 8006a36:	221c      	movs	r2, #28
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f003 f919 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006a3e:	e019      	b.n	8006a74 <MPU_writeAccScaleRange+0x12c>
    default:
    	AFSR = 4;
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <MPU_writeAccScaleRange+0x134>)
 8006a42:	2204      	movs	r2, #4
 8006a44:	601a      	str	r2, [r3, #0]
        scaleFactor.a = 8192.0;
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <MPU_writeAccScaleRange+0x138>)
 8006a48:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8006a4c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8006a4e:	2308      	movs	r3, #8
 8006a50:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <MPU_writeAccScaleRange+0x13c>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b299      	uxth	r1, r3
 8006a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	2301      	movs	r3, #1
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	f107 030f 	add.w	r3, r7, #15
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	221c      	movs	r2, #28
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f003 f8ff 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006a72:	bf00      	nop
    }
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000018 	.word	0x20000018
 8006a80:	20001190 	.word	0x20001190
 8006a84:	20001134 	.word	0x20001134

08006a88 <MPU_writeGyrScaleRange>:
/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param scaleFactor Save scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyrScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af04      	add	r7, sp, #16
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d871      	bhi.n	8006b7e <MPU_writeGyrScaleRange+0xf6>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <MPU_writeGyrScaleRange+0x18>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006b17 	.word	0x08006b17
 8006aac:	08006b4b 	.word	0x08006b4b
    {
    case GFSR_250DPS:
    	GFSR = 250;
 8006ab0:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <MPU_writeGyrScaleRange+0x134>)
 8006ab2:	22fa      	movs	r2, #250	; 0xfa
 8006ab4:	601a      	str	r2, [r3, #0]
        scaleFactor.g = 131.0;
 8006ab6:	4b42      	ldr	r3, [pc, #264]	; (8006bc0 <MPU_writeGyrScaleRange+0x138>)
 8006ab8:	4a42      	ldr	r2, [pc, #264]	; (8006bc4 <MPU_writeGyrScaleRange+0x13c>)
 8006aba:	605a      	str	r2, [r3, #4]
        select = 0x00;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006ac0:	4b41      	ldr	r3, [pc, #260]	; (8006bc8 <MPU_writeGyrScaleRange+0x140>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aca:	9302      	str	r3, [sp, #8]
 8006acc:	2301      	movs	r3, #1
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	f107 030f 	add.w	r3, r7, #15
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	221b      	movs	r2, #27
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f003 f8c8 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006ae0:	e067      	b.n	8006bb2 <MPU_writeGyrScaleRange+0x12a>
    case GFSR_500DPS:
    	GFSR = 500;
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <MPU_writeGyrScaleRange+0x134>)
 8006ae4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006ae8:	601a      	str	r2, [r3, #0]
        scaleFactor.g = 65.5;
 8006aea:	4b35      	ldr	r3, [pc, #212]	; (8006bc0 <MPU_writeGyrScaleRange+0x138>)
 8006aec:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <MPU_writeGyrScaleRange+0x144>)
 8006aee:	605a      	str	r2, [r3, #4]
        select = 0x08;
 8006af0:	2308      	movs	r3, #8
 8006af2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006af4:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <MPU_writeGyrScaleRange+0x140>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b299      	uxth	r1, r3
 8006afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006afe:	9302      	str	r3, [sp, #8]
 8006b00:	2301      	movs	r3, #1
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	f107 030f 	add.w	r3, r7, #15
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	221b      	movs	r2, #27
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f003 f8ae 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006b14:	e04d      	b.n	8006bb2 <MPU_writeGyrScaleRange+0x12a>
    case GFSR_1000DPS:
    	GFSR = 1000;
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <MPU_writeGyrScaleRange+0x134>)
 8006b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b1c:	601a      	str	r2, [r3, #0]
        scaleFactor.g = 32.8;
 8006b1e:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <MPU_writeGyrScaleRange+0x138>)
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <MPU_writeGyrScaleRange+0x148>)
 8006b22:	605a      	str	r2, [r3, #4]
        select = 0x10;
 8006b24:	2310      	movs	r3, #16
 8006b26:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006b28:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <MPU_writeGyrScaleRange+0x140>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b299      	uxth	r1, r3
 8006b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	2301      	movs	r3, #1
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	f107 030f 	add.w	r3, r7, #15
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	2301      	movs	r3, #1
 8006b40:	221b      	movs	r2, #27
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f003 f894 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006b48:	e033      	b.n	8006bb2 <MPU_writeGyrScaleRange+0x12a>
    case GFSR_2000DPS:
    	GFSR = 2000;
 8006b4a:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <MPU_writeGyrScaleRange+0x134>)
 8006b4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b50:	601a      	str	r2, [r3, #0]
        scaleFactor.g = 16.4;
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <MPU_writeGyrScaleRange+0x138>)
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <MPU_writeGyrScaleRange+0x14c>)
 8006b56:	605a      	str	r2, [r3, #4]
        select = 0x18;
 8006b58:	2318      	movs	r3, #24
 8006b5a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <MPU_writeGyrScaleRange+0x140>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b299      	uxth	r1, r3
 8006b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b66:	9302      	str	r3, [sp, #8]
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	f107 030f 	add.w	r3, r7, #15
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2301      	movs	r3, #1
 8006b74:	221b      	movs	r2, #27
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f003 f87a 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006b7c:	e019      	b.n	8006bb2 <MPU_writeGyrScaleRange+0x12a>
    default:
    	GFSR = 500;
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <MPU_writeGyrScaleRange+0x134>)
 8006b80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b84:	601a      	str	r2, [r3, #0]
        scaleFactor.g = 65.5;
 8006b86:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <MPU_writeGyrScaleRange+0x138>)
 8006b88:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <MPU_writeGyrScaleRange+0x144>)
 8006b8a:	605a      	str	r2, [r3, #4]
        select = 0x08;
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <MPU_writeGyrScaleRange+0x140>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	b299      	uxth	r1, r3
 8006b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b9a:	9302      	str	r3, [sp, #8]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	f107 030f 	add.w	r3, r7, #15
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	221b      	movs	r2, #27
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f003 f860 	bl	8009c70 <HAL_I2C_Mem_Write>
        break;
 8006bb0:	bf00      	nop
    }
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000001c 	.word	0x2000001c
 8006bc0:	20001190 	.word	0x20001190
 8006bc4:	43030000 	.word	0x43030000
 8006bc8:	20001134 	.word	0x20001134
 8006bcc:	42830000 	.word	0x42830000
 8006bd0:	42033333 	.word	0x42033333
 8006bd4:	41833333 	.word	0x41833333

08006bd8 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08c      	sub	sp, #48	; 0x30
 8006bdc:	af04      	add	r7, sp, #16
 8006bde:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14], mbuf[6];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8006be0:	4b3c      	ldr	r3, [pc, #240]	; (8006cd4 <MPU_readRawData+0xfc>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b299      	uxth	r1, r3
 8006be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	230e      	movs	r3, #14
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f107 0310 	add.w	r3, r7, #16
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	223b      	movs	r2, #59	; 0x3b
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f003 f932 	bl	8009e64 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 8006c00:	7c3b      	ldrb	r3, [r7, #16]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	b21a      	sxth	r2, r3
 8006c06:	7c7b      	ldrb	r3, [r7, #17]
 8006c08:	b21b      	sxth	r3, r3
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c10:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8006c12:	7cbb      	ldrb	r3, [r7, #18]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	b21a      	sxth	r2, r3
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	b21b      	sxth	r3, r3
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	b21a      	sxth	r2, r3
 8006c20:	4b2d      	ldr	r3, [pc, #180]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c22:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8006c24:	7d3b      	ldrb	r3, [r7, #20]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	b21a      	sxth	r2, r3
 8006c2a:	7d7b      	ldrb	r3, [r7, #21]
 8006c2c:	b21b      	sxth	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b21a      	sxth	r2, r3
 8006c32:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c34:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8006c36:	7e3b      	ldrb	r3, [r7, #24]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	b21a      	sxth	r2, r3
 8006c3c:	7e7b      	ldrb	r3, [r7, #25]
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	b21a      	sxth	r2, r3
 8006c44:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c46:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8006c48:	7ebb      	ldrb	r3, [r7, #26]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	b21a      	sxth	r2, r3
 8006c4e:	7efb      	ldrb	r3, [r7, #27]
 8006c50:	b21b      	sxth	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b21a      	sxth	r2, r3
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c58:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8006c5a:	7f3b      	ldrb	r3, [r7, #28]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	b21a      	sxth	r2, r3
 8006c60:	7f7b      	ldrb	r3, [r7, #29]
 8006c62:	b21b      	sxth	r3, r3
 8006c64:	4313      	orrs	r3, r2
 8006c66:	b21a      	sxth	r2, r3
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <MPU_readRawData+0x100>)
 8006c6a:	815a      	strh	r2, [r3, #10]

    if (_name == MPU9250)
 8006c6c:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <MPU_readRawData+0x104>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d12a      	bne.n	8006cca <MPU_readRawData+0xf2>
    {
        // Read the magnetometer
        HAL_I2C_Mem_Read(I2Cx, _maddr, MAG_XOUT_H, 1, mbuf, 6, I2C_TIMOUT_MS);
 8006c74:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <MPU_readRawData+0x108>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b299      	uxth	r1, r3
 8006c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	2306      	movs	r3, #6
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	2203      	movs	r2, #3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f003 f8e8 	bl	8009e64 <HAL_I2C_Mem_Read>

        // Bit shift the data
        rawData.mx = mbuf[0] << 8 | mbuf[1];
 8006c94:	7a3b      	ldrb	r3, [r7, #8]
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b21a      	sxth	r2, r3
 8006c9a:	7a7b      	ldrb	r3, [r7, #9]
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <MPU_readRawData+0x100>)
 8006ca4:	819a      	strh	r2, [r3, #12]
        rawData.my = mbuf[2] << 8 | mbuf[3];
 8006ca6:	7abb      	ldrb	r3, [r7, #10]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	b21a      	sxth	r2, r3
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b21a      	sxth	r2, r3
 8006cb4:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <MPU_readRawData+0x100>)
 8006cb6:	81da      	strh	r2, [r3, #14]
        rawData.mz = mbuf[4] << 8 | mbuf[5];
 8006cb8:	7b3b      	ldrb	r3, [r7, #12]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	b21a      	sxth	r2, r3
 8006cbe:	7b7b      	ldrb	r3, [r7, #13]
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b21a      	sxth	r2, r3
 8006cc6:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <MPU_readRawData+0x100>)
 8006cc8:	821a      	strh	r2, [r3, #16]
    }
}
 8006cca:	bf00      	nop
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20001134 	.word	0x20001134
 8006cd8:	20001140 	.word	0x20001140
 8006cdc:	20001136 	.word	0x20001136
 8006ce0:	20001135 	.word	0x20001135

08006ce4 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of points to get average offsets.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	e01d      	b.n	8006d48 <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff63 	bl	8006bd8 <MPU_readRawData>
        x += rawData.gx;
 8006d12:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <MPU_calibrateGyro+0xd0>)
 8006d14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <MPU_calibrateGyro+0xd0>)
 8006d22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d26:	461a      	mov	r2, r3
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 8006d2e:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <MPU_calibrateGyro+0xd0>)
 8006d30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006d34:	461a      	mov	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8006d3c:	2003      	movs	r0, #3
 8006d3e:	f001 fc7f 	bl	8008640 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	3301      	adds	r3, #1
 8006d46:	817b      	strh	r3, [r7, #10]
 8006d48:	897a      	ldrh	r2, [r7, #10]
 8006d4a:	887b      	ldrh	r3, [r7, #2]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3dd      	bcc.n	8006d0c <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d5a:	887b      	ldrh	r3, [r7, #2]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <MPU_calibrateGyro+0xd4>)
 8006d6a:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d78:	887b      	ldrh	r3, [r7, #2]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <MPU_calibrateGyro+0xd4>)
 8006d88:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <MPU_calibrateGyro+0xd4>)
 8006da6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006daa:	bf00      	nop
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20001140 	.word	0x20001140
 8006db8:	20001178 	.word	0x20001178

08006dbc <MPU_readSensorData>:
}

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readSensorData(I2C_HandleTypeDef *I2Cx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff07 	bl	8006bd8 <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = (float)rawData.ax / scaleFactor.a;
 8006dca:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006dd8:	4b3c      	ldr	r3, [pc, #240]	; (8006ecc <MPU_readSensorData+0x110>)
 8006dda:	ed93 7a00 	vldr	s14, [r3]
 8006dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de2:	4b3b      	ldr	r3, [pc, #236]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006de4:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = (float)rawData.ay / scaleFactor.a;
 8006de8:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006df6:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <MPU_readSensorData+0x110>)
 8006df8:	ed93 7a00 	vldr	s14, [r3]
 8006dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e00:	4b33      	ldr	r3, [pc, #204]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e02:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / scaleFactor.a;
 8006e06:	4b30      	ldr	r3, [pc, #192]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e14:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <MPU_readSensorData+0x110>)
 8006e16:	ed93 7a00 	vldr	s14, [r3]
 8006e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1e:	4b2c      	ldr	r3, [pc, #176]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e20:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 8006e24:	4b28      	ldr	r3, [pc, #160]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006e26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e32:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <MPU_readSensorData+0x118>)
 8006e34:	edd3 7a00 	vldr	s15, [r3]
 8006e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e3c:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e3e:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 8006e42:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e50:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <MPU_readSensorData+0x118>)
 8006e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e5c:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <MPU_readSensorData+0x10c>)
 8006e62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <MPU_readSensorData+0x118>)
 8006e70:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e7a:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= scaleFactor.g;
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e80:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <MPU_readSensorData+0x110>)
 8006e86:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e90:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= scaleFactor.g;
 8006e94:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006e96:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <MPU_readSensorData+0x110>)
 8006e9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006ea6:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= scaleFactor.g;
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006eac:	edd3 6a05 	vldr	s13, [r3, #20]
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <MPU_readSensorData+0x110>)
 8006eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <MPU_readSensorData+0x114>)
 8006ebc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20001140 	.word	0x20001140
 8006ecc:	20001190 	.word	0x20001190
 8006ed0:	20001154 	.word	0x20001154
 8006ed4:	20001178 	.word	0x20001178

08006ed8 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter.
/// @param I2Cx Pointer to I2C structure config.
void MPU_calcAttitude(I2C_HandleTypeDef *I2Cx)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
    // Read processed data
    MPU_readSensorData(I2Cx);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ff6b 	bl	8006dbc <MPU_readSensorData>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8006ee6:	4b53      	ldr	r3, [pc, #332]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006eec:	4b51      	ldr	r3, [pc, #324]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006eee:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ef2:	eef0 0a47 	vmov.f32	s1, s14
 8006ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8006efa:	f7fb f821 	bl	8001f40 <_ZSt5atan2ff>
 8006efe:	eeb0 7a40 	vmov.f32	s14, s0
 8006f02:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <MPU_calcAttitude+0x160>)
 8006f04:	edd3 7a00 	vldr	s15, [r3]
 8006f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0c:	edc7 7a03 	vstr	s15, [r7, #12]
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 8006f10:	4b48      	ldr	r3, [pc, #288]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006f12:	edd3 7a00 	vldr	s15, [r3]
 8006f16:	4b47      	ldr	r3, [pc, #284]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f1c:	eef0 0a47 	vmov.f32	s1, s14
 8006f20:	eeb0 0a67 	vmov.f32	s0, s15
 8006f24:	f7fb f80c 	bl	8001f40 <_ZSt5atan2ff>
 8006f28:	eeb0 7a40 	vmov.f32	s14, s0
 8006f2c:	4b42      	ldr	r3, [pc, #264]	; (8007038 <MPU_calcAttitude+0x160>)
 8006f2e:	edd3 7a00 	vldr	s15, [r3]
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a02 	vstr	s15, [r7, #8]

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8006f3a:	4b40      	ldr	r3, [pc, #256]	; (800703c <MPU_calcAttitude+0x164>)
 8006f3c:	ed93 7a00 	vldr	s14, [r3]
 8006f40:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006f42:	edd3 6a04 	vldr	s13, [r3, #16]
 8006f46:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <MPU_calcAttitude+0x168>)
 8006f48:	edd3 7a00 	vldr	s15, [r3]
 8006f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f54:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <MPU_calcAttitude+0x16c>)
 8006f56:	edd3 7a00 	vldr	s15, [r3]
 8006f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f5e:	4b39      	ldr	r3, [pc, #228]	; (8007044 <MPU_calcAttitude+0x16c>)
 8006f60:	edd3 7a00 	vldr	s15, [r3]
 8006f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006f6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <MPU_calcAttitude+0x164>)
 8006f7a:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = _tau * (attitude.p + sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <MPU_calcAttitude+0x164>)
 8006f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f84:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006f86:	edd3 6a03 	vldr	s13, [r3, #12]
 8006f8a:	4b2d      	ldr	r3, [pc, #180]	; (8007040 <MPU_calcAttitude+0x168>)
 8006f8c:	edd3 7a00 	vldr	s15, [r3]
 8006f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f98:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <MPU_calcAttitude+0x16c>)
 8006f9a:	edd3 7a00 	vldr	s15, [r3]
 8006f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fa2:	4b28      	ldr	r3, [pc, #160]	; (8007044 <MPU_calcAttitude+0x16c>)
 8006fa4:	edd3 7a00 	vldr	s15, [r3]
 8006fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	4b1f      	ldr	r3, [pc, #124]	; (800703c <MPU_calcAttitude+0x164>)
 8006fbe:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y += sensorData.gz * _dt;
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <MPU_calcAttitude+0x164>)
 8006fc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <MPU_calcAttitude+0x15c>)
 8006fca:	edd3 6a05 	vldr	s13, [r3, #20]
 8006fce:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <MPU_calcAttitude+0x168>)
 8006fd0:	edd3 7a00 	vldr	s15, [r3]
 8006fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fdc:	4b17      	ldr	r3, [pc, #92]	; (800703c <MPU_calcAttitude+0x164>)
 8006fde:	edc3 7a02 	vstr	s15, [r3, #8]

    // Limit attitude value from -180 degree to 180 degree
    attitude.r = limAngle(attitude.r);
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <MPU_calcAttitude+0x164>)
 8006fe4:	edd3 7a00 	vldr	s15, [r3]
 8006fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fec:	f7ff fbfe 	bl	80067ec <limAngle>
 8006ff0:	eef0 7a40 	vmov.f32	s15, s0
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <MPU_calcAttitude+0x164>)
 8006ff6:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = limAngle(attitude.p);
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <MPU_calcAttitude+0x164>)
 8006ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8007000:	eeb0 0a67 	vmov.f32	s0, s15
 8007004:	f7ff fbf2 	bl	80067ec <limAngle>
 8007008:	eef0 7a40 	vmov.f32	s15, s0
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <MPU_calcAttitude+0x164>)
 800700e:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y = limAngle(attitude.y);
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <MPU_calcAttitude+0x164>)
 8007014:	edd3 7a02 	vldr	s15, [r3, #8]
 8007018:	eeb0 0a67 	vmov.f32	s0, s15
 800701c:	f7ff fbe6 	bl	80067ec <limAngle>
 8007020:	eef0 7a40 	vmov.f32	s15, s0
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <MPU_calcAttitude+0x164>)
 8007026:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001154 	.word	0x20001154
 8007038:	20000020 	.word	0x20000020
 800703c:	20001184 	.word	0x20001184
 8007040:	2000113c 	.word	0x2000113c
 8007044:	20001138 	.word	0x20001138

08007048 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e00c      	b.n	8007072 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	fa22 f103 	lsr.w	r1, r2, r3
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	b2ca      	uxtb	r2, r1
 800706a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d9ef      	bls.n	8007058 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	e010      	b.n	80070be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	00d2      	lsls	r2, r2, #3
 80070ae:	fa01 f202 	lsl.w	r2, r1, r2
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d9eb      	bls.n	800709c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
	...

080070d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	0800ff30 	.word	0x0800ff30

080070f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ffe5 	bl	80070d4 <_ZN3ros11Subscriber_C1Ev>
 800710a:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3310      	adds	r3, #16
 8007114:	4618      	mov	r0, r3
 8007116:	f7fc ffad 	bl	8004074 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
  };
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	0800fe44 	.word	0x0800fe44

0800713c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff ffc1 	bl	80070d4 <_ZN3ros11Subscriber_C1Ev>
 8007152:	4a0b      	ldr	r2, [pc, #44]	; (8007180 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	330c      	adds	r3, #12
 800715c:	4618      	mov	r0, r3
 800715e:	f7fc f939 	bl	80033d4 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]
  };
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800fe2c 	.word	0x0800fe2c

08007184 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
  }
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fb fd95 	bl	8002cd8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e01d      	b.n	8007222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d111      	bne.n	800721c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	60da      	str	r2, [r3, #12]
        return true;
 8007218:	2301      	movs	r3, #1
 800721a:	e006      	b.n	800722a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b18      	cmp	r3, #24
 8007226:	ddde      	ble.n	80071e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8007228:	2300      	movs	r3, #0
  }
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e018      	b.n	8007278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10d      	bne.n	8007272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	605a      	str	r2, [r3, #4]
        return true;
 800726e:	2301      	movs	r3, #1
 8007270:	e006      	b.n	8007280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b18      	cmp	r3, #24
 800727c:	dde3      	ble.n	8007246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800727e:	2300      	movs	r3, #0
  }
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3304      	adds	r3, #4
 800729a:	4618      	mov	r0, r3
 800729c:	f7fb fe0a 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 80072a0:	60f8      	str	r0, [r7, #12]
    Time current_time;
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fa fe60 	bl	8001f68 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4a14      	ldr	r2, [pc, #80]	; (80072fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	099a      	lsrs	r2, r3, #6
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80072b8:	441a      	add	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 80072c2:	fba3 1302 	umull	r1, r3, r3, r2
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072cc:	fb01 f303 	mul.w	r3, r1, r3
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 80072d4:	fb03 f202 	mul.w	r2, r3, r2
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80072de:	441a      	add	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7f9 fdae 	bl	8000e4c <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 80072f0:	bf00      	nop
  }
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	10624dd3 	.word	0x10624dd3
 8007300:	000f4240 	.word	0x000f4240

08007304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	4618      	mov	r0, r3
 8007312:	f7fb fdcf 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 8007316:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8007326:	4293      	cmp	r3, r2
 8007328:	d903      	bls.n	8007332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d903      	bls.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4618      	mov	r0, r3
 8007360:	f7fb fda8 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007370:	429a      	cmp	r2, r3
 8007372:	bf8c      	ite	hi
 8007374:	2301      	movhi	r3, #1
 8007376:	2300      	movls	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800737e:	f06f 0301 	mvn.w	r3, #1
 8007382:	e194      	b.n	80076ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f7fb fcc1 	bl	8002d10 <_ZN13STM32Hardware4readEv>
 800738e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f2c0 8174 	blt.w	8007680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	441a      	add	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	d11e      	bne.n	80073f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80073b8:	1c59      	adds	r1, r3, #1
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	b2d1      	uxtb	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4413      	add	r3, r2
 80073c8:	460a      	mov	r2, r1
 80073ca:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1b4      	bne.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2208      	movs	r2, #8
 80073ea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80073ee:	e7af      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d128      	bne.n	800744c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2bff      	cmp	r3, #255	; 0xff
 80073fe:	d10d      	bne.n	800741c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f103 0214 	add.w	r2, r3, #20
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800741a:	e799      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fb fd47 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	bf8c      	ite	hi
 8007434:	2301      	movhi	r3, #1
 8007436:	2300      	movls	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d088      	beq.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8007446:	f06f 0301 	mvn.w	r3, #1
 800744a:	e130      	b.n	80076ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007452:	2b01      	cmp	r3, #1
 8007454:	d118      	bne.n	8007488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2bfe      	cmp	r3, #254	; 0xfe
 800745a:	d107      	bne.n	800746c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800746a:	e771      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800747a:	2b00      	cmp	r3, #0
 800747c:	f47f af68 	bne.w	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f930 	bl	80076e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8007486:	e763      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800748e:	2b02      	cmp	r3, #2
 8007490:	d113      	bne.n	80074ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80074b8:	e74a      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d110      	bne.n	80074e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80074e4:	e734      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d116      	bne.n	800751e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80074f6:	425a      	negs	r2, r3
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	bf58      	it	pl
 80074fe:	4253      	negpl	r3, r2
 8007500:	2bff      	cmp	r3, #255	; 0xff
 8007502:	d107      	bne.n	8007514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007512:	e71d      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800751c:	e718      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007524:	2b05      	cmp	r3, #5
 8007526:	d10f      	bne.n	8007548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8007546:	e703      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800754e:	2b06      	cmp	r3, #6
 8007550:	d117      	bne.n	8007582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	441a      	add	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2207      	movs	r2, #7
 8007568:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f aeec 	bne.w	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2208      	movs	r2, #8
 800757c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007580:	e6e6      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007588:	2b08      	cmp	r3, #8
 800758a:	f47f aee1 	bne.w	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800759c:	425a      	negs	r2, r3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	bf58      	it	pl
 80075a4:	4253      	negpl	r3, r2
 80075a6:	2bff      	cmp	r3, #255	; 0xff
 80075a8:	f47f aed2 	bne.w	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d110      	bne.n	80075d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f895 	bl	80076e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f8b0 	bl	8007722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	e06a      	b.n	80076ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075de:	2b0a      	cmp	r3, #10
 80075e0:	d107      	bne.n	80075f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f978 	bl	80078e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80075f0:	e6ae      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80075f8:	2b06      	cmp	r3, #6
 80075fa:	d10e      	bne.n	800761a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fb f971 	bl	80028f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007618:	e69a      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007620:	2b0b      	cmp	r3, #11
 8007622:	d104      	bne.n	800762e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800762c:	e690      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007634:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f43f ae84 	beq.w	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800764e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007658:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007662:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f202 2222 	addw	r2, r2, #546	; 0x222
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800767a:	4611      	mov	r1, r2
 800767c:	4798      	blx	r3
    while (true)
 800767e:	e667      	b.n	8007350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8007680:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00f      	beq.n	80076ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800769a:	4293      	cmp	r3, r2
 800769c:	d906      	bls.n	80076ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f821 	bl	80076e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80076ac:	2300      	movs	r3, #0
  }
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7f8 fedc 	bl	800047c <__aeabi_i2d>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	ec43 2b10 	vmov	d0, r2, r3
 80076cc:	f007 fdf4 	bl	800f2b8 <sqrt>
 80076d0:	eeb0 7a40 	vmov.f32	s14, s0
 80076d4:	eef0 7a60 	vmov.f32	s15, s1
 80076d8:	eeb0 0a47 	vmov.f32	s0, s14
 80076dc:	eef0 0a67 	vmov.f32	s1, s15
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fa fc5a 	bl	8001fac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f107 020c 	add.w	r2, r7, #12
 8007702:	210a      	movs	r1, #10
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
    rt_time = hardware_.time();
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3304      	adds	r3, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f7fb fbd1 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800771a:	bf00      	nop
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8007722:	b590      	push	{r4, r7, lr}
 8007724:	b08b      	sub	sp, #44	; 0x2c
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800772a:	f107 030c 	add.w	r3, r7, #12
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa fd2c 	bl	800218c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
 8007738:	e062      	b.n	8007800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d056      	beq.n	80077fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	b29b      	uxth	r3, r3
 800775e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	6859      	ldr	r1, [r3, #4]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4608      	mov	r0, r1
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4608      	mov	r0, r1
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80077ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077d2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681c      	ldr	r4, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fb fa3a 	bl	8002c62 <_ZN3ros9Publisher15getEndpointTypeEv>
 80077ee:	4601      	mov	r1, r0
 80077f0:	f107 030c 	add.w	r3, r7, #12
 80077f4:	461a      	mov	r2, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	3301      	adds	r3, #1
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	2b18      	cmp	r3, #24
 8007804:	dd99      	ble.n	800773a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	e05e      	b.n	80078ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007810:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d053      	beq.n	80078c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b29b      	uxth	r3, r3
 800782c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007842:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4608      	mov	r0, r1
 800785e:	4798      	blx	r3
 8007860:	4603      	mov	r3, r0
 8007862:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007868:	f202 2222 	addw	r2, r2, #546	; 0x222
 800786c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007874:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4608      	mov	r0, r1
 8007884:	4798      	blx	r3
 8007886:	4603      	mov	r3, r0
 8007888:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800788a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681c      	ldr	r4, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800789e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3304      	adds	r3, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4608      	mov	r0, r1
 80078b6:	4798      	blx	r3
 80078b8:	4601      	mov	r1, r0
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	461a      	mov	r2, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	3301      	adds	r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b18      	cmp	r3, #24
 80078ce:	dd9d      	ble.n	800780c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80078d8:	bf00      	nop
 80078da:	372c      	adds	r7, #44	; 0x2c
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd90      	pop	{r4, r7, pc}

080078e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80078ea:	f107 0308 	add.w	r3, r7, #8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fa fb5c 	bl	8001fac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fb fadb 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 80078fe:	4602      	mov	r2, r0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f7fa fbbb 	bl	800208c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	4915      	ldr	r1, [pc, #84]	; (8007970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800791c:	fba1 1303 	umull	r1, r3, r1, r3
 8007920:	099b      	lsrs	r3, r3, #6
 8007922:	4413      	add	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007926:	6939      	ldr	r1, [r7, #16]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800792c:	fba3 0302 	umull	r0, r3, r3, r2
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007936:	fb00 f303 	mul.w	r3, r0, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	440b      	add	r3, r1
 8007944:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007946:	f107 0308 	add.w	r3, r7, #8
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f8a6 	bl	8007aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb faab 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 800795e:	4602      	mov	r2, r0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8007966:	bf00      	nop
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	10624dd3 	.word	0x10624dd3
 8007974:	000f4240 	.word	0x000f4240

08007978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b63      	cmp	r3, #99	; 0x63
 8007988:	dd09      	ble.n	800799e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007990:	f083 0301 	eor.w	r3, r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800799a:	2300      	movs	r3, #0
 800799c:	e079      	b.n	8007a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80079aa:	3207      	adds	r2, #7
 80079ac:	4611      	mov	r1, r2
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	22fe      	movs	r2, #254	; 0xfe
 80079c0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80079ea:	4413      	add	r3, r2
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	43db      	mvns	r3, r3
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	b21b      	sxth	r3, r3
 8007a06:	121b      	asrs	r3, r3, #8
 8007a08:	b21b      	sxth	r3, r3
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007a16:	2305      	movs	r3, #5
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e00c      	b.n	8007a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3301      	adds	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	3306      	adds	r3, #6
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	dded      	ble.n	8007a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	3307      	adds	r3, #7
 8007a44:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	425a      	negs	r2, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	bf58      	it	pl
 8007a50:	4253      	negpl	r3, r2
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	1c59      	adds	r1, r3, #1
 8007a58:	6179      	str	r1, [r7, #20]
 8007a5a:	43d2      	mvns	r2, r2
 8007a5c:	b2d1      	uxtb	r1, r2
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	460a      	mov	r2, r1
 8007a64:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6e:	dc0a      	bgt.n	8007a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	1d18      	adds	r0, r3, #4
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7fb f9d3 	bl	8002e28 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	e005      	b.n	8007a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8007a86:	4905      	ldr	r1, [pc, #20]	; (8007a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f849 	bl	8007b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	0800fda4 	.word	0x0800fda4

08007aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fb fa00 	bl	8002eb4 <_ZN13STM32Hardware4timeEv>
 8007ab4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4915      	ldr	r1, [pc, #84]	; (8007b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8007abe:	fba1 1303 	umull	r1, r3, r1, r3
 8007ac2:	099b      	lsrs	r3, r3, #6
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	1e5a      	subs	r2, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8007ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8007ada:	099b      	lsrs	r3, r3, #6
 8007adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ae0:	fb00 f303 	mul.w	r3, r0, r3
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8007ae8:	fb02 f303 	mul.w	r3, r2, r3
 8007aec:	1aca      	subs	r2, r1, r3
 8007aee:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8007af0:	4413      	add	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7f9 f9a0 	bl	8000e4c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	10624dd3 	.word	0x10624dd3
 8007b18:	000f4240 	.word	0x000f4240
 8007b1c:	3b9aca00 	.word	0x3b9aca00

08007b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	2103      	movs	r1, #3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f804 	bl	8007b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	460b      	mov	r3, r1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007b4a:	f107 0314 	add.w	r3, r7, #20
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fa fce0 	bl	8002514 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f107 0214 	add.w	r2, r7, #20
 8007b66:	2107      	movs	r1, #7
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	4798      	blx	r3
  }
 8007b6c:	bf00      	nop
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <_Z41__static_initialization_and_destruction_0ii>:
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d131      	bne.n	8007be8 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d12c      	bne.n	8007be8 <_Z41__static_initialization_and_destruction_0ii+0x74>
ros::NodeHandle nh;
 8007b8e:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007b90:	f7fe f972 	bl	8005e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32MultiArray vel_set_msg;
 8007b94:	4817      	ldr	r0, [pc, #92]	; (8007bf4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007b96:	f7fb fc1d 	bl	80033d4 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray vel_enc_msg;
 8007b9a:	4817      	ldr	r0, [pc, #92]	; (8007bf8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007b9c:	f7fb fc1a 	bl	80033d4 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray PID_msg;
 8007ba0:	4816      	ldr	r0, [pc, #88]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007ba2:	f7fb fc17 	bl	80033d4 <_ZN8std_msgs17Float32MultiArrayC1Ev>
sensor_msgs::Imu imu_msg;
 8007ba6:	4816      	ldr	r0, [pc, #88]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007ba8:	f7fd fb3a 	bl	8005220 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher vel_set("vel_set", &vel_set_msg);
 8007bac:	2300      	movs	r3, #0
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007bb0:	4914      	ldr	r1, [pc, #80]	; (8007c04 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007bb2:	4815      	ldr	r0, [pc, #84]	; (8007c08 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007bb4:	f7fb f82a 	bl	8002c0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher vel_enc("vel_enc", &vel_enc_msg);
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4a0f      	ldr	r2, [pc, #60]	; (8007bf8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007bbc:	4913      	ldr	r1, [pc, #76]	; (8007c0c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007bbe:	4814      	ldr	r0, [pc, #80]	; (8007c10 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007bc0:	f7fb f824 	bl	8002c0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu("imu/raw", &imu_msg);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007bc8:	4912      	ldr	r1, [pc, #72]	; (8007c14 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007bca:	4813      	ldr	r0, [pc, #76]	; (8007c18 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007bcc:	f7fb f81e 	bl	8002c0c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel("cmd_vel",&cmd_vel_callback);
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4a12      	ldr	r2, [pc, #72]	; (8007c1c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007bd4:	4912      	ldr	r1, [pc, #72]	; (8007c20 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007bd6:	4813      	ldr	r0, [pc, #76]	; (8007c24 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007bd8:	f7ff fa8c 	bl	80070f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> cmd_PID("cmd_PID",&cmd_PID_callback);
 8007bdc:	2301      	movs	r3, #1
 8007bde:	4a12      	ldr	r2, [pc, #72]	; (8007c28 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007be0:	4912      	ldr	r1, [pc, #72]	; (8007c2c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007be2:	4813      	ldr	r0, [pc, #76]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007be4:	f7ff faaa 	bl	800713c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	2000052c 	.word	0x2000052c
 8007bf4:	20000e68 	.word	0x20000e68
 8007bf8:	20000e98 	.word	0x20000e98
 8007bfc:	20000ec8 	.word	0x20000ec8
 8007c00:	20000ef8 	.word	0x20000ef8
 8007c04:	0800fde0 	.word	0x0800fde0
 8007c08:	20001050 	.word	0x20001050
 8007c0c:	0800fde8 	.word	0x0800fde8
 8007c10:	20001064 	.word	0x20001064
 8007c14:	0800fdf0 	.word	0x0800fdf0
 8007c18:	20001078 	.word	0x20001078
 8007c1c:	0800615d 	.word	0x0800615d
 8007c20:	0800fdf8 	.word	0x0800fdf8
 8007c24:	20001090 	.word	0x20001090
 8007c28:	080063fd 	.word	0x080063fd
 8007c2c:	0800fe00 	.word	0x0800fe00
 8007c30:	200010f0 	.word	0x200010f0

08007c34 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	330c      	adds	r3, #12
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fb fc57 	bl	80034f8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	320c      	adds	r2, #12
 8007c52:	4610      	mov	r0, r2
 8007c54:	4798      	blx	r3
  }
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	330c      	adds	r3, #12
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fb fcc4 	bl	8003610 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8007c88:	4603      	mov	r3, r0
  }
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fb fcc4 	bl	800362c <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8007ca4:	4603      	mov	r3, r0
  }
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3310      	adds	r3, #16
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fc fa1a 	bl	80040f8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	3210      	adds	r2, #16
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
  }
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3310      	adds	r3, #16
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fc fa21 	bl	8004144 <_ZN13geometry_msgs5Twist7getTypeEv>
 8007d02:	4603      	mov	r3, r0
  }
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3310      	adds	r3, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fc fa21 	bl	8004160 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8007d1e:	4603      	mov	r3, r0
  }
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
    return configured_;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <_GLOBAL__sub_I_nh>:
 8007d42:	b580      	push	{r7, lr}
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	f7ff ff12 	bl	8007b74 <_Z41__static_initialization_and_destruction_0ii>
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d68:	6453      	str	r3, [r2, #68]	; 0x44
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d72:	607b      	str	r3, [r7, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d76:	2300      	movs	r3, #0
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	4a08      	ldr	r2, [pc, #32]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d84:	6413      	str	r3, [r2, #64]	; 0x40
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <HAL_MspInit+0x4c>)
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40023800 	.word	0x40023800

08007da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dac:	f107 0314 	add.w	r3, r7, #20
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	605a      	str	r2, [r3, #4]
 8007db6:	609a      	str	r2, [r3, #8]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <HAL_I2C_MspInit+0xa4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d13c      	bne.n	8007e40 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8007de2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007de8:	2312      	movs	r3, #18
 8007dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007df0:	2303      	movs	r3, #3
 8007df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007df4:	2304      	movs	r3, #4
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007df8:	f107 0314 	add.w	r3, r7, #20
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4814      	ldr	r0, [pc, #80]	; (8007e50 <HAL_I2C_MspInit+0xac>)
 8007e00:	f001 fc3c 	bl	800967c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	4a0f      	ldr	r2, [pc, #60]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e12:	6413      	str	r3, [r2, #64]	; 0x40
 8007e14:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <HAL_I2C_MspInit+0xa8>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	201f      	movs	r0, #31
 8007e26:	f000 fd0a 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007e2a:	201f      	movs	r0, #31
 8007e2c:	f000 fd23 	bl	8008876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	2020      	movs	r0, #32
 8007e36:	f000 fd02 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007e3a:	2020      	movs	r0, #32
 8007e3c:	f000 fd1b 	bl	8008876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007e40:	bf00      	nop
 8007e42:	3728      	adds	r7, #40	; 0x28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40005400 	.word	0x40005400
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40020400 	.word	0x40020400

08007e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a38      	ldr	r2, [pc, #224]	; (8007f44 <HAL_TIM_Base_MspInit+0xf0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d116      	bne.n	8007e94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	4a36      	ldr	r2, [pc, #216]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	6453      	str	r3, [r2, #68]	; 0x44
 8007e76:	4b34      	ldr	r3, [pc, #208]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	2018      	movs	r0, #24
 8007e88:	f000 fcd9 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007e8c:	2018      	movs	r0, #24
 8007e8e:	f000 fcf2 	bl	8008876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8007e92:	e052      	b.n	8007f3a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM6)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <HAL_TIM_Base_MspInit+0xf8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d116      	bne.n	8007ecc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007ea8:	f043 0310 	orr.w	r3, r3, #16
 8007eac:	6413      	str	r3, [r2, #64]	; 0x40
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	2036      	movs	r0, #54	; 0x36
 8007ec0:	f000 fcbd 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ec4:	2036      	movs	r0, #54	; 0x36
 8007ec6:	f000 fcd6 	bl	8008876 <HAL_NVIC_EnableIRQ>
}
 8007eca:	e036      	b.n	8007f3a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <HAL_TIM_Base_MspInit+0xfc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d116      	bne.n	8007f04 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4b1b      	ldr	r3, [pc, #108]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	4a1a      	ldr	r2, [pc, #104]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007ee0:	f043 0320 	orr.w	r3, r3, #32
 8007ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	2037      	movs	r0, #55	; 0x37
 8007ef8:	f000 fca1 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007efc:	2037      	movs	r0, #55	; 0x37
 8007efe:	f000 fcba 	bl	8008876 <HAL_NVIC_EnableIRQ>
}
 8007f02:	e01a      	b.n	8007f3a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a12      	ldr	r2, [pc, #72]	; (8007f54 <HAL_TIM_Base_MspInit+0x100>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d115      	bne.n	8007f3a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	4a0c      	ldr	r2, [pc, #48]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <HAL_TIM_Base_MspInit+0xf4>)
 8007f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	2018      	movs	r0, #24
 8007f30:	f000 fc85 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007f34:	2018      	movs	r0, #24
 8007f36:	f000 fc9e 	bl	8008876 <HAL_NVIC_EnableIRQ>
}
 8007f3a:	bf00      	nop
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40001000 	.word	0x40001000
 8007f50:	40001400 	.word	0x40001400
 8007f54:	40014000 	.word	0x40014000

08007f58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b092      	sub	sp, #72	; 0x48
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f78:	d14a      	bne.n	8008010 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f7e:	4b80      	ldr	r3, [pc, #512]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	4a7f      	ldr	r2, [pc, #508]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6413      	str	r3, [r2, #64]	; 0x40
 8007f8a:	4b7d      	ldr	r3, [pc, #500]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	633b      	str	r3, [r7, #48]	; 0x30
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f96:	2300      	movs	r3, #0
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f9a:	4b79      	ldr	r3, [pc, #484]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	4a78      	ldr	r2, [pc, #480]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa6:	4b76      	ldr	r3, [pc, #472]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fb6:	4b72      	ldr	r3, [pc, #456]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fba:	4a71      	ldr	r2, [pc, #452]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007fbc:	f043 0302 	orr.w	r3, r3, #2
 8007fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fc2:	4b6f      	ldr	r3, [pc, #444]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007fce:	2320      	movs	r3, #32
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4866      	ldr	r0, [pc, #408]	; (8008184 <HAL_TIM_Encoder_MspInit+0x22c>)
 8007fea:	f001 fb47 	bl	800967c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007fee:	2308      	movs	r3, #8
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007ffe:	2301      	movs	r3, #1
 8008000:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008002:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008006:	4619      	mov	r1, r3
 8008008:	485f      	ldr	r0, [pc, #380]	; (8008188 <HAL_TIM_Encoder_MspInit+0x230>)
 800800a:	f001 fb37 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800800e:	e0b3      	b.n	8008178 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM3)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a5d      	ldr	r2, [pc, #372]	; (800818c <HAL_TIM_Encoder_MspInit+0x234>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d12c      	bne.n	8008074 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800801a:	2300      	movs	r3, #0
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
 800801e:	4b58      	ldr	r3, [pc, #352]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	4a57      	ldr	r2, [pc, #348]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	6413      	str	r3, [r2, #64]	; 0x40
 800802a:	4b55      	ldr	r3, [pc, #340]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008036:	2300      	movs	r3, #0
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	4b51      	ldr	r3, [pc, #324]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	4a50      	ldr	r2, [pc, #320]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	6313      	str	r3, [r2, #48]	; 0x30
 8008046:	4b4e      	ldr	r3, [pc, #312]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008052:	23c0      	movs	r3, #192	; 0xc0
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008056:	2302      	movs	r3, #2
 8008058:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800805a:	2301      	movs	r3, #1
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800805e:	2300      	movs	r3, #0
 8008060:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008062:	2302      	movs	r3, #2
 8008064:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800806a:	4619      	mov	r1, r3
 800806c:	4845      	ldr	r0, [pc, #276]	; (8008184 <HAL_TIM_Encoder_MspInit+0x22c>)
 800806e:	f001 fb05 	bl	800967c <HAL_GPIO_Init>
}
 8008072:	e081      	b.n	8008178 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM4)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a45      	ldr	r2, [pc, #276]	; (8008190 <HAL_TIM_Encoder_MspInit+0x238>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d14b      	bne.n	8008116 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	4b3f      	ldr	r3, [pc, #252]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	4a3e      	ldr	r2, [pc, #248]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	6413      	str	r3, [r2, #64]	; 0x40
 800808e:	4b3c      	ldr	r3, [pc, #240]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	4b38      	ldr	r3, [pc, #224]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4a37      	ldr	r2, [pc, #220]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080a4:	f043 0308 	orr.w	r3, r3, #8
 80080a8:	6313      	str	r3, [r2, #48]	; 0x30
 80080aa:	4b35      	ldr	r3, [pc, #212]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	4b31      	ldr	r3, [pc, #196]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	4a30      	ldr	r2, [pc, #192]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080c0:	f043 0302 	orr.w	r3, r3, #2
 80080c4:	6313      	str	r3, [r2, #48]	; 0x30
 80080c6:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80080d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d8:	2302      	movs	r3, #2
 80080da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080dc:	2301      	movs	r3, #1
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e0:	2300      	movs	r3, #0
 80080e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80080e4:	2302      	movs	r3, #2
 80080e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080ec:	4619      	mov	r1, r3
 80080ee:	4829      	ldr	r0, [pc, #164]	; (8008194 <HAL_TIM_Encoder_MspInit+0x23c>)
 80080f0:	f001 fac4 	bl	800967c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f8:	2302      	movs	r3, #2
 80080fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080fc:	2301      	movs	r3, #1
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008100:	2300      	movs	r3, #0
 8008102:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008104:	2302      	movs	r3, #2
 8008106:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800810c:	4619      	mov	r1, r3
 800810e:	481e      	ldr	r0, [pc, #120]	; (8008188 <HAL_TIM_Encoder_MspInit+0x230>)
 8008110:	f001 fab4 	bl	800967c <HAL_GPIO_Init>
}
 8008114:	e030      	b.n	8008178 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM5)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1f      	ldr	r2, [pc, #124]	; (8008198 <HAL_TIM_Encoder_MspInit+0x240>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d12b      	bne.n	8008178 <HAL_TIM_Encoder_MspInit+0x220>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	4b16      	ldr	r3, [pc, #88]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	4a15      	ldr	r2, [pc, #84]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 800812a:	f043 0308 	orr.w	r3, r3, #8
 800812e:	6413      	str	r3, [r2, #64]	; 0x40
 8008130:	4b13      	ldr	r3, [pc, #76]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 8008146:	f043 0301 	orr.w	r3, r3, #1
 800814a:	6313      	str	r3, [r2, #48]	; 0x30
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_TIM_Encoder_MspInit+0x228>)
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008158:	2303      	movs	r3, #3
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815c:	2302      	movs	r3, #2
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008160:	2301      	movs	r3, #1
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008164:	2300      	movs	r3, #0
 8008166:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008168:	2302      	movs	r3, #2
 800816a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800816c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008170:	4619      	mov	r1, r3
 8008172:	4804      	ldr	r0, [pc, #16]	; (8008184 <HAL_TIM_Encoder_MspInit+0x22c>)
 8008174:	f001 fa82 	bl	800967c <HAL_GPIO_Init>
}
 8008178:	bf00      	nop
 800817a:	3748      	adds	r7, #72	; 0x48
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40023800 	.word	0x40023800
 8008184:	40020000 	.word	0x40020000
 8008188:	40020400 	.word	0x40020400
 800818c:	40000400 	.word	0x40000400
 8008190:	40000800 	.word	0x40000800
 8008194:	40020c00 	.word	0x40020c00
 8008198:	40000c00 	.word	0x40000c00

0800819c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a4:	f107 030c 	add.w	r3, r7, #12
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	609a      	str	r2, [r3, #8]
 80081b0:	60da      	str	r2, [r3, #12]
 80081b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a12      	ldr	r2, [pc, #72]	; (8008204 <HAL_TIM_MspPostInit+0x68>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d11e      	bne.n	80081fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	4b11      	ldr	r3, [pc, #68]	; (8008208 <HAL_TIM_MspPostInit+0x6c>)
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	4a10      	ldr	r2, [pc, #64]	; (8008208 <HAL_TIM_MspPostInit+0x6c>)
 80081c8:	f043 0310 	orr.w	r3, r3, #16
 80081cc:	6313      	str	r3, [r2, #48]	; 0x30
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <HAL_TIM_MspPostInit+0x6c>)
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	60bb      	str	r3, [r7, #8]
 80081d8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80081da:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80081de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e0:	2302      	movs	r3, #2
 80081e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80081ec:	2301      	movs	r3, #1
 80081ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081f0:	f107 030c 	add.w	r3, r7, #12
 80081f4:	4619      	mov	r1, r3
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <HAL_TIM_MspPostInit+0x70>)
 80081f8:	f001 fa40 	bl	800967c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80081fc:	bf00      	nop
 80081fe:	3720      	adds	r7, #32
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40010000 	.word	0x40010000
 8008208:	40023800 	.word	0x40023800
 800820c:	40021000 	.word	0x40021000

08008210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	; 0x28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a4c      	ldr	r2, [pc, #304]	; (8008360 <HAL_UART_MspInit+0x150>)
 800822e:	4293      	cmp	r3, r2
 8008230:	f040 8091 	bne.w	8008356 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008234:	2300      	movs	r3, #0
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	4b4a      	ldr	r3, [pc, #296]	; (8008364 <HAL_UART_MspInit+0x154>)
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	4a49      	ldr	r2, [pc, #292]	; (8008364 <HAL_UART_MspInit+0x154>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008242:	6413      	str	r3, [r2, #64]	; 0x40
 8008244:	4b47      	ldr	r3, [pc, #284]	; (8008364 <HAL_UART_MspInit+0x154>)
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	4b43      	ldr	r3, [pc, #268]	; (8008364 <HAL_UART_MspInit+0x154>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	4a42      	ldr	r2, [pc, #264]	; (8008364 <HAL_UART_MspInit+0x154>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6313      	str	r3, [r2, #48]	; 0x30
 8008260:	4b40      	ldr	r3, [pc, #256]	; (8008364 <HAL_UART_MspInit+0x154>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800826c:	230c      	movs	r3, #12
 800826e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008270:	2302      	movs	r3, #2
 8008272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008278:	2303      	movs	r3, #3
 800827a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800827c:	2307      	movs	r3, #7
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4619      	mov	r1, r3
 8008286:	4838      	ldr	r0, [pc, #224]	; (8008368 <HAL_UART_MspInit+0x158>)
 8008288:	f001 f9f8 	bl	800967c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800828c:	4b37      	ldr	r3, [pc, #220]	; (800836c <HAL_UART_MspInit+0x15c>)
 800828e:	4a38      	ldr	r2, [pc, #224]	; (8008370 <HAL_UART_MspInit+0x160>)
 8008290:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008292:	4b36      	ldr	r3, [pc, #216]	; (800836c <HAL_UART_MspInit+0x15c>)
 8008294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008298:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800829a:	4b34      	ldr	r3, [pc, #208]	; (800836c <HAL_UART_MspInit+0x15c>)
 800829c:	2200      	movs	r2, #0
 800829e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082a0:	4b32      	ldr	r3, [pc, #200]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80082a6:	4b31      	ldr	r3, [pc, #196]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082ae:	4b2f      	ldr	r3, [pc, #188]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082b4:	4b2d      	ldr	r3, [pc, #180]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80082ba:	4b2c      	ldr	r3, [pc, #176]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80082c2:	4b2a      	ldr	r3, [pc, #168]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80082c8:	4b28      	ldr	r3, [pc, #160]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80082ce:	4827      	ldr	r0, [pc, #156]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082d0:	f000 faec 	bl	80088ac <HAL_DMA_Init>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80082da:	f7f9 fdf7 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a22      	ldr	r2, [pc, #136]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38
 80082e4:	4a21      	ldr	r2, [pc, #132]	; (800836c <HAL_UART_MspInit+0x15c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80082ea:	4b22      	ldr	r3, [pc, #136]	; (8008374 <HAL_UART_MspInit+0x164>)
 80082ec:	4a22      	ldr	r2, [pc, #136]	; (8008378 <HAL_UART_MspInit+0x168>)
 80082ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80082f0:	4b20      	ldr	r3, [pc, #128]	; (8008374 <HAL_UART_MspInit+0x164>)
 80082f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <HAL_UART_MspInit+0x164>)
 80082fa:	2240      	movs	r2, #64	; 0x40
 80082fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008300:	2200      	movs	r2, #0
 8008302:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008304:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800830a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800830c:	4b19      	ldr	r3, [pc, #100]	; (8008374 <HAL_UART_MspInit+0x164>)
 800830e:	2200      	movs	r2, #0
 8008310:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008312:	4b18      	ldr	r3, [pc, #96]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008314:	2200      	movs	r2, #0
 8008316:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <HAL_UART_MspInit+0x164>)
 800831a:	2200      	movs	r2, #0
 800831c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800831e:	4b15      	ldr	r3, [pc, #84]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008320:	2200      	movs	r2, #0
 8008322:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008326:	2200      	movs	r2, #0
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800832a:	4812      	ldr	r0, [pc, #72]	; (8008374 <HAL_UART_MspInit+0x164>)
 800832c:	f000 fabe 	bl	80088ac <HAL_DMA_Init>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008336:	f7f9 fdc9 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a0d      	ldr	r2, [pc, #52]	; (8008374 <HAL_UART_MspInit+0x164>)
 800833e:	635a      	str	r2, [r3, #52]	; 0x34
 8008340:	4a0c      	ldr	r2, [pc, #48]	; (8008374 <HAL_UART_MspInit+0x164>)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	2026      	movs	r0, #38	; 0x26
 800834c:	f000 fa77 	bl	800883e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008350:	2026      	movs	r0, #38	; 0x26
 8008352:	f000 fa90 	bl	8008876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008356:	bf00      	nop
 8008358:	3728      	adds	r7, #40	; 0x28
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40004400 	.word	0x40004400
 8008364:	40023800 	.word	0x40023800
 8008368:	40020000 	.word	0x40020000
 800836c:	20000384 	.word	0x20000384
 8008370:	40026088 	.word	0x40026088
 8008374:	200003e4 	.word	0x200003e4
 8008378:	400260a0 	.word	0x400260a0

0800837c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008380:	e7fe      	b.n	8008380 <NMI_Handler+0x4>

08008382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008386:	e7fe      	b.n	8008386 <HardFault_Handler+0x4>

08008388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800838c:	e7fe      	b.n	800838c <MemManage_Handler+0x4>

0800838e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008392:	e7fe      	b.n	8008392 <BusFault_Handler+0x4>

08008394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008398:	e7fe      	b.n	8008398 <UsageFault_Handler+0x4>

0800839a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083b6:	b480      	push	{r7}
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083c8:	f000 f91a 	bl	8008600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80083d4:	4802      	ldr	r0, [pc, #8]	; (80083e0 <DMA1_Stream5_IRQHandler+0x10>)
 80083d6:	f000 fc01 	bl	8008bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80083da:	bf00      	nop
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000384 	.word	0x20000384

080083e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80083e8:	4802      	ldr	r0, [pc, #8]	; (80083f4 <DMA1_Stream6_IRQHandler+0x10>)
 80083ea:	f000 fbf7 	bl	8008bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200003e4 	.word	0x200003e4

080083f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083fc:	4803      	ldr	r0, [pc, #12]	; (800840c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80083fe:	f004 fed3 	bl	800d1a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8008402:	4803      	ldr	r0, [pc, #12]	; (8008410 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8008404:	f004 fed0 	bl	800d1a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8008408:	bf00      	nop
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000100 	.word	0x20000100
 8008410:	200002f8 	.word	0x200002f8

08008414 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008418:	4802      	ldr	r0, [pc, #8]	; (8008424 <I2C1_EV_IRQHandler+0x10>)
 800841a:	f001 ff49 	bl	800a2b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800841e:	bf00      	nop
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200000ac 	.word	0x200000ac

08008428 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800842c:	4802      	ldr	r0, [pc, #8]	; (8008438 <I2C1_ER_IRQHandler+0x10>)
 800842e:	f002 f892 	bl	800a556 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008432:	bf00      	nop
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200000ac 	.word	0x200000ac

0800843c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008440:	4802      	ldr	r0, [pc, #8]	; (800844c <USART2_IRQHandler+0x10>)
 8008442:	f005 fe59 	bl	800e0f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008446:	bf00      	nop
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000340 	.word	0x20000340

08008450 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008454:	4802      	ldr	r0, [pc, #8]	; (8008460 <TIM6_DAC_IRQHandler+0x10>)
 8008456:	f004 fea7 	bl	800d1a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000268 	.word	0x20000268

08008464 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008468:	4802      	ldr	r0, [pc, #8]	; (8008474 <TIM7_IRQHandler+0x10>)
 800846a:	f004 fe9d 	bl	800d1a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200002b0 	.word	0x200002b0

08008478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <_sbrk+0x5c>)
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <_sbrk+0x60>)
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800848c:	4b13      	ldr	r3, [pc, #76]	; (80084dc <_sbrk+0x64>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d102      	bne.n	800849a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008494:	4b11      	ldr	r3, [pc, #68]	; (80084dc <_sbrk+0x64>)
 8008496:	4a12      	ldr	r2, [pc, #72]	; (80084e0 <_sbrk+0x68>)
 8008498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800849a:	4b10      	ldr	r3, [pc, #64]	; (80084dc <_sbrk+0x64>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d207      	bcs.n	80084b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80084a8:	f007 f9ca 	bl	800f840 <__errno>
 80084ac:	4603      	mov	r3, r0
 80084ae:	220c      	movs	r2, #12
 80084b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80084b2:	f04f 33ff 	mov.w	r3, #4294967295
 80084b6:	e009      	b.n	80084cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <_sbrk+0x64>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <_sbrk+0x64>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	4a05      	ldr	r2, [pc, #20]	; (80084dc <_sbrk+0x64>)
 80084c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084ca:	68fb      	ldr	r3, [r7, #12]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20020000 	.word	0x20020000
 80084d8:	00000400 	.word	0x00000400
 80084dc:	20001198 	.word	0x20001198
 80084e0:	20001308 	.word	0x20001308

080084e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <SystemInit+0x20>)
 80084ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ee:	4a05      	ldr	r2, [pc, #20]	; (8008504 <SystemInit+0x20>)
 80084f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80084f8:	bf00      	nop
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	e000ed00 	.word	0xe000ed00

08008508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008540 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800850c:	480d      	ldr	r0, [pc, #52]	; (8008544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800850e:	490e      	ldr	r1, [pc, #56]	; (8008548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008510:	4a0e      	ldr	r2, [pc, #56]	; (800854c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008514:	e002      	b.n	800851c <LoopCopyDataInit>

08008516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800851a:	3304      	adds	r3, #4

0800851c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800851c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800851e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008520:	d3f9      	bcc.n	8008516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008522:	4a0b      	ldr	r2, [pc, #44]	; (8008550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008524:	4c0b      	ldr	r4, [pc, #44]	; (8008554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008528:	e001      	b.n	800852e <LoopFillZerobss>

0800852a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800852a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800852c:	3204      	adds	r2, #4

0800852e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800852e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008530:	d3fb      	bcc.n	800852a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008532:	f7ff ffd7 	bl	80084e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008536:	f007 f989 	bl	800f84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800853a:	f7f8 ff37 	bl	80013ac <main>
  bx  lr    
 800853e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008548:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800854c:	0801003c 	.word	0x0801003c
  ldr r2, =_sbss
 8008550:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8008554:	20001308 	.word	0x20001308

08008558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008558:	e7fe      	b.n	8008558 <ADC_IRQHandler>
	...

0800855c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008560:	4b0e      	ldr	r3, [pc, #56]	; (800859c <HAL_Init+0x40>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0d      	ldr	r2, [pc, #52]	; (800859c <HAL_Init+0x40>)
 8008566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800856a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <HAL_Init+0x40>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a0a      	ldr	r2, [pc, #40]	; (800859c <HAL_Init+0x40>)
 8008572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <HAL_Init+0x40>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a07      	ldr	r2, [pc, #28]	; (800859c <HAL_Init+0x40>)
 800857e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008584:	2003      	movs	r0, #3
 8008586:	f000 f94f 	bl	8008828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800858a:	200f      	movs	r0, #15
 800858c:	f000 f808 	bl	80085a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008590:	f7ff fbe0 	bl	8007d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40023c00 	.word	0x40023c00

080085a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <HAL_InitTick+0x54>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <HAL_InitTick+0x58>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80085ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f967 	bl	8008892 <HAL_SYSTICK_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e00e      	b.n	80085ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d80a      	bhi.n	80085ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085d4:	2200      	movs	r2, #0
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	f000 f92f 	bl	800883e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085e0:	4a06      	ldr	r2, [pc, #24]	; (80085fc <HAL_InitTick+0x5c>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e000      	b.n	80085ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000024 	.word	0x20000024
 80085f8:	2000002c 	.word	0x2000002c
 80085fc:	20000028 	.word	0x20000028

08008600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <HAL_IncTick+0x20>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	4b06      	ldr	r3, [pc, #24]	; (8008624 <HAL_IncTick+0x24>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4413      	add	r3, r2
 8008610:	4a04      	ldr	r2, [pc, #16]	; (8008624 <HAL_IncTick+0x24>)
 8008612:	6013      	str	r3, [r2, #0]
}
 8008614:	bf00      	nop
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	2000002c 	.word	0x2000002c
 8008624:	2000119c 	.word	0x2000119c

08008628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  return uwTick;
 800862c:	4b03      	ldr	r3, [pc, #12]	; (800863c <HAL_GetTick+0x14>)
 800862e:	681b      	ldr	r3, [r3, #0]
}
 8008630:	4618      	mov	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	2000119c 	.word	0x2000119c

08008640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008648:	f7ff ffee 	bl	8008628 <HAL_GetTick>
 800864c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d005      	beq.n	8008666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800865a:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <HAL_Delay+0x44>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008666:	bf00      	nop
 8008668:	f7ff ffde 	bl	8008628 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	429a      	cmp	r2, r3
 8008676:	d8f7      	bhi.n	8008668 <HAL_Delay+0x28>
  {
  }
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	2000002c 	.word	0x2000002c

08008688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <__NVIC_SetPriorityGrouping+0x44>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086a4:	4013      	ands	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086ba:	4a04      	ldr	r2, [pc, #16]	; (80086cc <__NVIC_SetPriorityGrouping+0x44>)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	60d3      	str	r3, [r2, #12]
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	e000ed00 	.word	0xe000ed00

080086d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <__NVIC_GetPriorityGrouping+0x18>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	f003 0307 	and.w	r3, r3, #7
}
 80086de:	4618      	mov	r0, r3
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	e000ed00 	.word	0xe000ed00

080086ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	db0b      	blt.n	8008716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	f003 021f 	and.w	r2, r3, #31
 8008704:	4907      	ldr	r1, [pc, #28]	; (8008724 <__NVIC_EnableIRQ+0x38>)
 8008706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800870a:	095b      	lsrs	r3, r3, #5
 800870c:	2001      	movs	r0, #1
 800870e:	fa00 f202 	lsl.w	r2, r0, r2
 8008712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	e000e100 	.word	0xe000e100

08008728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008738:	2b00      	cmp	r3, #0
 800873a:	db0a      	blt.n	8008752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	b2da      	uxtb	r2, r3
 8008740:	490c      	ldr	r1, [pc, #48]	; (8008774 <__NVIC_SetPriority+0x4c>)
 8008742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008746:	0112      	lsls	r2, r2, #4
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	440b      	add	r3, r1
 800874c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008750:	e00a      	b.n	8008768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	b2da      	uxtb	r2, r3
 8008756:	4908      	ldr	r1, [pc, #32]	; (8008778 <__NVIC_SetPriority+0x50>)
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	3b04      	subs	r3, #4
 8008760:	0112      	lsls	r2, r2, #4
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	440b      	add	r3, r1
 8008766:	761a      	strb	r2, [r3, #24]
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	e000e100 	.word	0xe000e100
 8008778:	e000ed00 	.word	0xe000ed00

0800877c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800877c:	b480      	push	{r7}
 800877e:	b089      	sub	sp, #36	; 0x24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f1c3 0307 	rsb	r3, r3, #7
 8008796:	2b04      	cmp	r3, #4
 8008798:	bf28      	it	cs
 800879a:	2304      	movcs	r3, #4
 800879c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	3304      	adds	r3, #4
 80087a2:	2b06      	cmp	r3, #6
 80087a4:	d902      	bls.n	80087ac <NVIC_EncodePriority+0x30>
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	3b03      	subs	r3, #3
 80087aa:	e000      	b.n	80087ae <NVIC_EncodePriority+0x32>
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087b0:	f04f 32ff 	mov.w	r2, #4294967295
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	43da      	mvns	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	401a      	ands	r2, r3
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087c4:	f04f 31ff 	mov.w	r1, #4294967295
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	fa01 f303 	lsl.w	r3, r1, r3
 80087ce:	43d9      	mvns	r1, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087d4:	4313      	orrs	r3, r2
         );
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3724      	adds	r7, #36	; 0x24
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
	...

080087e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087f4:	d301      	bcc.n	80087fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087f6:	2301      	movs	r3, #1
 80087f8:	e00f      	b.n	800881a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087fa:	4a0a      	ldr	r2, [pc, #40]	; (8008824 <SysTick_Config+0x40>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3b01      	subs	r3, #1
 8008800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008802:	210f      	movs	r1, #15
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	f7ff ff8e 	bl	8008728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <SysTick_Config+0x40>)
 800880e:	2200      	movs	r2, #0
 8008810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008812:	4b04      	ldr	r3, [pc, #16]	; (8008824 <SysTick_Config+0x40>)
 8008814:	2207      	movs	r2, #7
 8008816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	e000e010 	.word	0xe000e010

08008828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ff29 	bl	8008688 <__NVIC_SetPriorityGrouping>
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	4603      	mov	r3, r0
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008850:	f7ff ff3e 	bl	80086d0 <__NVIC_GetPriorityGrouping>
 8008854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	6978      	ldr	r0, [r7, #20]
 800885c:	f7ff ff8e 	bl	800877c <NVIC_EncodePriority>
 8008860:	4602      	mov	r2, r0
 8008862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008866:	4611      	mov	r1, r2
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ff5d 	bl	8008728 <__NVIC_SetPriority>
}
 800886e:	bf00      	nop
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	4603      	mov	r3, r0
 800887e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff ff31 	bl	80086ec <__NVIC_EnableIRQ>
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7ff ffa2 	bl	80087e4 <SysTick_Config>
 80088a0:	4603      	mov	r3, r0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80088b8:	f7ff feb6 	bl	8008628 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e099      	b.n	80089fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088e8:	e00f      	b.n	800890a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088ea:	f7ff fe9d 	bl	8008628 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b05      	cmp	r3, #5
 80088f6:	d908      	bls.n	800890a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2203      	movs	r2, #3
 8008902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e078      	b.n	80089fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e8      	bne.n	80088ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4b38      	ldr	r3, [pc, #224]	; (8008a04 <HAL_DMA_Init+0x158>)
 8008924:	4013      	ands	r3, r2
 8008926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800894e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4313      	orrs	r3, r2
 800895a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b04      	cmp	r3, #4
 8008962:	d107      	bne.n	8008974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	4313      	orrs	r3, r2
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b04      	cmp	r3, #4
 800899c:	d117      	bne.n	80089ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fb0f 	bl	8008fd4 <DMA_CheckFifoParam>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2240      	movs	r2, #64	; 0x40
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80089ca:	2301      	movs	r3, #1
 80089cc:	e016      	b.n	80089fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fac6 	bl	8008f68 <DMA_CalcBaseAndBitshift>
 80089dc:	4603      	mov	r3, r0
 80089de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e4:	223f      	movs	r2, #63	; 0x3f
 80089e6:	409a      	lsls	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	f010803f 	.word	0xf010803f

08008a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_DMA_Start_IT+0x26>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e040      	b.n	8008ab0 <HAL_DMA_Start_IT+0xa8>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d12f      	bne.n	8008aa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fa58 	bl	8008f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	223f      	movs	r2, #63	; 0x3f
 8008a62:	409a      	lsls	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0216 	orr.w	r2, r2, #22
 8008a76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0208 	orr.w	r2, r2, #8
 8008a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	e005      	b.n	8008aae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008ac6:	f7ff fdaf 	bl	8008628 <HAL_GetTick>
 8008aca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d008      	beq.n	8008aea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2280      	movs	r2, #128	; 0x80
 8008adc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e052      	b.n	8008b90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0216 	bic.w	r2, r2, #22
 8008af8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	695a      	ldr	r2, [r3, #20]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <HAL_DMA_Abort+0x62>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0208 	bic.w	r2, r2, #8
 8008b28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b3a:	e013      	b.n	8008b64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b3c:	f7ff fd74 	bl	8008628 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d90c      	bls.n	8008b64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2203      	movs	r2, #3
 8008b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e015      	b.n	8008b90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e4      	bne.n	8008b3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b76:	223f      	movs	r2, #63	; 0x3f
 8008b78:	409a      	lsls	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d004      	beq.n	8008bb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2280      	movs	r2, #128	; 0x80
 8008bb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e00c      	b.n	8008bd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0201 	bic.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008be8:	4b8e      	ldr	r3, [pc, #568]	; (8008e24 <HAL_DMA_IRQHandler+0x248>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a8e      	ldr	r2, [pc, #568]	; (8008e28 <HAL_DMA_IRQHandler+0x24c>)
 8008bee:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf2:	0a9b      	lsrs	r3, r3, #10
 8008bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c06:	2208      	movs	r2, #8
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01a      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d013      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0204 	bic.w	r2, r2, #4
 8008c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c34:	2208      	movs	r2, #8
 8008c36:	409a      	lsls	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c40:	f043 0201 	orr.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4013      	ands	r3, r2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d012      	beq.n	8008c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	409a      	lsls	r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c76:	f043 0202 	orr.w	r2, r3, #2
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c82:	2204      	movs	r2, #4
 8008c84:	409a      	lsls	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d012      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca0:	2204      	movs	r2, #4
 8008ca2:	409a      	lsls	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cac:	f043 0204 	orr.w	r2, r3, #4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb8:	2210      	movs	r2, #16
 8008cba:	409a      	lsls	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d043      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d03c      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	409a      	lsls	r2, r3
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d018      	beq.n	8008d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d108      	bne.n	8008d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d024      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
 8008d0a:	e01f      	b.n	8008d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01b      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
 8008d1c:	e016      	b.n	8008d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d107      	bne.n	8008d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0208 	bic.w	r2, r2, #8
 8008d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d50:	2220      	movs	r2, #32
 8008d52:	409a      	lsls	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 808f 	beq.w	8008e7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 8087 	beq.w	8008e7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d72:	2220      	movs	r2, #32
 8008d74:	409a      	lsls	r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d136      	bne.n	8008df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0216 	bic.w	r2, r2, #22
 8008d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	695a      	ldr	r2, [r3, #20]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d103      	bne.n	8008db6 <HAL_DMA_IRQHandler+0x1da>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0208 	bic.w	r2, r2, #8
 8008dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dca:	223f      	movs	r2, #63	; 0x3f
 8008dcc:	409a      	lsls	r2, r3
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d07e      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4798      	blx	r3
        }
        return;
 8008df2:	e079      	b.n	8008ee8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01d      	beq.n	8008e3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10d      	bne.n	8008e2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d031      	beq.n	8008e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
 8008e20:	e02c      	b.n	8008e7c <HAL_DMA_IRQHandler+0x2a0>
 8008e22:	bf00      	nop
 8008e24:	20000024 	.word	0x20000024
 8008e28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d023      	beq.n	8008e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4798      	blx	r3
 8008e3c:	e01e      	b.n	8008e7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10f      	bne.n	8008e6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0210 	bic.w	r2, r2, #16
 8008e5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d032      	beq.n	8008eea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d022      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2205      	movs	r2, #5
 8008e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d307      	bcc.n	8008ec4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1f2      	bne.n	8008ea8 <HAL_DMA_IRQHandler+0x2cc>
 8008ec2:	e000      	b.n	8008ec6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008ec4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	e000      	b.n	8008eea <HAL_DMA_IRQHandler+0x30e>
        return;
 8008ee8:	bf00      	nop
    }
  }
}
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008efe:	b2db      	uxtb	r3, r3
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b40      	cmp	r3, #64	; 0x40
 8008f38:	d108      	bne.n	8008f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008f4a:	e007      	b.n	8008f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	60da      	str	r2, [r3, #12]
}
 8008f5c:	bf00      	nop
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	3b10      	subs	r3, #16
 8008f78:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <DMA_CalcBaseAndBitshift+0x64>)
 8008f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7e:	091b      	lsrs	r3, r3, #4
 8008f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f82:	4a13      	ldr	r2, [pc, #76]	; (8008fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d909      	bls.n	8008faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8008fa8:	e007      	b.n	8008fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008fb2:	f023 0303 	bic.w	r3, r3, #3
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	aaaaaaab 	.word	0xaaaaaaab
 8008fd0:	0800ffe4 	.word	0x0800ffe4

08008fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d11f      	bne.n	800902e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d856      	bhi.n	80090a2 <DMA_CheckFifoParam+0xce>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <DMA_CheckFifoParam+0x28>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	0800901f 	.word	0x0800901f
 8009004:	0800900d 	.word	0x0800900d
 8009008:	080090a3 	.word	0x080090a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d046      	beq.n	80090a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800901c:	e043      	b.n	80090a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009026:	d140      	bne.n	80090aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800902c:	e03d      	b.n	80090aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009036:	d121      	bne.n	800907c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b03      	cmp	r3, #3
 800903c:	d837      	bhi.n	80090ae <DMA_CheckFifoParam+0xda>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <DMA_CheckFifoParam+0x70>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	08009055 	.word	0x08009055
 8009048:	0800905b 	.word	0x0800905b
 800904c:	08009055 	.word	0x08009055
 8009050:	0800906d 	.word	0x0800906d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
      break;
 8009058:	e030      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d025      	beq.n	80090b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800906a:	e022      	b.n	80090b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009074:	d11f      	bne.n	80090b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800907a:	e01c      	b.n	80090b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d903      	bls.n	800908a <DMA_CheckFifoParam+0xb6>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d003      	beq.n	8009090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009088:	e018      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	73fb      	strb	r3, [r7, #15]
      break;
 800908e:	e015      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00e      	beq.n	80090ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
      break;
 80090a0:	e00b      	b.n	80090ba <DMA_CheckFifoParam+0xe6>
      break;
 80090a2:	bf00      	nop
 80090a4:	e00a      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;
 80090a6:	bf00      	nop
 80090a8:	e008      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;
 80090aa:	bf00      	nop
 80090ac:	e006      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;
 80090ae:	bf00      	nop
 80090b0:	e004      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;
 80090b2:	bf00      	nop
 80090b4:	e002      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;   
 80090b6:	bf00      	nop
 80090b8:	e000      	b.n	80090bc <DMA_CheckFifoParam+0xe8>
      break;
 80090ba:	bf00      	nop
    }
  } 
  
  return status; 
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop

080090cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80090de:	4b23      	ldr	r3, [pc, #140]	; (800916c <HAL_FLASH_Program+0xa0>)
 80090e0:	7e1b      	ldrb	r3, [r3, #24]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_FLASH_Program+0x1e>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e03b      	b.n	8009162 <HAL_FLASH_Program+0x96>
 80090ea:	4b20      	ldr	r3, [pc, #128]	; (800916c <HAL_FLASH_Program+0xa0>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80090f4:	f000 f870 	bl	80091d8 <FLASH_WaitForLastOperation>
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d12b      	bne.n	800915a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009108:	783b      	ldrb	r3, [r7, #0]
 800910a:	4619      	mov	r1, r3
 800910c:	68b8      	ldr	r0, [r7, #8]
 800910e:	f000 f91b 	bl	8009348 <FLASH_Program_Byte>
 8009112:	e016      	b.n	8009142 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d105      	bne.n	8009126 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800911a:	883b      	ldrh	r3, [r7, #0]
 800911c:	4619      	mov	r1, r3
 800911e:	68b8      	ldr	r0, [r7, #8]
 8009120:	f000 f8ee 	bl	8009300 <FLASH_Program_HalfWord>
 8009124:	e00d      	b.n	8009142 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d105      	bne.n	8009138 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4619      	mov	r1, r3
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	f000 f8c3 	bl	80092bc <FLASH_Program_Word>
 8009136:	e004      	b.n	8009142 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913c:	68b8      	ldr	r0, [r7, #8]
 800913e:	f000 f88b 	bl	8009258 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009142:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009146:	f000 f847 	bl	80091d8 <FLASH_WaitForLastOperation>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800914e:	4b08      	ldr	r3, [pc, #32]	; (8009170 <HAL_FLASH_Program+0xa4>)
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	4a07      	ldr	r2, [pc, #28]	; (8009170 <HAL_FLASH_Program+0xa4>)
 8009154:	f023 0301 	bic.w	r3, r3, #1
 8009158:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800915a:	4b04      	ldr	r3, [pc, #16]	; (800916c <HAL_FLASH_Program+0xa0>)
 800915c:	2200      	movs	r2, #0
 800915e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	200011a0 	.word	0x200011a0
 8009170:	40023c00 	.word	0x40023c00

08009174 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <HAL_FLASH_Unlock+0x38>)
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0b      	bge.n	800919e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <HAL_FLASH_Unlock+0x38>)
 8009188:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <HAL_FLASH_Unlock+0x3c>)
 800918a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <HAL_FLASH_Unlock+0x38>)
 800918e:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <HAL_FLASH_Unlock+0x40>)
 8009190:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009192:	4b06      	ldr	r3, [pc, #24]	; (80091ac <HAL_FLASH_Unlock+0x38>)
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	da01      	bge.n	800919e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800919e:	79fb      	ldrb	r3, [r7, #7]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	40023c00 	.word	0x40023c00
 80091b0:	45670123 	.word	0x45670123
 80091b4:	cdef89ab 	.word	0xcdef89ab

080091b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_FLASH_Lock+0x1c>)
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <HAL_FLASH_Lock+0x1c>)
 80091c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	40023c00 	.word	0x40023c00

080091d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091e4:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <FLASH_WaitForLastOperation+0x78>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80091ea:	f7ff fa1d 	bl	8008628 <HAL_GetTick>
 80091ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091f0:	e010      	b.n	8009214 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d00c      	beq.n	8009214 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <FLASH_WaitForLastOperation+0x38>
 8009200:	f7ff fa12 	bl	8008628 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d201      	bcs.n	8009214 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e019      	b.n	8009248 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <FLASH_WaitForLastOperation+0x7c>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e8      	bne.n	80091f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009220:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <FLASH_WaitForLastOperation+0x7c>)
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <FLASH_WaitForLastOperation+0x7c>)
 800922e:	2201      	movs	r2, #1
 8009230:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <FLASH_WaitForLastOperation+0x7c>)
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800923e:	f000 f8a5 	bl	800938c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
  
}  
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	200011a0 	.word	0x200011a0
 8009254:	40023c00 	.word	0x40023c00

08009258 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009264:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 800926a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800926e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009270:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 8009276:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800927a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <FLASH_Program_DoubleWord+0x60>)
 8009282:	f043 0301 	orr.w	r3, r3, #1
 8009286:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800928e:	f3bf 8f6f 	isb	sy
}
 8009292:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	000a      	movs	r2, r1
 80092a2:	2300      	movs	r3, #0
 80092a4:	68f9      	ldr	r1, [r7, #12]
 80092a6:	3104      	adds	r1, #4
 80092a8:	4613      	mov	r3, r2
 80092aa:	600b      	str	r3, [r1, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40023c00 	.word	0x40023c00

080092bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <FLASH_Program_Word+0x40>)
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	4a0c      	ldr	r2, [pc, #48]	; (80092fc <FLASH_Program_Word+0x40>)
 80092cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <FLASH_Program_Word+0x40>)
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	4a09      	ldr	r2, [pc, #36]	; (80092fc <FLASH_Program_Word+0x40>)
 80092d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <FLASH_Program_Word+0x40>)
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	4a06      	ldr	r2, [pc, #24]	; (80092fc <FLASH_Program_Word+0x40>)
 80092e4:	f043 0301 	orr.w	r3, r3, #1
 80092e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	601a      	str	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40023c00 	.word	0x40023c00

08009300 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	4a0c      	ldr	r2, [pc, #48]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 8009312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009316:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	4a09      	ldr	r2, [pc, #36]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 800931e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	4a06      	ldr	r2, [pc, #24]	; (8009344 <FLASH_Program_HalfWord+0x44>)
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	887a      	ldrh	r2, [r7, #2]
 8009334:	801a      	strh	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40023c00 	.word	0x40023c00

08009348 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009354:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <FLASH_Program_Byte+0x40>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	4a0b      	ldr	r2, [pc, #44]	; (8009388 <FLASH_Program_Byte+0x40>)
 800935a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009360:	4b09      	ldr	r3, [pc, #36]	; (8009388 <FLASH_Program_Byte+0x40>)
 8009362:	4a09      	ldr	r2, [pc, #36]	; (8009388 <FLASH_Program_Byte+0x40>)
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009368:	4b07      	ldr	r3, [pc, #28]	; (8009388 <FLASH_Program_Byte+0x40>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	4a06      	ldr	r2, [pc, #24]	; (8009388 <FLASH_Program_Byte+0x40>)
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	701a      	strb	r2, [r3, #0]
}
 800937a:	bf00      	nop
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40023c00 	.word	0x40023c00

0800938c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800938c:	b480      	push	{r7}
 800938e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009390:	4b27      	ldr	r3, [pc, #156]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d008      	beq.n	80093ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800939c:	4b25      	ldr	r3, [pc, #148]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f043 0310 	orr.w	r3, r3, #16
 80093a4:	4a23      	ldr	r2, [pc, #140]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80093a8:	4b21      	ldr	r3, [pc, #132]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093aa:	2210      	movs	r2, #16
 80093ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80093ae:	4b20      	ldr	r3, [pc, #128]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80093ba:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f043 0308 	orr.w	r3, r3, #8
 80093c2:	4a1c      	ldr	r2, [pc, #112]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093c8:	2220      	movs	r2, #32
 80093ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80093cc:	4b18      	ldr	r3, [pc, #96]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80093d8:	4b16      	ldr	r3, [pc, #88]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	f043 0304 	orr.w	r3, r3, #4
 80093e0:	4a14      	ldr	r2, [pc, #80]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80093e4:	4b12      	ldr	r3, [pc, #72]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093e6:	2240      	movs	r2, #64	; 0x40
 80093e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80093ea:	4b11      	ldr	r3, [pc, #68]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80093f6:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	f043 0302 	orr.w	r3, r3, #2
 80093fe:	4a0d      	ldr	r2, [pc, #52]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 8009400:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009402:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 8009404:	2280      	movs	r2, #128	; 0x80
 8009406:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009414:	4b07      	ldr	r3, [pc, #28]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	f043 0320 	orr.w	r3, r3, #32
 800941c:	4a05      	ldr	r2, [pc, #20]	; (8009434 <FLASH_SetErrorCode+0xa8>)
 800941e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009420:	4b03      	ldr	r3, [pc, #12]	; (8009430 <FLASH_SetErrorCode+0xa4>)
 8009422:	2202      	movs	r2, #2
 8009424:	60da      	str	r2, [r3, #12]
  }
}
 8009426:	bf00      	nop
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	40023c00 	.word	0x40023c00
 8009434:	200011a0 	.word	0x200011a0

08009438 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800944a:	4b31      	ldr	r3, [pc, #196]	; (8009510 <HAL_FLASHEx_Erase+0xd8>)
 800944c:	7e1b      	ldrb	r3, [r3, #24]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <HAL_FLASHEx_Erase+0x1e>
 8009452:	2302      	movs	r3, #2
 8009454:	e058      	b.n	8009508 <HAL_FLASHEx_Erase+0xd0>
 8009456:	4b2e      	ldr	r3, [pc, #184]	; (8009510 <HAL_FLASHEx_Erase+0xd8>)
 8009458:	2201      	movs	r2, #1
 800945a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800945c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009460:	f7ff feba 	bl	80091d8 <FLASH_WaitForLastOperation>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d148      	bne.n	8009500 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d115      	bne.n	80094aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	b2da      	uxtb	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f000 f844 	bl	8009518 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009490:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009494:	f7ff fea0 	bl	80091d8 <FLASH_WaitForLastOperation>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800949c:	4b1d      	ldr	r3, [pc, #116]	; (8009514 <HAL_FLASHEx_Erase+0xdc>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <HAL_FLASHEx_Erase+0xdc>)
 80094a2:	f023 0304 	bic.w	r3, r3, #4
 80094a6:	6113      	str	r3, [r2, #16]
 80094a8:	e028      	b.n	80094fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	60bb      	str	r3, [r7, #8]
 80094b0:	e01c      	b.n	80094ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	4619      	mov	r1, r3
 80094ba:	68b8      	ldr	r0, [r7, #8]
 80094bc:	f000 f850 	bl	8009560 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80094c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80094c4:	f7ff fe88 	bl	80091d8 <FLASH_WaitForLastOperation>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80094cc:	4b11      	ldr	r3, [pc, #68]	; (8009514 <HAL_FLASHEx_Erase+0xdc>)
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	4a10      	ldr	r2, [pc, #64]	; (8009514 <HAL_FLASHEx_Erase+0xdc>)
 80094d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80094d6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	601a      	str	r2, [r3, #0]
          break;
 80094e4:	e00a      	b.n	80094fc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60bb      	str	r3, [r7, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d3da      	bcc.n	80094b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80094fc:	f000 f878 	bl	80095f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009500:	4b03      	ldr	r3, [pc, #12]	; (8009510 <HAL_FLASHEx_Erase+0xd8>)
 8009502:	2200      	movs	r2, #0
 8009504:	761a      	strb	r2, [r3, #24]

  return status;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200011a0 	.word	0x200011a0
 8009514:	40023c00 	.word	0x40023c00

08009518 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009524:	4b0d      	ldr	r3, [pc, #52]	; (800955c <FLASH_MassErase+0x44>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	4a0c      	ldr	r2, [pc, #48]	; (800955c <FLASH_MassErase+0x44>)
 800952a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800952e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <FLASH_MassErase+0x44>)
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	4a09      	ldr	r2, [pc, #36]	; (800955c <FLASH_MassErase+0x44>)
 8009536:	f043 0304 	orr.w	r3, r3, #4
 800953a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800953c:	4b07      	ldr	r3, [pc, #28]	; (800955c <FLASH_MassErase+0x44>)
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4313      	orrs	r3, r2
 8009546:	4a05      	ldr	r2, [pc, #20]	; (800955c <FLASH_MassErase+0x44>)
 8009548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800954c:	6113      	str	r3, [r2, #16]
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40023c00 	.word	0x40023c00

08009560 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	e010      	b.n	800959e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d103      	bne.n	800958a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e009      	b.n	800959e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d103      	bne.n	8009598 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	e002      	b.n	800959e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009598:	f44f 7340 	mov.w	r3, #768	; 0x300
 800959c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	4a12      	ldr	r2, [pc, #72]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095ac:	691a      	ldr	r2, [r3, #16]
 80095ae:	490f      	ldr	r1, [pc, #60]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	4a0c      	ldr	r2, [pc, #48]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80095c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095c4:	691a      	ldr	r2, [r3, #16]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	4a07      	ldr	r2, [pc, #28]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095ce:	f043 0302 	orr.w	r3, r3, #2
 80095d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	4a04      	ldr	r2, [pc, #16]	; (80095ec <FLASH_Erase_Sector+0x8c>)
 80095da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095de:	6113      	str	r3, [r2, #16]
}
 80095e0:	bf00      	nop
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	40023c00 	.word	0x40023c00

080095f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80095f4:	4b20      	ldr	r3, [pc, #128]	; (8009678 <FLASH_FlushCaches+0x88>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d017      	beq.n	8009630 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009600:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a1c      	ldr	r2, [pc, #112]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009606:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800960a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800960c:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <FLASH_FlushCaches+0x88>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a19      	ldr	r2, [pc, #100]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <FLASH_FlushCaches+0x88>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a16      	ldr	r2, [pc, #88]	; (8009678 <FLASH_FlushCaches+0x88>)
 800961e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009622:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009624:	4b14      	ldr	r3, [pc, #80]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a13      	ldr	r2, [pc, #76]	; (8009678 <FLASH_FlushCaches+0x88>)
 800962a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800962e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009630:	4b11      	ldr	r3, [pc, #68]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800963c:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <FLASH_FlushCaches+0x88>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a0d      	ldr	r2, [pc, #52]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009646:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <FLASH_FlushCaches+0x88>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a0a      	ldr	r2, [pc, #40]	; (8009678 <FLASH_FlushCaches+0x88>)
 800964e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	4b08      	ldr	r3, [pc, #32]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a07      	ldr	r2, [pc, #28]	; (8009678 <FLASH_FlushCaches+0x88>)
 800965a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a04      	ldr	r2, [pc, #16]	; (8009678 <FLASH_FlushCaches+0x88>)
 8009666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800966a:	6013      	str	r3, [r2, #0]
  }
}
 800966c:	bf00      	nop
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40023c00 	.word	0x40023c00

0800967c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800967c:	b480      	push	{r7}
 800967e:	b089      	sub	sp, #36	; 0x24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009686:	2300      	movs	r3, #0
 8009688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800968e:	2300      	movs	r3, #0
 8009690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
 8009696:	e16b      	b.n	8009970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009698:	2201      	movs	r2, #1
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4013      	ands	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	f040 815a 	bne.w	800996a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d005      	beq.n	80096ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d130      	bne.n	8009730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	2203      	movs	r2, #3
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	43db      	mvns	r3, r3
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	4013      	ands	r3, r2
 80096e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009704:	2201      	movs	r2, #1
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	fa02 f303 	lsl.w	r3, r2, r3
 800970c:	43db      	mvns	r3, r3
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	4013      	ands	r3, r2
 8009712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	091b      	lsrs	r3, r3, #4
 800971a:	f003 0201 	and.w	r2, r3, #1
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	fa02 f303 	lsl.w	r3, r2, r3
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	4313      	orrs	r3, r2
 8009728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b03      	cmp	r3, #3
 800973a:	d017      	beq.n	800976c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	2203      	movs	r2, #3
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	43db      	mvns	r3, r3
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	4013      	ands	r3, r2
 8009752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	fa02 f303 	lsl.w	r3, r2, r3
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	4313      	orrs	r3, r2
 8009764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d123      	bne.n	80097c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	08da      	lsrs	r2, r3, #3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3208      	adds	r2, #8
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	220f      	movs	r2, #15
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	43db      	mvns	r3, r3
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	4013      	ands	r3, r2
 800979a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	08da      	lsrs	r2, r3, #3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3208      	adds	r2, #8
 80097ba:	69b9      	ldr	r1, [r7, #24]
 80097bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	2203      	movs	r2, #3
 80097cc:	fa02 f303 	lsl.w	r3, r2, r3
 80097d0:	43db      	mvns	r3, r3
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	4013      	ands	r3, r2
 80097d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f003 0203 	and.w	r2, r3, #3
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80b4 	beq.w	800996a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	4b60      	ldr	r3, [pc, #384]	; (8009988 <HAL_GPIO_Init+0x30c>)
 8009808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980a:	4a5f      	ldr	r2, [pc, #380]	; (8009988 <HAL_GPIO_Init+0x30c>)
 800980c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009810:	6453      	str	r3, [r2, #68]	; 0x44
 8009812:	4b5d      	ldr	r3, [pc, #372]	; (8009988 <HAL_GPIO_Init+0x30c>)
 8009814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800981e:	4a5b      	ldr	r2, [pc, #364]	; (800998c <HAL_GPIO_Init+0x310>)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	089b      	lsrs	r3, r3, #2
 8009824:	3302      	adds	r3, #2
 8009826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	220f      	movs	r2, #15
 8009836:	fa02 f303 	lsl.w	r3, r2, r3
 800983a:	43db      	mvns	r3, r3
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	4013      	ands	r3, r2
 8009840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a52      	ldr	r2, [pc, #328]	; (8009990 <HAL_GPIO_Init+0x314>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d02b      	beq.n	80098a2 <HAL_GPIO_Init+0x226>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a51      	ldr	r2, [pc, #324]	; (8009994 <HAL_GPIO_Init+0x318>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d025      	beq.n	800989e <HAL_GPIO_Init+0x222>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a50      	ldr	r2, [pc, #320]	; (8009998 <HAL_GPIO_Init+0x31c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d01f      	beq.n	800989a <HAL_GPIO_Init+0x21e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a4f      	ldr	r2, [pc, #316]	; (800999c <HAL_GPIO_Init+0x320>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d019      	beq.n	8009896 <HAL_GPIO_Init+0x21a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a4e      	ldr	r2, [pc, #312]	; (80099a0 <HAL_GPIO_Init+0x324>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_GPIO_Init+0x216>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a4d      	ldr	r2, [pc, #308]	; (80099a4 <HAL_GPIO_Init+0x328>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00d      	beq.n	800988e <HAL_GPIO_Init+0x212>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a4c      	ldr	r2, [pc, #304]	; (80099a8 <HAL_GPIO_Init+0x32c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <HAL_GPIO_Init+0x20e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a4b      	ldr	r2, [pc, #300]	; (80099ac <HAL_GPIO_Init+0x330>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d101      	bne.n	8009886 <HAL_GPIO_Init+0x20a>
 8009882:	2307      	movs	r3, #7
 8009884:	e00e      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 8009886:	2308      	movs	r3, #8
 8009888:	e00c      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 800988a:	2306      	movs	r3, #6
 800988c:	e00a      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 800988e:	2305      	movs	r3, #5
 8009890:	e008      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 8009892:	2304      	movs	r3, #4
 8009894:	e006      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 8009896:	2303      	movs	r3, #3
 8009898:	e004      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 800989a:	2302      	movs	r3, #2
 800989c:	e002      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <HAL_GPIO_Init+0x228>
 80098a2:	2300      	movs	r3, #0
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	f002 0203 	and.w	r2, r2, #3
 80098aa:	0092      	lsls	r2, r2, #2
 80098ac:	4093      	lsls	r3, r2
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098b4:	4935      	ldr	r1, [pc, #212]	; (800998c <HAL_GPIO_Init+0x310>)
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	089b      	lsrs	r3, r3, #2
 80098ba:	3302      	adds	r3, #2
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80098c2:	4b3b      	ldr	r3, [pc, #236]	; (80099b0 <HAL_GPIO_Init+0x334>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	4013      	ands	r3, r2
 80098d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80098e6:	4a32      	ldr	r2, [pc, #200]	; (80099b0 <HAL_GPIO_Init+0x334>)
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80098ec:	4b30      	ldr	r3, [pc, #192]	; (80099b0 <HAL_GPIO_Init+0x334>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	43db      	mvns	r3, r3
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	4013      	ands	r3, r2
 80098fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009910:	4a27      	ldr	r2, [pc, #156]	; (80099b0 <HAL_GPIO_Init+0x334>)
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009916:	4b26      	ldr	r3, [pc, #152]	; (80099b0 <HAL_GPIO_Init+0x334>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	43db      	mvns	r3, r3
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	4013      	ands	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800993a:	4a1d      	ldr	r2, [pc, #116]	; (80099b0 <HAL_GPIO_Init+0x334>)
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009940:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <HAL_GPIO_Init+0x334>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	43db      	mvns	r3, r3
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	4013      	ands	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4313      	orrs	r3, r2
 8009962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009964:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <HAL_GPIO_Init+0x334>)
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	3301      	adds	r3, #1
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	2b0f      	cmp	r3, #15
 8009974:	f67f ae90 	bls.w	8009698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	3724      	adds	r7, #36	; 0x24
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40023800 	.word	0x40023800
 800998c:	40013800 	.word	0x40013800
 8009990:	40020000 	.word	0x40020000
 8009994:	40020400 	.word	0x40020400
 8009998:	40020800 	.word	0x40020800
 800999c:	40020c00 	.word	0x40020c00
 80099a0:	40021000 	.word	0x40021000
 80099a4:	40021400 	.word	0x40021400
 80099a8:	40021800 	.word	0x40021800
 80099ac:	40021c00 	.word	0x40021c00
 80099b0:	40013c00 	.word	0x40013c00

080099b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	807b      	strh	r3, [r7, #2]
 80099c0:	4613      	mov	r3, r2
 80099c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80099c4:	787b      	ldrb	r3, [r7, #1]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099ca:	887a      	ldrh	r2, [r7, #2]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80099d0:	e003      	b.n	80099da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80099d2:	887b      	ldrh	r3, [r7, #2]
 80099d4:	041a      	lsls	r2, r3, #16
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	619a      	str	r2, [r3, #24]
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e12b      	b.n	8009c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d106      	bne.n	8009a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fe f9c8 	bl	8007da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2224      	movs	r2, #36	; 0x24
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009a4c:	f003 f86e 	bl	800cb2c <HAL_RCC_GetPCLK1Freq>
 8009a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	4a81      	ldr	r2, [pc, #516]	; (8009c5c <HAL_I2C_Init+0x274>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d807      	bhi.n	8009a6c <HAL_I2C_Init+0x84>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a80      	ldr	r2, [pc, #512]	; (8009c60 <HAL_I2C_Init+0x278>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	bf94      	ite	ls
 8009a64:	2301      	movls	r3, #1
 8009a66:	2300      	movhi	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	e006      	b.n	8009a7a <HAL_I2C_Init+0x92>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4a7d      	ldr	r2, [pc, #500]	; (8009c64 <HAL_I2C_Init+0x27c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	bf94      	ite	ls
 8009a74:	2301      	movls	r3, #1
 8009a76:	2300      	movhi	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e0e7      	b.n	8009c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4a78      	ldr	r2, [pc, #480]	; (8009c68 <HAL_I2C_Init+0x280>)
 8009a86:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8a:	0c9b      	lsrs	r3, r3, #18
 8009a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	4a6a      	ldr	r2, [pc, #424]	; (8009c5c <HAL_I2C_Init+0x274>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d802      	bhi.n	8009abc <HAL_I2C_Init+0xd4>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	e009      	b.n	8009ad0 <HAL_I2C_Init+0xe8>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	4a69      	ldr	r2, [pc, #420]	; (8009c6c <HAL_I2C_Init+0x284>)
 8009ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8009acc:	099b      	lsrs	r3, r3, #6
 8009ace:	3301      	adds	r3, #1
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	495c      	ldr	r1, [pc, #368]	; (8009c5c <HAL_I2C_Init+0x274>)
 8009aec:	428b      	cmp	r3, r1
 8009aee:	d819      	bhi.n	8009b24 <HAL_I2C_Init+0x13c>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	1e59      	subs	r1, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009afe:	1c59      	adds	r1, r3, #1
 8009b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b04:	400b      	ands	r3, r1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <HAL_I2C_Init+0x138>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1e59      	subs	r1, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b1e:	e051      	b.n	8009bc4 <HAL_I2C_Init+0x1dc>
 8009b20:	2304      	movs	r3, #4
 8009b22:	e04f      	b.n	8009bc4 <HAL_I2C_Init+0x1dc>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d111      	bne.n	8009b50 <HAL_I2C_Init+0x168>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	1e58      	subs	r0, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6859      	ldr	r1, [r3, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	440b      	add	r3, r1
 8009b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b3e:	3301      	adds	r3, #1
 8009b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bf0c      	ite	eq
 8009b48:	2301      	moveq	r3, #1
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e012      	b.n	8009b76 <HAL_I2C_Init+0x18e>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1e58      	subs	r0, r3, #1
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6859      	ldr	r1, [r3, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	0099      	lsls	r1, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b66:	3301      	adds	r3, #1
 8009b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bf0c      	ite	eq
 8009b70:	2301      	moveq	r3, #1
 8009b72:	2300      	movne	r3, #0
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <HAL_I2C_Init+0x196>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e022      	b.n	8009bc4 <HAL_I2C_Init+0x1dc>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10e      	bne.n	8009ba4 <HAL_I2C_Init+0x1bc>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1e58      	subs	r0, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6859      	ldr	r1, [r3, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	440b      	add	r3, r1
 8009b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b98:	3301      	adds	r3, #1
 8009b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba2:	e00f      	b.n	8009bc4 <HAL_I2C_Init+0x1dc>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	1e58      	subs	r0, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6859      	ldr	r1, [r3, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	0099      	lsls	r1, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bba:	3301      	adds	r3, #1
 8009bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	6809      	ldr	r1, [r1, #0]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69da      	ldr	r2, [r3, #28]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6911      	ldr	r1, [r2, #16]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	68d2      	ldr	r2, [r2, #12]
 8009bfe:	4311      	orrs	r1, r2
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6812      	ldr	r2, [r2, #0]
 8009c04:	430b      	orrs	r3, r1
 8009c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	695a      	ldr	r2, [r3, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f042 0201 	orr.w	r2, r2, #1
 8009c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	000186a0 	.word	0x000186a0
 8009c60:	001e847f 	.word	0x001e847f
 8009c64:	003d08ff 	.word	0x003d08ff
 8009c68:	431bde83 	.word	0x431bde83
 8009c6c:	10624dd3 	.word	0x10624dd3

08009c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	4608      	mov	r0, r1
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	817b      	strh	r3, [r7, #10]
 8009c82:	460b      	mov	r3, r1
 8009c84:	813b      	strh	r3, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c8a:	f7fe fccd 	bl	8008628 <HAL_GetTick>
 8009c8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	f040 80d9 	bne.w	8009e50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	2319      	movs	r3, #25
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	496d      	ldr	r1, [pc, #436]	; (8009e5c <HAL_I2C_Mem_Write+0x1ec>)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f002 f8e5 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e0cc      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <HAL_I2C_Mem_Write+0x56>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e0c5      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d007      	beq.n	8009cec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0201 	orr.w	r2, r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2221      	movs	r2, #33	; 0x21
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2240      	movs	r2, #64	; 0x40
 8009d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4a4d      	ldr	r2, [pc, #308]	; (8009e60 <HAL_I2C_Mem_Write+0x1f0>)
 8009d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d2e:	88f8      	ldrh	r0, [r7, #6]
 8009d30:	893a      	ldrh	r2, [r7, #8]
 8009d32:	8979      	ldrh	r1, [r7, #10]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f001 fe74 	bl	800ba2c <I2C_RequestMemoryWrite>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d052      	beq.n	8009df0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e081      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f002 f966 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d107      	bne.n	8009d76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e06b      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d11b      	bne.n	8009df0 <HAL_I2C_Mem_Write+0x180>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d017      	beq.n	8009df0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	781a      	ldrb	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	3b01      	subs	r3, #1
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1aa      	bne.n	8009d4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f002 f952 	bl	800c0a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00d      	beq.n	8009e24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d107      	bne.n	8009e20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e016      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e000      	b.n	8009e52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009e50:	2302      	movs	r3, #2
  }
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	00100002 	.word	0x00100002
 8009e60:	ffff0000 	.word	0xffff0000

08009e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08c      	sub	sp, #48	; 0x30
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	4611      	mov	r1, r2
 8009e70:	461a      	mov	r2, r3
 8009e72:	4603      	mov	r3, r0
 8009e74:	817b      	strh	r3, [r7, #10]
 8009e76:	460b      	mov	r3, r1
 8009e78:	813b      	strh	r3, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e7e:	f7fe fbd3 	bl	8008628 <HAL_GetTick>
 8009e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	f040 8208 	bne.w	800a2a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	2319      	movs	r3, #25
 8009e98:	2201      	movs	r2, #1
 8009e9a:	497b      	ldr	r1, [pc, #492]	; (800a088 <HAL_I2C_Mem_Read+0x224>)
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f001 ffeb 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e1fb      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d101      	bne.n	8009eba <HAL_I2C_Mem_Read+0x56>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e1f4      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d007      	beq.n	8009ee0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2222      	movs	r2, #34	; 0x22
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2240      	movs	r2, #64	; 0x40
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a5b      	ldr	r2, [pc, #364]	; (800a08c <HAL_I2C_Mem_Read+0x228>)
 8009f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f22:	88f8      	ldrh	r0, [r7, #6]
 8009f24:	893a      	ldrh	r2, [r7, #8]
 8009f26:	8979      	ldrh	r1, [r7, #10]
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4603      	mov	r3, r0
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f001 fe10 	bl	800bb58 <I2C_RequestMemoryRead>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e1b0      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d113      	bne.n	8009f72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	623b      	str	r3, [r7, #32]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	623b      	str	r3, [r7, #32]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	623b      	str	r3, [r7, #32]
 8009f5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e184      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d11b      	bne.n	8009fb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	61fb      	str	r3, [r7, #28]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	61fb      	str	r3, [r7, #28]
 8009f9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e164      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d11b      	bne.n	8009ff2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61bb      	str	r3, [r7, #24]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	61bb      	str	r3, [r7, #24]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	e144      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a008:	e138      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00e:	2b03      	cmp	r3, #3
 800a010:	f200 80f1 	bhi.w	800a1f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d123      	bne.n	800a064 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f002 f8b3 	bl	800c18c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e139      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04c:	3b01      	subs	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a062:	e10b      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d14e      	bne.n	800a10a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	2200      	movs	r2, #0
 800a074:	4906      	ldr	r1, [pc, #24]	; (800a090 <HAL_I2C_Mem_Read+0x22c>)
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f001 fefe 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d008      	beq.n	800a094 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e10e      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
 800a086:	bf00      	nop
 800a088:	00100002 	.word	0x00100002
 800a08c:	ffff0000 	.word	0xffff0000
 800a090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3b01      	subs	r3, #1
 800a102:	b29a      	uxth	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a108:	e0b8      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	2200      	movs	r2, #0
 800a112:	4966      	ldr	r1, [pc, #408]	; (800a2ac <HAL_I2C_Mem_Read+0x448>)
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f001 feaf 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e0bf      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	3b01      	subs	r3, #1
 800a160:	b29a      	uxth	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	2200      	movs	r2, #0
 800a16e:	494f      	ldr	r1, [pc, #316]	; (800a2ac <HAL_I2C_Mem_Read+0x448>)
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f001 fe81 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e091      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a18e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	691a      	ldr	r2, [r3, #16]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	691a      	ldr	r2, [r3, #16]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	b2d2      	uxtb	r2, r2
 800a1ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1f4:	e042      	b.n	800a27c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 ffc6 	bl	800c18c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e04c      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	691a      	ldr	r2, [r3, #16]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	b2d2      	uxtb	r2, r2
 800a216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a232:	b29b      	uxth	r3, r3
 800a234:	3b01      	subs	r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b04      	cmp	r3, #4
 800a248:	d118      	bne.n	800a27c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	691a      	ldr	r2, [r3, #16]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	1c5a      	adds	r2, r3, #1
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a266:	3b01      	subs	r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b29a      	uxth	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	f47f aec2 	bne.w	800a00a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2220      	movs	r2, #32
 800a28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e000      	b.n	800a2a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a2a2:	2302      	movs	r3, #2
  }
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3728      	adds	r7, #40	; 0x28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	00010004 	.word	0x00010004

0800a2b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	2b10      	cmp	r3, #16
 800a2de:	d003      	beq.n	800a2e8 <HAL_I2C_EV_IRQHandler+0x38>
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b40      	cmp	r3, #64	; 0x40
 800a2e4:	f040 80b1 	bne.w	800a44a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10d      	bne.n	800a31e <HAL_I2C_EV_IRQHandler+0x6e>
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a308:	d003      	beq.n	800a312 <HAL_I2C_EV_IRQHandler+0x62>
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a310:	d101      	bne.n	800a316 <HAL_I2C_EV_IRQHandler+0x66>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <HAL_I2C_EV_IRQHandler+0x68>
 800a316:	2300      	movs	r3, #0
 800a318:	2b01      	cmp	r3, #1
 800a31a:	f000 8114 	beq.w	800a546 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <HAL_I2C_EV_IRQHandler+0x90>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d006      	beq.n	800a340 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 ffaf 	bl	800c296 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fd5e 	bl	800adfa <I2C_Master_SB>
 800a33e:	e083      	b.n	800a448 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	f003 0308 	and.w	r3, r3, #8
 800a346:	2b00      	cmp	r3, #0
 800a348:	d008      	beq.n	800a35c <HAL_I2C_EV_IRQHandler+0xac>
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fdd6 	bl	800af06 <I2C_Master_ADD10>
 800a35a:	e075      	b.n	800a448 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d008      	beq.n	800a378 <HAL_I2C_EV_IRQHandler+0xc8>
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fdf2 	bl	800af5a <I2C_Master_ADDR>
 800a376:	e067      	b.n	800a448 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f003 0304 	and.w	r3, r3, #4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d036      	beq.n	800a3f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a38c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a390:	f000 80db 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00d      	beq.n	800a3ba <HAL_I2C_EV_IRQHandler+0x10a>
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <HAL_I2C_EV_IRQHandler+0x10a>
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f003 0304 	and.w	r3, r3, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f9d6 	bl	800a764 <I2C_MasterTransmit_TXE>
 800a3b8:	e046      	b.n	800a448 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80c2 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80bc 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b21      	cmp	r3, #33	; 0x21
 800a3d6:	d103      	bne.n	800a3e0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa5f 	bl	800a89c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3de:	e0b4      	b.n	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b40      	cmp	r3, #64	; 0x40
 800a3e4:	f040 80b1 	bne.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 facd 	bl	800a988 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3ee:	e0ac      	b.n	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3fe:	f000 80a4 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00d      	beq.n	800a428 <HAL_I2C_EV_IRQHandler+0x178>
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a412:	2b00      	cmp	r3, #0
 800a414:	d008      	beq.n	800a428 <HAL_I2C_EV_IRQHandler+0x178>
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fb45 	bl	800aab0 <I2C_MasterReceive_RXNE>
 800a426:	e00f      	b.n	800a448 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 808b 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 8085 	beq.w	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fbf0 	bl	800ac26 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a446:	e080      	b.n	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
 800a448:	e07f      	b.n	800a54a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d004      	beq.n	800a45c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	61fb      	str	r3, [r7, #28]
 800a45a:	e007      	b.n	800a46c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d011      	beq.n	800a49a <HAL_I2C_EV_IRQHandler+0x1ea>
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00c      	beq.n	800a49a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a490:	69b9      	ldr	r1, [r7, #24]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 ffb0 	bl	800b3f8 <I2C_Slave_ADDR>
 800a498:	e05a      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d008      	beq.n	800a4b6 <HAL_I2C_EV_IRQHandler+0x206>
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 ffea 	bl	800b488 <I2C_Slave_STOPF>
 800a4b4:	e04c      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b21      	cmp	r3, #33	; 0x21
 800a4ba:	d002      	beq.n	800a4c2 <HAL_I2C_EV_IRQHandler+0x212>
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	2b29      	cmp	r3, #41	; 0x29
 800a4c0:	d120      	bne.n	800a504 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00d      	beq.n	800a4e8 <HAL_I2C_EV_IRQHandler+0x238>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_I2C_EV_IRQHandler+0x238>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fecb 	bl	800b27c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a4e6:	e032      	b.n	800a54e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02d      	beq.n	800a54e <HAL_I2C_EV_IRQHandler+0x29e>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d028      	beq.n	800a54e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fefa 	bl	800b2f6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a502:	e024      	b.n	800a54e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00d      	beq.n	800a52a <HAL_I2C_EV_IRQHandler+0x27a>
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a514:	2b00      	cmp	r3, #0
 800a516:	d008      	beq.n	800a52a <HAL_I2C_EV_IRQHandler+0x27a>
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 ff08 	bl	800b338 <I2C_SlaveReceive_RXNE>
 800a528:	e012      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00d      	beq.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d008      	beq.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 ff38 	bl	800b3b4 <I2C_SlaveReceive_BTF>
 800a544:	e004      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a546:	bf00      	nop
 800a548:	e002      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a54a:	bf00      	nop
 800a54c:	e000      	b.n	800a550 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a54e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b08a      	sub	sp, #40	; 0x28
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a578:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00d      	beq.n	800a5a0 <HAL_I2C_ER_IRQHandler+0x4a>
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d008      	beq.n	800a5a0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a59e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00d      	beq.n	800a5c6 <HAL_I2C_ER_IRQHandler+0x70>
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d008      	beq.n	800a5c6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	f043 0302 	orr.w	r3, r3, #2
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800a5c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d03e      	beq.n	800a64e <HAL_I2C_ER_IRQHandler+0xf8>
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d039      	beq.n	800a64e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a5da:	7efb      	ldrb	r3, [r7, #27]
 800a5dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a5f4:	7ebb      	ldrb	r3, [r7, #26]
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	d112      	bne.n	800a620 <HAL_I2C_ER_IRQHandler+0xca>
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10f      	bne.n	800a620 <HAL_I2C_ER_IRQHandler+0xca>
 800a600:	7cfb      	ldrb	r3, [r7, #19]
 800a602:	2b21      	cmp	r3, #33	; 0x21
 800a604:	d008      	beq.n	800a618 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a606:	7cfb      	ldrb	r3, [r7, #19]
 800a608:	2b29      	cmp	r3, #41	; 0x29
 800a60a:	d005      	beq.n	800a618 <HAL_I2C_ER_IRQHandler+0xc2>
 800a60c:	7cfb      	ldrb	r3, [r7, #19]
 800a60e:	2b28      	cmp	r3, #40	; 0x28
 800a610:	d106      	bne.n	800a620 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b21      	cmp	r3, #33	; 0x21
 800a616:	d103      	bne.n	800a620 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 f865 	bl	800b6e8 <I2C_Slave_AF>
 800a61e:	e016      	b.n	800a64e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a628:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	f043 0304 	orr.w	r3, r3, #4
 800a630:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a632:	7efb      	ldrb	r3, [r7, #27]
 800a634:	2b10      	cmp	r3, #16
 800a636:	d002      	beq.n	800a63e <HAL_I2C_ER_IRQHandler+0xe8>
 800a638:	7efb      	ldrb	r3, [r7, #27]
 800a63a:	2b40      	cmp	r3, #64	; 0x40
 800a63c:	d107      	bne.n	800a64e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a64c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <HAL_I2C_ER_IRQHandler+0x11e>
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d008      	beq.n	800a674 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a672:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d008      	beq.n	800a68c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	431a      	orrs	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 f89e 	bl	800b7c8 <I2C_ITError>
  }
}
 800a68c:	bf00      	nop
 800a68e:	3728      	adds	r7, #40	; 0x28
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a772:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a77a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a780:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d150      	bne.n	800a82c <I2C_MasterTransmit_TXE+0xc8>
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	2b21      	cmp	r3, #33	; 0x21
 800a78e:	d14d      	bne.n	800a82c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b08      	cmp	r3, #8
 800a794:	d01d      	beq.n	800a7d2 <I2C_MasterTransmit_TXE+0x6e>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b20      	cmp	r3, #32
 800a79a:	d01a      	beq.n	800a7d2 <I2C_MasterTransmit_TXE+0x6e>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7a2:	d016      	beq.n	800a7d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a7b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2211      	movs	r2, #17
 800a7b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff ff62 	bl	800a694 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a7d0:	e060      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a7e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b40      	cmp	r3, #64	; 0x40
 800a80a:	d107      	bne.n	800a81c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ff7d 	bl	800a714 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a81a:	e03b      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ff35 	bl	800a694 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a82a:	e033      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	2b21      	cmp	r3, #33	; 0x21
 800a830:	d005      	beq.n	800a83e <I2C_MasterTransmit_TXE+0xda>
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d12d      	bne.n	800a894 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	2b22      	cmp	r3, #34	; 0x22
 800a83c:	d12a      	bne.n	800a894 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a842:	b29b      	uxth	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d108      	bne.n	800a85a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a856:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a858:	e01c      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b40      	cmp	r3, #64	; 0x40
 800a864:	d103      	bne.n	800a86e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f88e 	bl	800a988 <I2C_MemoryTransmit_TXE_BTF>
}
 800a86c:	e012      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a888:	b29b      	uxth	r3, r3
 800a88a:	3b01      	subs	r3, #1
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a892:	e7ff      	b.n	800a894 <I2C_MasterTransmit_TXE+0x130>
 800a894:	bf00      	nop
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b21      	cmp	r3, #33	; 0x21
 800a8b4:	d164      	bne.n	800a980 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d012      	beq.n	800a8e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a8e4:	e04c      	b.n	800a980 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b08      	cmp	r3, #8
 800a8ea:	d01d      	beq.n	800a928 <I2C_MasterTransmit_BTF+0x8c>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d01a      	beq.n	800a928 <I2C_MasterTransmit_BTF+0x8c>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8f8:	d016      	beq.n	800a928 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a908:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2211      	movs	r2, #17
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff feb7 	bl	800a694 <HAL_I2C_MasterTxCpltCallback>
}
 800a926:	e02b      	b.n	800a980 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a936:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a946:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d107      	bne.n	800a972 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fed2 	bl	800a714 <HAL_I2C_MemTxCpltCallback>
}
 800a970:	e006      	b.n	800a980 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff fe8a 	bl	800a694 <HAL_I2C_MasterTxCpltCallback>
}
 800a980:	bf00      	nop
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a996:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d11d      	bne.n	800a9dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d10b      	bne.n	800a9c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b8:	1c9a      	adds	r2, r3, #2
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800a9be:	e073      	b.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	121b      	asrs	r3, r3, #8
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a9da:	e065      	b.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d10b      	bne.n	800a9fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a9fa:	e055      	b.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d151      	bne.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	2b22      	cmp	r3, #34	; 0x22
 800aa08:	d10d      	bne.n	800aa26 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	651a      	str	r2, [r3, #80]	; 0x50
}
 800aa24:	e040      	b.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d015      	beq.n	800aa5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	2b21      	cmp	r3, #33	; 0x21
 800aa34:	d112      	bne.n	800aa5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	781a      	ldrb	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800aa5a:	e025      	b.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d120      	bne.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	2b21      	cmp	r3, #33	; 0x21
 800aa6a:	d11d      	bne.n	800aaa8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa7a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff fe36 	bl	800a714 <HAL_I2C_MemTxCpltCallback>
}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b22      	cmp	r3, #34	; 0x22
 800aac2:	f040 80ac 	bne.w	800ac1e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	d921      	bls.n	800ab18 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	f040 808c 	bne.w	800ac1e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab14:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800ab16:	e082      	b.n	800ac1e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d075      	beq.n	800ac0c <I2C_MasterReceive_RXNE+0x15c>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d002      	beq.n	800ab2c <I2C_MasterReceive_RXNE+0x7c>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d16f      	bne.n	800ac0c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 fafb 	bl	800c128 <I2C_WaitOnSTOPRequestThroughIT>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d142      	bne.n	800abbe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	b2d2      	uxtb	r2, r2
 800ab64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2220      	movs	r2, #32
 800ab82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d10a      	bne.n	800aba8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fdc1 	bl	800a728 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aba6:	e03a      	b.n	800ac1e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2212      	movs	r2, #18
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fd76 	bl	800a6a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800abbc:	e02f      	b.n	800ac1e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800abcc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	b2d2      	uxtb	r2, r2
 800abda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abea:	b29b      	uxth	r3, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2220      	movs	r2, #32
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff fd99 	bl	800a73c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ac0a:	e008      	b.n	800ac1e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac1a:	605a      	str	r2, [r3, #4]
}
 800ac1c:	e7ff      	b.n	800ac1e <I2C_MasterReceive_RXNE+0x16e>
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b04      	cmp	r3, #4
 800ac3c:	d11b      	bne.n	800ac76 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac4c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	691a      	ldr	r2, [r3, #16]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	b2d2      	uxtb	r2, r2
 800ac5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	1c5a      	adds	r2, r3, #1
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ac74:	e0bd      	b.n	800adf2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d129      	bne.n	800acd4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac8e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d00a      	beq.n	800acac <I2C_MasterReceive_BTF+0x86>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d007      	beq.n	800acac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acaa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc8:	b29b      	uxth	r3, r3
 800acca:	3b01      	subs	r3, #1
 800accc:	b29a      	uxth	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800acd2:	e08e      	b.n	800adf2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acd8:	b29b      	uxth	r3, r3
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d176      	bne.n	800adcc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d002      	beq.n	800acea <I2C_MasterReceive_BTF+0xc4>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b10      	cmp	r3, #16
 800ace8:	d108      	bne.n	800acfc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e019      	b.n	800ad30 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d002      	beq.n	800ad08 <I2C_MasterReceive_BTF+0xe2>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d108      	bne.n	800ad1a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e00a      	b.n	800ad30 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2b10      	cmp	r3, #16
 800ad1e:	d007      	beq.n	800ad30 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691a      	ldr	r2, [r3, #16]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	691a      	ldr	r2, [r3, #16]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b40      	cmp	r3, #64	; 0x40
 800ad9e:	d10a      	bne.n	800adb6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fcba 	bl	800a728 <HAL_I2C_MemRxCpltCallback>
}
 800adb4:	e01d      	b.n	800adf2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2212      	movs	r2, #18
 800adc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7ff fc6f 	bl	800a6a8 <HAL_I2C_MasterRxCpltCallback>
}
 800adca:	e012      	b.n	800adf2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b40      	cmp	r3, #64	; 0x40
 800ae0c:	d117      	bne.n	800ae3e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d109      	bne.n	800ae2a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae26:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ae28:	e067      	b.n	800aefa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f043 0301 	orr.w	r3, r3, #1
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	611a      	str	r2, [r3, #16]
}
 800ae3c:	e05d      	b.n	800aefa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae46:	d133      	bne.n	800aeb0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b21      	cmp	r3, #33	; 0x21
 800ae52:	d109      	bne.n	800ae68 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae64:	611a      	str	r2, [r3, #16]
 800ae66:	e008      	b.n	800ae7a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <I2C_Master_SB+0x92>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d032      	beq.n	800aefa <I2C_Master_SB+0x100>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d02d      	beq.n	800aefa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeac:	605a      	str	r2, [r3, #4]
}
 800aeae:	e024      	b.n	800aefa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10e      	bne.n	800aed6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	11db      	asrs	r3, r3, #7
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	f003 0306 	and.w	r3, r3, #6
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f063 030f 	orn	r3, r3, #15
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	611a      	str	r2, [r3, #16]
}
 800aed4:	e011      	b.n	800aefa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d10d      	bne.n	800aefa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	11db      	asrs	r3, r3, #7
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	f003 0306 	and.w	r3, r3, #6
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f063 030e 	orn	r3, r3, #14
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	611a      	str	r2, [r3, #16]
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af12:	b2da      	uxtb	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d004      	beq.n	800af2c <I2C_Master_ADD10+0x26>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d108      	bne.n	800af3e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00c      	beq.n	800af4e <I2C_Master_ADD10+0x48>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d007      	beq.n	800af4e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af4c:	605a      	str	r2, [r3, #4]
  }
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b091      	sub	sp, #68	; 0x44
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af76:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b22      	cmp	r3, #34	; 0x22
 800af82:	f040 8169 	bne.w	800b258 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10f      	bne.n	800afae <I2C_Master_ADDR+0x54>
 800af8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d10b      	bne.n	800afae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af96:	2300      	movs	r3, #0
 800af98:	633b      	str	r3, [r7, #48]	; 0x30
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	633b      	str	r3, [r7, #48]	; 0x30
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	e160      	b.n	800b270 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d11d      	bne.n	800aff2 <I2C_Master_ADDR+0x98>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afbe:	d118      	bne.n	800aff2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afc0:	2300      	movs	r3, #0
 800afc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afe4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	651a      	str	r2, [r3, #80]	; 0x50
 800aff0:	e13e      	b.n	800b270 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d113      	bne.n	800b024 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800affc:	2300      	movs	r3, #0
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	62bb      	str	r3, [r7, #40]	; 0x28
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e115      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	f040 808a 	bne.w	800b144 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b036:	d137      	bne.n	800b0a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b046:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b056:	d113      	bne.n	800b080 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b066:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b068:	2300      	movs	r3, #0
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	627b      	str	r3, [r7, #36]	; 0x24
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	e0e7      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b080:	2300      	movs	r3, #0
 800b082:	623b      	str	r3, [r7, #32]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	623b      	str	r3, [r7, #32]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	623b      	str	r3, [r7, #32]
 800b094:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e0d3      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d02e      	beq.n	800b10c <I2C_Master_ADDR+0x1b2>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	d02b      	beq.n	800b10c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b6:	2b12      	cmp	r3, #18
 800b0b8:	d102      	bne.n	800b0c0 <I2C_Master_ADDR+0x166>
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d125      	bne.n	800b10c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d00e      	beq.n	800b0e4 <I2C_Master_ADDR+0x18a>
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d00b      	beq.n	800b0e4 <I2C_Master_ADDR+0x18a>
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	2b10      	cmp	r3, #16
 800b0d0:	d008      	beq.n	800b0e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e007      	b.n	800b0f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	61fb      	str	r3, [r7, #28]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	61fb      	str	r3, [r7, #28]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	61fb      	str	r3, [r7, #28]
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	e0a1      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b11a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b11c:	2300      	movs	r3, #0
 800b11e:	61bb      	str	r3, [r7, #24]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	61bb      	str	r3, [r7, #24]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	e085      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d14d      	bne.n	800b1ea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b150:	2b04      	cmp	r3, #4
 800b152:	d016      	beq.n	800b182 <I2C_Master_ADDR+0x228>
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	2b02      	cmp	r3, #2
 800b158:	d013      	beq.n	800b182 <I2C_Master_ADDR+0x228>
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	2b10      	cmp	r3, #16
 800b15e:	d010      	beq.n	800b182 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b16e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e007      	b.n	800b192 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b190:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b19c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1a0:	d117      	bne.n	800b1d2 <I2C_Master_ADDR+0x278>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b1a8:	d00b      	beq.n	800b1c2 <I2C_Master_ADDR+0x268>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d008      	beq.n	800b1c2 <I2C_Master_ADDR+0x268>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	2b08      	cmp	r3, #8
 800b1b4:	d005      	beq.n	800b1c2 <I2C_Master_ADDR+0x268>
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	2b10      	cmp	r3, #16
 800b1ba:	d002      	beq.n	800b1c2 <I2C_Master_ADDR+0x268>
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	d107      	bne.n	800b1d2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	617b      	str	r3, [r7, #20]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	e032      	b.n	800b250 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1f8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b208:	d117      	bne.n	800b23a <I2C_Master_ADDR+0x2e0>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b210:	d00b      	beq.n	800b22a <I2C_Master_ADDR+0x2d0>
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	2b01      	cmp	r3, #1
 800b216:	d008      	beq.n	800b22a <I2C_Master_ADDR+0x2d0>
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	2b08      	cmp	r3, #8
 800b21c:	d005      	beq.n	800b22a <I2C_Master_ADDR+0x2d0>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	2b10      	cmp	r3, #16
 800b222:	d002      	beq.n	800b22a <I2C_Master_ADDR+0x2d0>
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	2b20      	cmp	r3, #32
 800b228:	d107      	bne.n	800b23a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b238:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b23a:	2300      	movs	r3, #0
 800b23c:	613b      	str	r3, [r7, #16]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	613b      	str	r3, [r7, #16]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	613b      	str	r3, [r7, #16]
 800b24e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b256:	e00b      	b.n	800b270 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b258:	2300      	movs	r3, #0
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
}
 800b26e:	e7ff      	b.n	800b270 <I2C_Master_ADDR+0x316>
 800b270:	bf00      	nop
 800b272:	3744      	adds	r7, #68	; 0x44
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b290:	b29b      	uxth	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d02b      	beq.n	800b2ee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d114      	bne.n	800b2ee <I2C_SlaveTransmit_TXE+0x72>
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b29      	cmp	r3, #41	; 0x29
 800b2c8:	d111      	bne.n	800b2ee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2221      	movs	r2, #33	; 0x21
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2228      	movs	r2, #40	; 0x28
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff f9e7 	bl	800a6bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b302:	b29b      	uxth	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d011      	beq.n	800b32c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	781a      	ldrb	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b322:	b29b      	uxth	r3, r3
 800b324:	3b01      	subs	r3, #1
 800b326:	b29a      	uxth	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b346:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d02c      	beq.n	800b3ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	691a      	ldr	r2, [r3, #16]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	b2d2      	uxtb	r2, r2
 800b35e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d114      	bne.n	800b3ac <I2C_SlaveReceive_RXNE+0x74>
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2b2a      	cmp	r3, #42	; 0x2a
 800b386:	d111      	bne.n	800b3ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b396:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2222      	movs	r2, #34	; 0x22
 800b39c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2228      	movs	r2, #40	; 0x28
 800b3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7ff f992 	bl	800a6d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b3ac:	bf00      	nop
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d012      	beq.n	800b3ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b402:	2300      	movs	r3, #0
 800b404:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b412:	2b28      	cmp	r3, #40	; 0x28
 800b414:	d125      	bne.n	800b462 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b424:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b430:	2301      	movs	r3, #1
 800b432:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	81bb      	strh	r3, [r7, #12]
 800b444:	e002      	b.n	800b44c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b454:	89ba      	ldrh	r2, [r7, #12]
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff f942 	bl	800a6e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b460:	e00e      	b.n	800b480 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b462:	2300      	movs	r3, #0
 800b464:	60bb      	str	r3, [r7, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	60bb      	str	r3, [r7, #8]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b496:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b4a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60bb      	str	r3, [r7, #8]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	60bb      	str	r3, [r7, #8]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f042 0201 	orr.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e4:	d172      	bne.n	800b5cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2b22      	cmp	r3, #34	; 0x22
 800b4ea:	d002      	beq.n	800b4f2 <I2C_Slave_STOPF+0x6a>
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f0:	d135      	bne.n	800b55e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d005      	beq.n	800b516 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50e:	f043 0204 	orr.w	r2, r3, #4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b524:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd fce0 	bl	8008ef0 <HAL_DMA_GetState>
 800b530:	4603      	mov	r3, r0
 800b532:	2b01      	cmp	r3, #1
 800b534:	d049      	beq.n	800b5ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	4a69      	ldr	r2, [pc, #420]	; (800b6e0 <I2C_Slave_STOPF+0x258>)
 800b53c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b542:	4618      	mov	r0, r3
 800b544:	f7fd fb28 	bl	8008b98 <HAL_DMA_Abort_IT>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d03d      	beq.n	800b5ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b55c:	e035      	b.n	800b5ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	b29a      	uxth	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b570:	b29b      	uxth	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d005      	beq.n	800b582 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	f043 0204 	orr.w	r2, r3, #4
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b590:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd fcaa 	bl	8008ef0 <HAL_DMA_GetState>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d014      	beq.n	800b5cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a6:	4a4e      	ldr	r2, [pc, #312]	; (800b6e0 <I2C_Slave_STOPF+0x258>)
 800b5a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd faf2 	bl	8008b98 <HAL_DMA_Abort_IT>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d008      	beq.n	800b5cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	e000      	b.n	800b5cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d03e      	beq.n	800b654 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d112      	bne.n	800b60a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d112      	bne.n	800b63e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691a      	ldr	r2, [r3, #16]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b634:	b29b      	uxth	r3, r3
 800b636:	3b01      	subs	r3, #1
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d005      	beq.n	800b654 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64c:	f043 0204 	orr.w	r2, r3, #4
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f8b3 	bl	800b7c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b662:	e039      	b.n	800b6d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	2b2a      	cmp	r3, #42	; 0x2a
 800b668:	d109      	bne.n	800b67e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2228      	movs	r2, #40	; 0x28
 800b674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff f829 	bl	800a6d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b28      	cmp	r3, #40	; 0x28
 800b688:	d111      	bne.n	800b6ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a15      	ldr	r2, [pc, #84]	; (800b6e4 <I2C_Slave_STOPF+0x25c>)
 800b68e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2220      	movs	r2, #32
 800b69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff f82a 	bl	800a700 <HAL_I2C_ListenCpltCallback>
}
 800b6ac:	e014      	b.n	800b6d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b2:	2b22      	cmp	r3, #34	; 0x22
 800b6b4:	d002      	beq.n	800b6bc <I2C_Slave_STOPF+0x234>
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	2b22      	cmp	r3, #34	; 0x22
 800b6ba:	d10d      	bne.n	800b6d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7fe fffc 	bl	800a6d0 <HAL_I2C_SlaveRxCpltCallback>
}
 800b6d8:	bf00      	nop
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	0800bd29 	.word	0x0800bd29
 800b6e4:	ffff0000 	.word	0xffff0000

0800b6e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b08      	cmp	r3, #8
 800b702:	d002      	beq.n	800b70a <I2C_Slave_AF+0x22>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b20      	cmp	r3, #32
 800b708:	d129      	bne.n	800b75e <I2C_Slave_AF+0x76>
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	2b28      	cmp	r3, #40	; 0x28
 800b70e:	d126      	bne.n	800b75e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a2c      	ldr	r2, [pc, #176]	; (800b7c4 <I2C_Slave_AF+0xdc>)
 800b714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b724:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b72e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b73e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fe ffd2 	bl	800a700 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b75c:	e02e      	b.n	800b7bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	2b21      	cmp	r3, #33	; 0x21
 800b762:	d126      	bne.n	800b7b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a17      	ldr	r2, [pc, #92]	; (800b7c4 <I2C_Slave_AF+0xdc>)
 800b768:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2221      	movs	r2, #33	; 0x21
 800b76e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2220      	movs	r2, #32
 800b774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b78e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b798:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7fe ff86 	bl	800a6bc <HAL_I2C_SlaveTxCpltCallback>
}
 800b7b0:	e004      	b.n	800b7bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b7ba:	615a      	str	r2, [r3, #20]
}
 800b7bc:	bf00      	nop
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	ffff0000 	.word	0xffff0000

0800b7c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	d002      	beq.n	800b7ec <I2C_ITError+0x24>
 800b7e6:	7bbb      	ldrb	r3, [r7, #14]
 800b7e8:	2b40      	cmp	r3, #64	; 0x40
 800b7ea:	d10a      	bne.n	800b802 <I2C_ITError+0x3a>
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	2b22      	cmp	r3, #34	; 0x22
 800b7f0:	d107      	bne.n	800b802 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b800:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b802:	7bfb      	ldrb	r3, [r7, #15]
 800b804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b808:	2b28      	cmp	r3, #40	; 0x28
 800b80a:	d107      	bne.n	800b81c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2228      	movs	r2, #40	; 0x28
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b81a:	e015      	b.n	800b848 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b82a:	d00a      	beq.n	800b842 <I2C_ITError+0x7a>
 800b82c:	7bfb      	ldrb	r3, [r7, #15]
 800b82e:	2b60      	cmp	r3, #96	; 0x60
 800b830:	d007      	beq.n	800b842 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2220      	movs	r2, #32
 800b836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b856:	d162      	bne.n	800b91e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b866:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b01      	cmp	r3, #1
 800b874:	d020      	beq.n	800b8b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87a:	4a6a      	ldr	r2, [pc, #424]	; (800ba24 <I2C_ITError+0x25c>)
 800b87c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b882:	4618      	mov	r0, r3
 800b884:	f7fd f988 	bl	8008b98 <HAL_DMA_Abort_IT>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8089 	beq.w	800b9a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f022 0201 	bic.w	r2, r2, #1
 800b89e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	4798      	blx	r3
 800b8b6:	e074      	b.n	800b9a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8bc:	4a59      	ldr	r2, [pc, #356]	; (800ba24 <I2C_ITError+0x25c>)
 800b8be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fd f967 	bl	8008b98 <HAL_DMA_Abort_IT>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d068      	beq.n	800b9a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8da:	2b40      	cmp	r3, #64	; 0x40
 800b8dc:	d10b      	bne.n	800b8f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f022 0201 	bic.w	r2, r2, #1
 800b904:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b918:	4610      	mov	r0, r2
 800b91a:	4798      	blx	r3
 800b91c:	e041      	b.n	800b9a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b60      	cmp	r3, #96	; 0x60
 800b928:	d125      	bne.n	800b976 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2220      	movs	r2, #32
 800b92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b942:	2b40      	cmp	r3, #64	; 0x40
 800b944:	d10b      	bne.n	800b95e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	691a      	ldr	r2, [r3, #16]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	b2d2      	uxtb	r2, r2
 800b952:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	1c5a      	adds	r2, r3, #1
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fe feee 	bl	800a750 <HAL_I2C_AbortCpltCallback>
 800b974:	e015      	b.n	800b9a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b980:	2b40      	cmp	r3, #64	; 0x40
 800b982:	d10b      	bne.n	800b99c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	691a      	ldr	r2, [r3, #16]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7fe fecd 	bl	800a73c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10e      	bne.n	800b9d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d109      	bne.n	800b9d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d104      	bne.n	800b9d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b9de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ec:	f003 0304 	and.w	r3, r3, #4
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d113      	bne.n	800ba1c <I2C_ITError+0x254>
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	2b28      	cmp	r3, #40	; 0x28
 800b9f8:	d110      	bne.n	800ba1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a0a      	ldr	r2, [pc, #40]	; (800ba28 <I2C_ITError+0x260>)
 800b9fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7fe fe72 	bl	800a700 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	0800bd29 	.word	0x0800bd29
 800ba28:	ffff0000 	.word	0xffff0000

0800ba2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af02      	add	r7, sp, #8
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	4608      	mov	r0, r1
 800ba36:	4611      	mov	r1, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	817b      	strh	r3, [r7, #10]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	813b      	strh	r3, [r7, #8]
 800ba42:	4613      	mov	r3, r2
 800ba44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 fa08 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00d      	beq.n	800ba8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba7c:	d103      	bne.n	800ba86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e05f      	b.n	800bb4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba8a:	897b      	ldrh	r3, [r7, #10]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	461a      	mov	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ba98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	6a3a      	ldr	r2, [r7, #32]
 800ba9e:	492d      	ldr	r1, [pc, #180]	; (800bb54 <I2C_RequestMemoryWrite+0x128>)
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fa40 	bl	800bf26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e04c      	b.n	800bb4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bab0:	2300      	movs	r3, #0
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac8:	6a39      	ldr	r1, [r7, #32]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f000 faaa 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	2b04      	cmp	r3, #4
 800badc:	d107      	bne.n	800baee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e02b      	b.n	800bb4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d105      	bne.n	800bb04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800baf8:	893b      	ldrh	r3, [r7, #8]
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	611a      	str	r2, [r3, #16]
 800bb02:	e021      	b.n	800bb48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bb04:	893b      	ldrh	r3, [r7, #8]
 800bb06:	0a1b      	lsrs	r3, r3, #8
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb14:	6a39      	ldr	r1, [r7, #32]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 fa84 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00d      	beq.n	800bb3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d107      	bne.n	800bb3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e005      	b.n	800bb4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bb3e:	893b      	ldrh	r3, [r7, #8]
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	00010002 	.word	0x00010002

0800bb58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	4608      	mov	r0, r1
 800bb62:	4611      	mov	r1, r2
 800bb64:	461a      	mov	r2, r3
 800bb66:	4603      	mov	r3, r0
 800bb68:	817b      	strh	r3, [r7, #10]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	813b      	strh	r3, [r7, #8]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f000 f96a 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00d      	beq.n	800bbc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb8:	d103      	bne.n	800bbc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e0aa      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bbc6:	897b      	ldrh	r3, [r7, #10]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	461a      	mov	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bbd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	6a3a      	ldr	r2, [r7, #32]
 800bbda:	4952      	ldr	r1, [pc, #328]	; (800bd24 <I2C_RequestMemoryRead+0x1cc>)
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 f9a2 	bl	800bf26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e097      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc04:	6a39      	ldr	r1, [r7, #32]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 fa0c 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00d      	beq.n	800bc2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d107      	bne.n	800bc2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e076      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc2e:	88fb      	ldrh	r3, [r7, #6]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d105      	bne.n	800bc40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc34:	893b      	ldrh	r3, [r7, #8]
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	611a      	str	r2, [r3, #16]
 800bc3e:	e021      	b.n	800bc84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bc40:	893b      	ldrh	r3, [r7, #8]
 800bc42:	0a1b      	lsrs	r3, r3, #8
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc50:	6a39      	ldr	r1, [r7, #32]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f9e6 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	2b04      	cmp	r3, #4
 800bc64:	d107      	bne.n	800bc76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e050      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc86:	6a39      	ldr	r1, [r7, #32]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f9cb 	bl	800c024 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00d      	beq.n	800bcb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	d107      	bne.n	800bcac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e035      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f8d3 	bl	800be78 <I2C_WaitOnFlagUntilTimeout>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00d      	beq.n	800bcf4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce6:	d103      	bne.n	800bcf0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e013      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bcf4:	897b      	ldrh	r3, [r7, #10]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	6a3a      	ldr	r2, [r7, #32]
 800bd08:	4906      	ldr	r1, [pc, #24]	; (800bd24 <I2C_RequestMemoryRead+0x1cc>)
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f000 f90b 	bl	800bf26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	00010002 	.word	0x00010002

0800bd28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bd42:	4b4b      	ldr	r3, [pc, #300]	; (800be70 <I2C_DMAAbort+0x148>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	08db      	lsrs	r3, r3, #3
 800bd48:	4a4a      	ldr	r2, [pc, #296]	; (800be74 <I2C_DMAAbort+0x14c>)
 800bd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4e:	0a1a      	lsrs	r2, r3, #8
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	00da      	lsls	r2, r3, #3
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	f043 0220 	orr.w	r2, r3, #32
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800bd6e:	e00a      	b.n	800bd86 <I2C_DMAAbort+0x5e>
    }
    count--;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd84:	d0ea      	beq.n	800bd5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd92:	2200      	movs	r2, #0
 800bd94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	2200      	movs	r2, #0
 800bda4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc8:	2200      	movs	r2, #0
 800bdca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	2200      	movs	r2, #0
 800bdda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f022 0201 	bic.w	r2, r2, #1
 800bdea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b60      	cmp	r3, #96	; 0x60
 800bdf6:	d10e      	bne.n	800be16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2200      	movs	r2, #0
 800be0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	f7fe fc9e 	bl	800a750 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be14:	e027      	b.n	800be66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800be16:	7cfb      	ldrb	r3, [r7, #19]
 800be18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800be1c:	2b28      	cmp	r3, #40	; 0x28
 800be1e:	d117      	bne.n	800be50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0201 	orr.w	r2, r2, #1
 800be2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2200      	movs	r2, #0
 800be44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2228      	movs	r2, #40	; 0x28
 800be4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800be4e:	e007      	b.n	800be60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2220      	movs	r2, #32
 800be54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800be60:	6978      	ldr	r0, [r7, #20]
 800be62:	f7fe fc6b 	bl	800a73c <HAL_I2C_ErrorCallback>
}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000024 	.word	0x20000024
 800be74:	14f8b589 	.word	0x14f8b589

0800be78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	4613      	mov	r3, r2
 800be86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be88:	e025      	b.n	800bed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be90:	d021      	beq.n	800bed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be92:	f7fc fbc9 	bl	8008628 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d302      	bcc.n	800bea8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d116      	bne.n	800bed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec2:	f043 0220 	orr.w	r2, r3, #32
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e023      	b.n	800bf1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	0c1b      	lsrs	r3, r3, #16
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d10d      	bne.n	800befc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	43da      	mvns	r2, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	4013      	ands	r3, r2
 800beec:	b29b      	uxth	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	bf0c      	ite	eq
 800bef2:	2301      	moveq	r3, #1
 800bef4:	2300      	movne	r3, #0
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	461a      	mov	r2, r3
 800befa:	e00c      	b.n	800bf16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	43da      	mvns	r2, r3
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	4013      	ands	r3, r2
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	bf0c      	ite	eq
 800bf0e:	2301      	moveq	r3, #1
 800bf10:	2300      	movne	r3, #0
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	461a      	mov	r2, r3
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d0b6      	beq.n	800be8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
 800bf32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf34:	e051      	b.n	800bfda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf44:	d123      	bne.n	800bf8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f043 0204 	orr.w	r2, r3, #4
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e046      	b.n	800c01c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d021      	beq.n	800bfda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf96:	f7fc fb47 	bl	8008628 <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d302      	bcc.n	800bfac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d116      	bne.n	800bfda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	f043 0220 	orr.w	r2, r3, #32
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e020      	b.n	800c01c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	0c1b      	lsrs	r3, r3, #16
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d10c      	bne.n	800bffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	43da      	mvns	r2, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	4013      	ands	r3, r2
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bf14      	ite	ne
 800bff6:	2301      	movne	r3, #1
 800bff8:	2300      	moveq	r3, #0
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	e00b      	b.n	800c016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	43da      	mvns	r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	4013      	ands	r3, r2
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bf14      	ite	ne
 800c010:	2301      	movne	r3, #1
 800c012:	2300      	moveq	r3, #0
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d18d      	bne.n	800bf36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c030:	e02d      	b.n	800c08e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f000 f900 	bl	800c238 <I2C_IsAcknowledgeFailed>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e02d      	b.n	800c09e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d021      	beq.n	800c08e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c04a:	f7fc faed 	bl	8008628 <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	429a      	cmp	r2, r3
 800c058:	d302      	bcc.n	800c060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d116      	bne.n	800c08e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2220      	movs	r2, #32
 800c06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07a:	f043 0220 	orr.w	r2, r3, #32
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e007      	b.n	800c09e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	695b      	ldr	r3, [r3, #20]
 800c094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c098:	2b80      	cmp	r3, #128	; 0x80
 800c09a:	d1ca      	bne.n	800c032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c0b2:	e02d      	b.n	800c110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f000 f8bf 	bl	800c238 <I2C_IsAcknowledgeFailed>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e02d      	b.n	800c120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d021      	beq.n	800c110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0cc:	f7fc faac 	bl	8008628 <HAL_GetTick>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d302      	bcc.n	800c0e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d116      	bne.n	800c110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0fc:	f043 0220 	orr.w	r2, r3, #32
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e007      	b.n	800c120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	f003 0304 	and.w	r3, r3, #4
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d1ca      	bne.n	800c0b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c134:	4b13      	ldr	r3, [pc, #76]	; (800c184 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	08db      	lsrs	r3, r3, #3
 800c13a:	4a13      	ldr	r2, [pc, #76]	; (800c188 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c13c:	fba2 2303 	umull	r2, r3, r2, r3
 800c140:	0a1a      	lsrs	r2, r3, #8
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d107      	bne.n	800c166 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15a:	f043 0220 	orr.w	r2, r3, #32
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e008      	b.n	800c178 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c174:	d0e9      	beq.n	800c14a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	20000024 	.word	0x20000024
 800c188:	14f8b589 	.word	0x14f8b589

0800c18c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c198:	e042      	b.n	800c220 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b10      	cmp	r3, #16
 800c1a6:	d119      	bne.n	800c1dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f06f 0210 	mvn.w	r2, #16
 800c1b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2220      	movs	r2, #32
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e029      	b.n	800c230 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1dc:	f7fc fa24 	bl	8008628 <HAL_GetTick>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d302      	bcc.n	800c1f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d116      	bne.n	800c220 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	f043 0220 	orr.w	r2, r3, #32
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e007      	b.n	800c230 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22a:	2b40      	cmp	r3, #64	; 0x40
 800c22c:	d1b5      	bne.n	800c19a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c24e:	d11b      	bne.n	800c288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c274:	f043 0204 	orr.w	r2, r3, #4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e000      	b.n	800c28a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c296:	b480      	push	{r7}
 800c298:	b083      	sub	sp, #12
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c2a6:	d103      	bne.n	800c2b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c2ae:	e007      	b.n	800c2c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c2b8:	d102      	bne.n	800c2c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2208      	movs	r2, #8
 800c2be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e267      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d075      	beq.n	800c3d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c2ea:	4b88      	ldr	r3, [pc, #544]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f003 030c 	and.w	r3, r3, #12
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d00c      	beq.n	800c310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2f6:	4b85      	ldr	r3, [pc, #532]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	d112      	bne.n	800c328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c302:	4b82      	ldr	r3, [pc, #520]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c30a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c30e:	d10b      	bne.n	800c328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c310:	4b7e      	ldr	r3, [pc, #504]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d05b      	beq.n	800c3d4 <HAL_RCC_OscConfig+0x108>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d157      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e242      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c330:	d106      	bne.n	800c340 <HAL_RCC_OscConfig+0x74>
 800c332:	4b76      	ldr	r3, [pc, #472]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a75      	ldr	r2, [pc, #468]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c33c:	6013      	str	r3, [r2, #0]
 800c33e:	e01d      	b.n	800c37c <HAL_RCC_OscConfig+0xb0>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c348:	d10c      	bne.n	800c364 <HAL_RCC_OscConfig+0x98>
 800c34a:	4b70      	ldr	r3, [pc, #448]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a6f      	ldr	r2, [pc, #444]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	4b6d      	ldr	r3, [pc, #436]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a6c      	ldr	r2, [pc, #432]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c35c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	e00b      	b.n	800c37c <HAL_RCC_OscConfig+0xb0>
 800c364:	4b69      	ldr	r3, [pc, #420]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a68      	ldr	r2, [pc, #416]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c36a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	4b66      	ldr	r3, [pc, #408]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a65      	ldr	r2, [pc, #404]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c37a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d013      	beq.n	800c3ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c384:	f7fc f950 	bl	8008628 <HAL_GetTick>
 800c388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c38a:	e008      	b.n	800c39e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c38c:	f7fc f94c 	bl	8008628 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b64      	cmp	r3, #100	; 0x64
 800c398:	d901      	bls.n	800c39e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e207      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c39e:	4b5b      	ldr	r3, [pc, #364]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0f0      	beq.n	800c38c <HAL_RCC_OscConfig+0xc0>
 800c3aa:	e014      	b.n	800c3d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3ac:	f7fc f93c 	bl	8008628 <HAL_GetTick>
 800c3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3b2:	e008      	b.n	800c3c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3b4:	f7fc f938 	bl	8008628 <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b64      	cmp	r3, #100	; 0x64
 800c3c0:	d901      	bls.n	800c3c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e1f3      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3c6:	4b51      	ldr	r3, [pc, #324]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1f0      	bne.n	800c3b4 <HAL_RCC_OscConfig+0xe8>
 800c3d2:	e000      	b.n	800c3d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d063      	beq.n	800c4aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c3e2:	4b4a      	ldr	r3, [pc, #296]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	f003 030c 	and.w	r3, r3, #12
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00b      	beq.n	800c406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3ee:	4b47      	ldr	r3, [pc, #284]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c3f6:	2b08      	cmp	r3, #8
 800c3f8:	d11c      	bne.n	800c434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3fa:	4b44      	ldr	r3, [pc, #272]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c402:	2b00      	cmp	r3, #0
 800c404:	d116      	bne.n	800c434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c406:	4b41      	ldr	r3, [pc, #260]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d005      	beq.n	800c41e <HAL_RCC_OscConfig+0x152>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d001      	beq.n	800c41e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e1c7      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c41e:	4b3b      	ldr	r3, [pc, #236]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	4937      	ldr	r1, [pc, #220]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c432:	e03a      	b.n	800c4aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d020      	beq.n	800c47e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c43c:	4b34      	ldr	r3, [pc, #208]	; (800c510 <HAL_RCC_OscConfig+0x244>)
 800c43e:	2201      	movs	r2, #1
 800c440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c442:	f7fc f8f1 	bl	8008628 <HAL_GetTick>
 800c446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c448:	e008      	b.n	800c45c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c44a:	f7fc f8ed 	bl	8008628 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e1a8      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c45c:	4b2b      	ldr	r3, [pc, #172]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0f0      	beq.n	800c44a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c468:	4b28      	ldr	r3, [pc, #160]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	00db      	lsls	r3, r3, #3
 800c476:	4925      	ldr	r1, [pc, #148]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	600b      	str	r3, [r1, #0]
 800c47c:	e015      	b.n	800c4aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c47e:	4b24      	ldr	r3, [pc, #144]	; (800c510 <HAL_RCC_OscConfig+0x244>)
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c484:	f7fc f8d0 	bl	8008628 <HAL_GetTick>
 800c488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c48a:	e008      	b.n	800c49e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c48c:	f7fc f8cc 	bl	8008628 <HAL_GetTick>
 800c490:	4602      	mov	r2, r0
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	2b02      	cmp	r3, #2
 800c498:	d901      	bls.n	800c49e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e187      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c49e:	4b1b      	ldr	r3, [pc, #108]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 0302 	and.w	r3, r3, #2
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1f0      	bne.n	800c48c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0308 	and.w	r3, r3, #8
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d036      	beq.n	800c524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d016      	beq.n	800c4ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4be:	4b15      	ldr	r3, [pc, #84]	; (800c514 <HAL_RCC_OscConfig+0x248>)
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c4:	f7fc f8b0 	bl	8008628 <HAL_GetTick>
 800c4c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4cc:	f7fc f8ac 	bl	8008628 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e167      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4de:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <HAL_RCC_OscConfig+0x240>)
 800c4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0f0      	beq.n	800c4cc <HAL_RCC_OscConfig+0x200>
 800c4ea:	e01b      	b.n	800c524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <HAL_RCC_OscConfig+0x248>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c4f2:	f7fc f899 	bl	8008628 <HAL_GetTick>
 800c4f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c4f8:	e00e      	b.n	800c518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4fa:	f7fc f895 	bl	8008628 <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b02      	cmp	r3, #2
 800c506:	d907      	bls.n	800c518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e150      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
 800c50c:	40023800 	.word	0x40023800
 800c510:	42470000 	.word	0x42470000
 800c514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c518:	4b88      	ldr	r3, [pc, #544]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51c:	f003 0302 	and.w	r3, r3, #2
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1ea      	bne.n	800c4fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0304 	and.w	r3, r3, #4
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 8097 	beq.w	800c660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c532:	2300      	movs	r3, #0
 800c534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c536:	4b81      	ldr	r3, [pc, #516]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10f      	bne.n	800c562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c542:	2300      	movs	r3, #0
 800c544:	60bb      	str	r3, [r7, #8]
 800c546:	4b7d      	ldr	r3, [pc, #500]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	4a7c      	ldr	r2, [pc, #496]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c550:	6413      	str	r3, [r2, #64]	; 0x40
 800c552:	4b7a      	ldr	r3, [pc, #488]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c55a:	60bb      	str	r3, [r7, #8]
 800c55c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c55e:	2301      	movs	r3, #1
 800c560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c562:	4b77      	ldr	r3, [pc, #476]	; (800c740 <HAL_RCC_OscConfig+0x474>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d118      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c56e:	4b74      	ldr	r3, [pc, #464]	; (800c740 <HAL_RCC_OscConfig+0x474>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a73      	ldr	r2, [pc, #460]	; (800c740 <HAL_RCC_OscConfig+0x474>)
 800c574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c57a:	f7fc f855 	bl	8008628 <HAL_GetTick>
 800c57e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c580:	e008      	b.n	800c594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c582:	f7fc f851 	bl	8008628 <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d901      	bls.n	800c594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c590:	2303      	movs	r3, #3
 800c592:	e10c      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c594:	4b6a      	ldr	r3, [pc, #424]	; (800c740 <HAL_RCC_OscConfig+0x474>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0f0      	beq.n	800c582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d106      	bne.n	800c5b6 <HAL_RCC_OscConfig+0x2ea>
 800c5a8:	4b64      	ldr	r3, [pc, #400]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ac:	4a63      	ldr	r2, [pc, #396]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5ae:	f043 0301 	orr.w	r3, r3, #1
 800c5b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c5b4:	e01c      	b.n	800c5f0 <HAL_RCC_OscConfig+0x324>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b05      	cmp	r3, #5
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x30c>
 800c5be:	4b5f      	ldr	r3, [pc, #380]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c2:	4a5e      	ldr	r2, [pc, #376]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5c4:	f043 0304 	orr.w	r3, r3, #4
 800c5c8:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ca:	4b5c      	ldr	r3, [pc, #368]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	4a5b      	ldr	r2, [pc, #364]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5d0:	f043 0301 	orr.w	r3, r3, #1
 800c5d4:	6713      	str	r3, [r2, #112]	; 0x70
 800c5d6:	e00b      	b.n	800c5f0 <HAL_RCC_OscConfig+0x324>
 800c5d8:	4b58      	ldr	r3, [pc, #352]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5dc:	4a57      	ldr	r2, [pc, #348]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	6713      	str	r3, [r2, #112]	; 0x70
 800c5e4:	4b55      	ldr	r3, [pc, #340]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e8:	4a54      	ldr	r2, [pc, #336]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c5ea:	f023 0304 	bic.w	r3, r3, #4
 800c5ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d015      	beq.n	800c624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5f8:	f7fc f816 	bl	8008628 <HAL_GetTick>
 800c5fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5fe:	e00a      	b.n	800c616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c600:	f7fc f812 	bl	8008628 <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c60e:	4293      	cmp	r3, r2
 800c610:	d901      	bls.n	800c616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c612:	2303      	movs	r3, #3
 800c614:	e0cb      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c616:	4b49      	ldr	r3, [pc, #292]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0ee      	beq.n	800c600 <HAL_RCC_OscConfig+0x334>
 800c622:	e014      	b.n	800c64e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c624:	f7fc f800 	bl	8008628 <HAL_GetTick>
 800c628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c62a:	e00a      	b.n	800c642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c62c:	f7fb fffc 	bl	8008628 <HAL_GetTick>
 800c630:	4602      	mov	r2, r0
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	f241 3288 	movw	r2, #5000	; 0x1388
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d901      	bls.n	800c642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e0b5      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c642:	4b3e      	ldr	r3, [pc, #248]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1ee      	bne.n	800c62c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d105      	bne.n	800c660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c654:	4b39      	ldr	r3, [pc, #228]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	4a38      	ldr	r2, [pc, #224]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c65a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c65e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80a1 	beq.w	800c7ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c66a:	4b34      	ldr	r3, [pc, #208]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	f003 030c 	and.w	r3, r3, #12
 800c672:	2b08      	cmp	r3, #8
 800c674:	d05c      	beq.n	800c730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d141      	bne.n	800c702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c67e:	4b31      	ldr	r3, [pc, #196]	; (800c744 <HAL_RCC_OscConfig+0x478>)
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c684:	f7fb ffd0 	bl	8008628 <HAL_GetTick>
 800c688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c68a:	e008      	b.n	800c69e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c68c:	f7fb ffcc 	bl	8008628 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2b02      	cmp	r3, #2
 800c698:	d901      	bls.n	800c69e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e087      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c69e:	4b27      	ldr	r3, [pc, #156]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1f0      	bne.n	800c68c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69da      	ldr	r2, [r3, #28]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b8:	019b      	lsls	r3, r3, #6
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c0:	085b      	lsrs	r3, r3, #1
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	041b      	lsls	r3, r3, #16
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	061b      	lsls	r3, r3, #24
 800c6ce:	491b      	ldr	r1, [pc, #108]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c6d4:	4b1b      	ldr	r3, [pc, #108]	; (800c744 <HAL_RCC_OscConfig+0x478>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6da:	f7fb ffa5 	bl	8008628 <HAL_GetTick>
 800c6de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6e0:	e008      	b.n	800c6f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6e2:	f7fb ffa1 	bl	8008628 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e05c      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6f4:	4b11      	ldr	r3, [pc, #68]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x416>
 800c700:	e054      	b.n	800c7ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c702:	4b10      	ldr	r3, [pc, #64]	; (800c744 <HAL_RCC_OscConfig+0x478>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c708:	f7fb ff8e 	bl	8008628 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c710:	f7fb ff8a 	bl	8008628 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e045      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c722:	4b06      	ldr	r3, [pc, #24]	; (800c73c <HAL_RCC_OscConfig+0x470>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f0      	bne.n	800c710 <HAL_RCC_OscConfig+0x444>
 800c72e:	e03d      	b.n	800c7ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d107      	bne.n	800c748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e038      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
 800c73c:	40023800 	.word	0x40023800
 800c740:	40007000 	.word	0x40007000
 800c744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c748:	4b1b      	ldr	r3, [pc, #108]	; (800c7b8 <HAL_RCC_OscConfig+0x4ec>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d028      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c760:	429a      	cmp	r2, r3
 800c762:	d121      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c76e:	429a      	cmp	r2, r3
 800c770:	d11a      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c778:	4013      	ands	r3, r2
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c77e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c780:	4293      	cmp	r3, r2
 800c782:	d111      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	085b      	lsrs	r3, r3, #1
 800c790:	3b01      	subs	r3, #1
 800c792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c794:	429a      	cmp	r2, r3
 800c796:	d107      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d001      	beq.n	800c7ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e000      	b.n	800c7ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	40023800 	.word	0x40023800

0800c7bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e0cc      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c7d0:	4b68      	ldr	r3, [pc, #416]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d90c      	bls.n	800c7f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7de:	4b65      	ldr	r3, [pc, #404]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	b2d2      	uxtb	r2, r2
 800c7e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7e6:	4b63      	ldr	r3, [pc, #396]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 0307 	and.w	r3, r3, #7
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d001      	beq.n	800c7f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e0b8      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 0302 	and.w	r3, r3, #2
 800c800:	2b00      	cmp	r3, #0
 800c802:	d020      	beq.n	800c846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0304 	and.w	r3, r3, #4
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d005      	beq.n	800c81c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c810:	4b59      	ldr	r3, [pc, #356]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	4a58      	ldr	r2, [pc, #352]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c81a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d005      	beq.n	800c834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c828:	4b53      	ldr	r3, [pc, #332]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	4a52      	ldr	r2, [pc, #328]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c82e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c834:	4b50      	ldr	r3, [pc, #320]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	494d      	ldr	r1, [pc, #308]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c842:	4313      	orrs	r3, r2
 800c844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d044      	beq.n	800c8dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d107      	bne.n	800c86a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c85a:	4b47      	ldr	r3, [pc, #284]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d119      	bne.n	800c89a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e07f      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d003      	beq.n	800c87a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c876:	2b03      	cmp	r3, #3
 800c878:	d107      	bne.n	800c88a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c87a:	4b3f      	ldr	r3, [pc, #252]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c882:	2b00      	cmp	r3, #0
 800c884:	d109      	bne.n	800c89a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e06f      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c88a:	4b3b      	ldr	r3, [pc, #236]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e067      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c89a:	4b37      	ldr	r3, [pc, #220]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f023 0203 	bic.w	r2, r3, #3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	4934      	ldr	r1, [pc, #208]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c8ac:	f7fb febc 	bl	8008628 <HAL_GetTick>
 800c8b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8b2:	e00a      	b.n	800c8ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8b4:	f7fb feb8 	bl	8008628 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d901      	bls.n	800c8ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e04f      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8ca:	4b2b      	ldr	r3, [pc, #172]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	f003 020c 	and.w	r2, r3, #12
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d1eb      	bne.n	800c8b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c8dc:	4b25      	ldr	r3, [pc, #148]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0307 	and.w	r3, r3, #7
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d20c      	bcs.n	800c904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8ea:	4b22      	ldr	r3, [pc, #136]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8f2:	4b20      	ldr	r3, [pc, #128]	; (800c974 <HAL_RCC_ClockConfig+0x1b8>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d001      	beq.n	800c904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e032      	b.n	800c96a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 0304 	and.w	r3, r3, #4
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d008      	beq.n	800c922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c910:	4b19      	ldr	r3, [pc, #100]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	4916      	ldr	r1, [pc, #88]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c91e:	4313      	orrs	r3, r2
 800c920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 0308 	and.w	r3, r3, #8
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d009      	beq.n	800c942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c92e:	4b12      	ldr	r3, [pc, #72]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	490e      	ldr	r1, [pc, #56]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c942:	f000 f821 	bl	800c988 <HAL_RCC_GetSysClockFreq>
 800c946:	4602      	mov	r2, r0
 800c948:	4b0b      	ldr	r3, [pc, #44]	; (800c978 <HAL_RCC_ClockConfig+0x1bc>)
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	091b      	lsrs	r3, r3, #4
 800c94e:	f003 030f 	and.w	r3, r3, #15
 800c952:	490a      	ldr	r1, [pc, #40]	; (800c97c <HAL_RCC_ClockConfig+0x1c0>)
 800c954:	5ccb      	ldrb	r3, [r1, r3]
 800c956:	fa22 f303 	lsr.w	r3, r2, r3
 800c95a:	4a09      	ldr	r2, [pc, #36]	; (800c980 <HAL_RCC_ClockConfig+0x1c4>)
 800c95c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c95e:	4b09      	ldr	r3, [pc, #36]	; (800c984 <HAL_RCC_ClockConfig+0x1c8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4618      	mov	r0, r3
 800c964:	f7fb fe1c 	bl	80085a0 <HAL_InitTick>

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	40023c00 	.word	0x40023c00
 800c978:	40023800 	.word	0x40023800
 800c97c:	0800ffcc 	.word	0x0800ffcc
 800c980:	20000024 	.word	0x20000024
 800c984:	20000028 	.word	0x20000028

0800c988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c98c:	b090      	sub	sp, #64	; 0x40
 800c98e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	637b      	str	r3, [r7, #52]	; 0x34
 800c994:	2300      	movs	r3, #0
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c998:	2300      	movs	r3, #0
 800c99a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c9a0:	4b59      	ldr	r3, [pc, #356]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f003 030c 	and.w	r3, r3, #12
 800c9a8:	2b08      	cmp	r3, #8
 800c9aa:	d00d      	beq.n	800c9c8 <HAL_RCC_GetSysClockFreq+0x40>
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	f200 80a1 	bhi.w	800caf4 <HAL_RCC_GetSysClockFreq+0x16c>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <HAL_RCC_GetSysClockFreq+0x34>
 800c9b6:	2b04      	cmp	r3, #4
 800c9b8:	d003      	beq.n	800c9c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c9ba:	e09b      	b.n	800caf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c9bc:	4b53      	ldr	r3, [pc, #332]	; (800cb0c <HAL_RCC_GetSysClockFreq+0x184>)
 800c9be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800c9c0:	e09b      	b.n	800cafa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c9c2:	4b53      	ldr	r3, [pc, #332]	; (800cb10 <HAL_RCC_GetSysClockFreq+0x188>)
 800c9c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c9c6:	e098      	b.n	800cafa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c9c8:	4b4f      	ldr	r3, [pc, #316]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c9d2:	4b4d      	ldr	r3, [pc, #308]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d028      	beq.n	800ca30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9de:	4b4a      	ldr	r3, [pc, #296]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	099b      	lsrs	r3, r3, #6
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	623b      	str	r3, [r7, #32]
 800c9e8:	627a      	str	r2, [r7, #36]	; 0x24
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	4b47      	ldr	r3, [pc, #284]	; (800cb10 <HAL_RCC_GetSysClockFreq+0x188>)
 800c9f4:	fb03 f201 	mul.w	r2, r3, r1
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	fb00 f303 	mul.w	r3, r0, r3
 800c9fe:	4413      	add	r3, r2
 800ca00:	4a43      	ldr	r2, [pc, #268]	; (800cb10 <HAL_RCC_GetSysClockFreq+0x188>)
 800ca02:	fba0 1202 	umull	r1, r2, r0, r2
 800ca06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca08:	460a      	mov	r2, r1
 800ca0a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca0e:	4413      	add	r3, r2
 800ca10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca14:	2200      	movs	r2, #0
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	61fa      	str	r2, [r7, #28]
 800ca1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ca22:	f7f4 f895 	bl	8000b50 <__aeabi_uldivmod>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca2e:	e053      	b.n	800cad8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca30:	4b35      	ldr	r3, [pc, #212]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	099b      	lsrs	r3, r3, #6
 800ca36:	2200      	movs	r2, #0
 800ca38:	613b      	str	r3, [r7, #16]
 800ca3a:	617a      	str	r2, [r7, #20]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ca42:	f04f 0b00 	mov.w	fp, #0
 800ca46:	4652      	mov	r2, sl
 800ca48:	465b      	mov	r3, fp
 800ca4a:	f04f 0000 	mov.w	r0, #0
 800ca4e:	f04f 0100 	mov.w	r1, #0
 800ca52:	0159      	lsls	r1, r3, #5
 800ca54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca58:	0150      	lsls	r0, r2, #5
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	ebb2 080a 	subs.w	r8, r2, sl
 800ca62:	eb63 090b 	sbc.w	r9, r3, fp
 800ca66:	f04f 0200 	mov.w	r2, #0
 800ca6a:	f04f 0300 	mov.w	r3, #0
 800ca6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ca72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ca76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ca7a:	ebb2 0408 	subs.w	r4, r2, r8
 800ca7e:	eb63 0509 	sbc.w	r5, r3, r9
 800ca82:	f04f 0200 	mov.w	r2, #0
 800ca86:	f04f 0300 	mov.w	r3, #0
 800ca8a:	00eb      	lsls	r3, r5, #3
 800ca8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca90:	00e2      	lsls	r2, r4, #3
 800ca92:	4614      	mov	r4, r2
 800ca94:	461d      	mov	r5, r3
 800ca96:	eb14 030a 	adds.w	r3, r4, sl
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	eb45 030b 	adc.w	r3, r5, fp
 800caa0:	607b      	str	r3, [r7, #4]
 800caa2:	f04f 0200 	mov.w	r2, #0
 800caa6:	f04f 0300 	mov.w	r3, #0
 800caaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800caae:	4629      	mov	r1, r5
 800cab0:	028b      	lsls	r3, r1, #10
 800cab2:	4621      	mov	r1, r4
 800cab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cab8:	4621      	mov	r1, r4
 800caba:	028a      	lsls	r2, r1, #10
 800cabc:	4610      	mov	r0, r2
 800cabe:	4619      	mov	r1, r3
 800cac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac2:	2200      	movs	r2, #0
 800cac4:	60bb      	str	r3, [r7, #8]
 800cac6:	60fa      	str	r2, [r7, #12]
 800cac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cacc:	f7f4 f840 	bl	8000b50 <__aeabi_uldivmod>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4613      	mov	r3, r2
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cad8:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <HAL_RCC_GetSysClockFreq+0x180>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	0c1b      	lsrs	r3, r3, #16
 800cade:	f003 0303 	and.w	r3, r3, #3
 800cae2:	3301      	adds	r3, #1
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800cae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800caf2:	e002      	b.n	800cafa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800caf4:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <HAL_RCC_GetSysClockFreq+0x184>)
 800caf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800caf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3740      	adds	r7, #64	; 0x40
 800cb00:	46bd      	mov	sp, r7
 800cb02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb06:	bf00      	nop
 800cb08:	40023800 	.word	0x40023800
 800cb0c:	00f42400 	.word	0x00f42400
 800cb10:	017d7840 	.word	0x017d7840

0800cb14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <HAL_RCC_GetHCLKFreq+0x14>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20000024 	.word	0x20000024

0800cb2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cb30:	f7ff fff0 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800cb34:	4602      	mov	r2, r0
 800cb36:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	0a9b      	lsrs	r3, r3, #10
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	4903      	ldr	r1, [pc, #12]	; (800cb50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb42:	5ccb      	ldrb	r3, [r1, r3]
 800cb44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	40023800 	.word	0x40023800
 800cb50:	0800ffdc 	.word	0x0800ffdc

0800cb54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cb58:	f7ff ffdc 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	0b5b      	lsrs	r3, r3, #13
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	4903      	ldr	r1, [pc, #12]	; (800cb78 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb6a:	5ccb      	ldrb	r3, [r1, r3]
 800cb6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	40023800 	.word	0x40023800
 800cb78:	0800ffdc 	.word	0x0800ffdc

0800cb7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e041      	b.n	800cc12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7fb f956 	bl	8007e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2202      	movs	r2, #2
 800cbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f000 fdae 	bl	800d71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d001      	beq.n	800cc34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e04e      	b.n	800ccd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f042 0201 	orr.w	r2, r2, #1
 800cc4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a23      	ldr	r2, [pc, #140]	; (800cce0 <HAL_TIM_Base_Start_IT+0xc4>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d022      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc5e:	d01d      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a1f      	ldr	r2, [pc, #124]	; (800cce4 <HAL_TIM_Base_Start_IT+0xc8>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d018      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a1e      	ldr	r2, [pc, #120]	; (800cce8 <HAL_TIM_Base_Start_IT+0xcc>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d013      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a1c      	ldr	r2, [pc, #112]	; (800ccec <HAL_TIM_Base_Start_IT+0xd0>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d00e      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a1b      	ldr	r2, [pc, #108]	; (800ccf0 <HAL_TIM_Base_Start_IT+0xd4>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d009      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a19      	ldr	r2, [pc, #100]	; (800ccf4 <HAL_TIM_Base_Start_IT+0xd8>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d004      	beq.n	800cc9c <HAL_TIM_Base_Start_IT+0x80>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a18      	ldr	r2, [pc, #96]	; (800ccf8 <HAL_TIM_Base_Start_IT+0xdc>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d111      	bne.n	800ccc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b06      	cmp	r3, #6
 800ccac:	d010      	beq.n	800ccd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f042 0201 	orr.w	r2, r2, #1
 800ccbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccbe:	e007      	b.n	800ccd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f042 0201 	orr.w	r2, r2, #1
 800ccce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	40010000 	.word	0x40010000
 800cce4:	40000400 	.word	0x40000400
 800cce8:	40000800 	.word	0x40000800
 800ccec:	40000c00 	.word	0x40000c00
 800ccf0:	40010400 	.word	0x40010400
 800ccf4:	40014000 	.word	0x40014000
 800ccf8:	40001800 	.word	0x40001800

0800ccfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e041      	b.n	800cd92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f839 	bl	800cd9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f000 fcee 	bl	800d71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b083      	sub	sp, #12
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
	...

0800cdb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d109      	bne.n	800cdd4 <HAL_TIM_PWM_Start+0x24>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	bf14      	ite	ne
 800cdcc:	2301      	movne	r3, #1
 800cdce:	2300      	moveq	r3, #0
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	e022      	b.n	800ce1a <HAL_TIM_PWM_Start+0x6a>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b04      	cmp	r3, #4
 800cdd8:	d109      	bne.n	800cdee <HAL_TIM_PWM_Start+0x3e>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	bf14      	ite	ne
 800cde6:	2301      	movne	r3, #1
 800cde8:	2300      	moveq	r3, #0
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	e015      	b.n	800ce1a <HAL_TIM_PWM_Start+0x6a>
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	2b08      	cmp	r3, #8
 800cdf2:	d109      	bne.n	800ce08 <HAL_TIM_PWM_Start+0x58>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	bf14      	ite	ne
 800ce00:	2301      	movne	r3, #1
 800ce02:	2300      	moveq	r3, #0
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	e008      	b.n	800ce1a <HAL_TIM_PWM_Start+0x6a>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	bf14      	ite	ne
 800ce14:	2301      	movne	r3, #1
 800ce16:	2300      	moveq	r3, #0
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e07c      	b.n	800cf1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d104      	bne.n	800ce32 <HAL_TIM_PWM_Start+0x82>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce30:	e013      	b.n	800ce5a <HAL_TIM_PWM_Start+0xaa>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b04      	cmp	r3, #4
 800ce36:	d104      	bne.n	800ce42 <HAL_TIM_PWM_Start+0x92>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce40:	e00b      	b.n	800ce5a <HAL_TIM_PWM_Start+0xaa>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d104      	bne.n	800ce52 <HAL_TIM_PWM_Start+0xa2>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce50:	e003      	b.n	800ce5a <HAL_TIM_PWM_Start+0xaa>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2202      	movs	r2, #2
 800ce56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 ff44 	bl	800dcf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a2d      	ldr	r2, [pc, #180]	; (800cf24 <HAL_TIM_PWM_Start+0x174>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d004      	beq.n	800ce7c <HAL_TIM_PWM_Start+0xcc>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a2c      	ldr	r2, [pc, #176]	; (800cf28 <HAL_TIM_PWM_Start+0x178>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d101      	bne.n	800ce80 <HAL_TIM_PWM_Start+0xd0>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e000      	b.n	800ce82 <HAL_TIM_PWM_Start+0xd2>
 800ce80:	2300      	movs	r3, #0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d007      	beq.n	800ce96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a22      	ldr	r2, [pc, #136]	; (800cf24 <HAL_TIM_PWM_Start+0x174>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d022      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cea8:	d01d      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a1f      	ldr	r2, [pc, #124]	; (800cf2c <HAL_TIM_PWM_Start+0x17c>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d018      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a1d      	ldr	r2, [pc, #116]	; (800cf30 <HAL_TIM_PWM_Start+0x180>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d013      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a1c      	ldr	r2, [pc, #112]	; (800cf34 <HAL_TIM_PWM_Start+0x184>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00e      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a16      	ldr	r2, [pc, #88]	; (800cf28 <HAL_TIM_PWM_Start+0x178>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d009      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a18      	ldr	r2, [pc, #96]	; (800cf38 <HAL_TIM_PWM_Start+0x188>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d004      	beq.n	800cee6 <HAL_TIM_PWM_Start+0x136>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a16      	ldr	r2, [pc, #88]	; (800cf3c <HAL_TIM_PWM_Start+0x18c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d111      	bne.n	800cf0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	f003 0307 	and.w	r3, r3, #7
 800cef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b06      	cmp	r3, #6
 800cef6:	d010      	beq.n	800cf1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f042 0201 	orr.w	r2, r2, #1
 800cf06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf08:	e007      	b.n	800cf1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f042 0201 	orr.w	r2, r2, #1
 800cf18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	40010000 	.word	0x40010000
 800cf28:	40010400 	.word	0x40010400
 800cf2c:	40000400 	.word	0x40000400
 800cf30:	40000800 	.word	0x40000800
 800cf34:	40000c00 	.word	0x40000c00
 800cf38:	40014000 	.word	0x40014000
 800cf3c:	40001800 	.word	0x40001800

0800cf40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e097      	b.n	800d084 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7fa fff5 	bl	8007f58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2202      	movs	r2, #2
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	6812      	ldr	r2, [r2, #0]
 800cf80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf84:	f023 0307 	bic.w	r3, r3, #7
 800cf88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3304      	adds	r3, #4
 800cf92:	4619      	mov	r1, r3
 800cf94:	4610      	mov	r0, r2
 800cf96:	f000 fbc1 	bl	800d71c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfc2:	f023 0303 	bic.w	r3, r3, #3
 800cfc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	021b      	lsls	r3, r3, #8
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	693a      	ldr	r2, [r7, #16]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cfe0:	f023 030c 	bic.w	r3, r3, #12
 800cfe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	021b      	lsls	r3, r3, #8
 800cffc:	4313      	orrs	r3, r2
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	4313      	orrs	r3, r2
 800d002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	011a      	lsls	r2, r3, #4
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	031b      	lsls	r3, r3, #12
 800d010:	4313      	orrs	r3, r2
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	4313      	orrs	r3, r2
 800d016:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d01e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d026:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	4313      	orrs	r3, r2
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	4313      	orrs	r3, r2
 800d038:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2201      	movs	r2, #1
 800d076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3718      	adds	r7, #24
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d09c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d110      	bne.n	800d0de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d102      	bne.n	800d0c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d0c2:	7b7b      	ldrb	r3, [r7, #13]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d001      	beq.n	800d0cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e069      	b.n	800d1a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0dc:	e031      	b.n	800d142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b04      	cmp	r3, #4
 800d0e2:	d110      	bne.n	800d106 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d102      	bne.n	800d0f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d0ea:	7b3b      	ldrb	r3, [r7, #12]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d001      	beq.n	800d0f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e055      	b.n	800d1a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2202      	movs	r2, #2
 800d100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d104:	e01d      	b.n	800d142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d108      	bne.n	800d11e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d105      	bne.n	800d11e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d112:	7b7b      	ldrb	r3, [r7, #13]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d102      	bne.n	800d11e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d118:	7b3b      	ldrb	r3, [r7, #12]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d001      	beq.n	800d122 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e03e      	b.n	800d1a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2202      	movs	r2, #2
 800d126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2202      	movs	r2, #2
 800d12e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2202      	movs	r2, #2
 800d136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2202      	movs	r2, #2
 800d13e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d003      	beq.n	800d150 <HAL_TIM_Encoder_Start+0xc4>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d008      	beq.n	800d160 <HAL_TIM_Encoder_Start+0xd4>
 800d14e:	e00f      	b.n	800d170 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2201      	movs	r2, #1
 800d156:	2100      	movs	r1, #0
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fdc9 	bl	800dcf0 <TIM_CCxChannelCmd>
      break;
 800d15e:	e016      	b.n	800d18e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2201      	movs	r2, #1
 800d166:	2104      	movs	r1, #4
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 fdc1 	bl	800dcf0 <TIM_CCxChannelCmd>
      break;
 800d16e:	e00e      	b.n	800d18e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2201      	movs	r2, #1
 800d176:	2100      	movs	r1, #0
 800d178:	4618      	mov	r0, r3
 800d17a:	f000 fdb9 	bl	800dcf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2201      	movs	r2, #1
 800d184:	2104      	movs	r1, #4
 800d186:	4618      	mov	r0, r3
 800d188:	f000 fdb2 	bl	800dcf0 <TIM_CCxChannelCmd>
      break;
 800d18c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f042 0201 	orr.w	r2, r2, #1
 800d19c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	f003 0302 	and.w	r3, r3, #2
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d122      	bne.n	800d204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	f003 0302 	and.w	r3, r3, #2
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d11b      	bne.n	800d204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f06f 0202 	mvn.w	r2, #2
 800d1d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	f003 0303 	and.w	r3, r3, #3
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fa77 	bl	800d6de <HAL_TIM_IC_CaptureCallback>
 800d1f0:	e005      	b.n	800d1fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fa69 	bl	800d6ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa7a 	bl	800d6f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	f003 0304 	and.w	r3, r3, #4
 800d20e:	2b04      	cmp	r3, #4
 800d210:	d122      	bne.n	800d258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	f003 0304 	and.w	r3, r3, #4
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	d11b      	bne.n	800d258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f06f 0204 	mvn.w	r2, #4
 800d228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2202      	movs	r2, #2
 800d22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa4d 	bl	800d6de <HAL_TIM_IC_CaptureCallback>
 800d244:	e005      	b.n	800d252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa3f 	bl	800d6ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fa50 	bl	800d6f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	f003 0308 	and.w	r3, r3, #8
 800d262:	2b08      	cmp	r3, #8
 800d264:	d122      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0308 	and.w	r3, r3, #8
 800d270:	2b08      	cmp	r3, #8
 800d272:	d11b      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f06f 0208 	mvn.w	r2, #8
 800d27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2204      	movs	r2, #4
 800d282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa23 	bl	800d6de <HAL_TIM_IC_CaptureCallback>
 800d298:	e005      	b.n	800d2a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fa15 	bl	800d6ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fa26 	bl	800d6f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	f003 0310 	and.w	r3, r3, #16
 800d2b6:	2b10      	cmp	r3, #16
 800d2b8:	d122      	bne.n	800d300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	f003 0310 	and.w	r3, r3, #16
 800d2c4:	2b10      	cmp	r3, #16
 800d2c6:	d11b      	bne.n	800d300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f06f 0210 	mvn.w	r2, #16
 800d2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2208      	movs	r2, #8
 800d2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f9f9 	bl	800d6de <HAL_TIM_IC_CaptureCallback>
 800d2ec:	e005      	b.n	800d2fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f9eb 	bl	800d6ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f9fc 	bl	800d6f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d10e      	bne.n	800d32c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d107      	bne.n	800d32c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f06f 0201 	mvn.w	r2, #1
 800d324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7f3 ff7a 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d336:	2b80      	cmp	r3, #128	; 0x80
 800d338:	d10e      	bne.n	800d358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d344:	2b80      	cmp	r3, #128	; 0x80
 800d346:	d107      	bne.n	800d358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fdca 	bl	800deec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d362:	2b40      	cmp	r3, #64	; 0x40
 800d364:	d10e      	bne.n	800d384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d370:	2b40      	cmp	r3, #64	; 0x40
 800d372:	d107      	bne.n	800d384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f9c1 	bl	800d706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	f003 0320 	and.w	r3, r3, #32
 800d38e:	2b20      	cmp	r3, #32
 800d390:	d10e      	bne.n	800d3b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	f003 0320 	and.w	r3, r3, #32
 800d39c:	2b20      	cmp	r3, #32
 800d39e:	d107      	bne.n	800d3b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f06f 0220 	mvn.w	r2, #32
 800d3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fd94 	bl	800ded8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d101      	bne.n	800d3d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	e0ae      	b.n	800d534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b0c      	cmp	r3, #12
 800d3e2:	f200 809f 	bhi.w	800d524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d421 	.word	0x0800d421
 800d3f0:	0800d525 	.word	0x0800d525
 800d3f4:	0800d525 	.word	0x0800d525
 800d3f8:	0800d525 	.word	0x0800d525
 800d3fc:	0800d461 	.word	0x0800d461
 800d400:	0800d525 	.word	0x0800d525
 800d404:	0800d525 	.word	0x0800d525
 800d408:	0800d525 	.word	0x0800d525
 800d40c:	0800d4a3 	.word	0x0800d4a3
 800d410:	0800d525 	.word	0x0800d525
 800d414:	0800d525 	.word	0x0800d525
 800d418:	0800d525 	.word	0x0800d525
 800d41c:	0800d4e3 	.word	0x0800d4e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fa18 	bl	800d85c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	699a      	ldr	r2, [r3, #24]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f042 0208 	orr.w	r2, r2, #8
 800d43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0204 	bic.w	r2, r2, #4
 800d44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6999      	ldr	r1, [r3, #24]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	691a      	ldr	r2, [r3, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	430a      	orrs	r2, r1
 800d45c:	619a      	str	r2, [r3, #24]
      break;
 800d45e:	e064      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68b9      	ldr	r1, [r7, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fa68 	bl	800d93c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	699a      	ldr	r2, [r3, #24]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6999      	ldr	r1, [r3, #24]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	021a      	lsls	r2, r3, #8
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	619a      	str	r2, [r3, #24]
      break;
 800d4a0:	e043      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f000 fabd 	bl	800da28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	69da      	ldr	r2, [r3, #28]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0208 	orr.w	r2, r2, #8
 800d4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 0204 	bic.w	r2, r2, #4
 800d4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	691a      	ldr	r2, [r3, #16]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	61da      	str	r2, [r3, #28]
      break;
 800d4e0:	e023      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fb11 	bl	800db10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69da      	ldr	r2, [r3, #28]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	69d9      	ldr	r1, [r3, #28]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	021a      	lsls	r2, r3, #8
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	61da      	str	r2, [r3, #28]
      break;
 800d522:	e002      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	75fb      	strb	r3, [r7, #23]
      break;
 800d528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d532:	7dfb      	ldrb	r3, [r7, #23]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d550:	2b01      	cmp	r3, #1
 800d552:	d101      	bne.n	800d558 <HAL_TIM_ConfigClockSource+0x1c>
 800d554:	2302      	movs	r3, #2
 800d556:	e0b4      	b.n	800d6c2 <HAL_TIM_ConfigClockSource+0x186>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d57e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d590:	d03e      	beq.n	800d610 <HAL_TIM_ConfigClockSource+0xd4>
 800d592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d596:	f200 8087 	bhi.w	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d59e:	f000 8086 	beq.w	800d6ae <HAL_TIM_ConfigClockSource+0x172>
 800d5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5a6:	d87f      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5a8:	2b70      	cmp	r3, #112	; 0x70
 800d5aa:	d01a      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0xa6>
 800d5ac:	2b70      	cmp	r3, #112	; 0x70
 800d5ae:	d87b      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5b0:	2b60      	cmp	r3, #96	; 0x60
 800d5b2:	d050      	beq.n	800d656 <HAL_TIM_ConfigClockSource+0x11a>
 800d5b4:	2b60      	cmp	r3, #96	; 0x60
 800d5b6:	d877      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5b8:	2b50      	cmp	r3, #80	; 0x50
 800d5ba:	d03c      	beq.n	800d636 <HAL_TIM_ConfigClockSource+0xfa>
 800d5bc:	2b50      	cmp	r3, #80	; 0x50
 800d5be:	d873      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c0:	2b40      	cmp	r3, #64	; 0x40
 800d5c2:	d058      	beq.n	800d676 <HAL_TIM_ConfigClockSource+0x13a>
 800d5c4:	2b40      	cmp	r3, #64	; 0x40
 800d5c6:	d86f      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c8:	2b30      	cmp	r3, #48	; 0x30
 800d5ca:	d064      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x15a>
 800d5cc:	2b30      	cmp	r3, #48	; 0x30
 800d5ce:	d86b      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	d060      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x15a>
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	d867      	bhi.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d05c      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x15a>
 800d5dc:	2b10      	cmp	r3, #16
 800d5de:	d05a      	beq.n	800d696 <HAL_TIM_ConfigClockSource+0x15a>
 800d5e0:	e062      	b.n	800d6a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6899      	ldr	r1, [r3, #8]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f000 fb5d 	bl	800dcb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	609a      	str	r2, [r3, #8]
      break;
 800d60e:	e04f      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6818      	ldr	r0, [r3, #0]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	6899      	ldr	r1, [r3, #8]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f000 fb46 	bl	800dcb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	689a      	ldr	r2, [r3, #8]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d632:	609a      	str	r2, [r3, #8]
      break;
 800d634:	e03c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6859      	ldr	r1, [r3, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	461a      	mov	r2, r3
 800d644:	f000 faba 	bl	800dbbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2150      	movs	r1, #80	; 0x50
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fb13 	bl	800dc7a <TIM_ITRx_SetConfig>
      break;
 800d654:	e02c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6818      	ldr	r0, [r3, #0]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	6859      	ldr	r1, [r3, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	461a      	mov	r2, r3
 800d664:	f000 fad9 	bl	800dc1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2160      	movs	r1, #96	; 0x60
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fb03 	bl	800dc7a <TIM_ITRx_SetConfig>
      break;
 800d674:	e01c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	6859      	ldr	r1, [r3, #4]
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	461a      	mov	r2, r3
 800d684:	f000 fa9a 	bl	800dbbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 faf3 	bl	800dc7a <TIM_ITRx_SetConfig>
      break;
 800d694:	e00c      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f000 faea 	bl	800dc7a <TIM_ITRx_SetConfig>
      break;
 800d6a6:	e003      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d6ac:	e000      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d6ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b083      	sub	sp, #12
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d6d2:	bf00      	nop
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6e6:	bf00      	nop
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d6fa:	bf00      	nop
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d70e:	bf00      	nop
 800d710:	370c      	adds	r7, #12
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
	...

0800d71c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a40      	ldr	r2, [pc, #256]	; (800d830 <TIM_Base_SetConfig+0x114>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d013      	beq.n	800d75c <TIM_Base_SetConfig+0x40>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d73a:	d00f      	beq.n	800d75c <TIM_Base_SetConfig+0x40>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a3d      	ldr	r2, [pc, #244]	; (800d834 <TIM_Base_SetConfig+0x118>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d00b      	beq.n	800d75c <TIM_Base_SetConfig+0x40>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4a3c      	ldr	r2, [pc, #240]	; (800d838 <TIM_Base_SetConfig+0x11c>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d007      	beq.n	800d75c <TIM_Base_SetConfig+0x40>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a3b      	ldr	r2, [pc, #236]	; (800d83c <TIM_Base_SetConfig+0x120>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d003      	beq.n	800d75c <TIM_Base_SetConfig+0x40>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a3a      	ldr	r2, [pc, #232]	; (800d840 <TIM_Base_SetConfig+0x124>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d108      	bne.n	800d76e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a2f      	ldr	r2, [pc, #188]	; (800d830 <TIM_Base_SetConfig+0x114>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d02b      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d77c:	d027      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a2c      	ldr	r2, [pc, #176]	; (800d834 <TIM_Base_SetConfig+0x118>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d023      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a2b      	ldr	r2, [pc, #172]	; (800d838 <TIM_Base_SetConfig+0x11c>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d01f      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a2a      	ldr	r2, [pc, #168]	; (800d83c <TIM_Base_SetConfig+0x120>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d01b      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a29      	ldr	r2, [pc, #164]	; (800d840 <TIM_Base_SetConfig+0x124>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d017      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a28      	ldr	r2, [pc, #160]	; (800d844 <TIM_Base_SetConfig+0x128>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d013      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a27      	ldr	r2, [pc, #156]	; (800d848 <TIM_Base_SetConfig+0x12c>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d00f      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a26      	ldr	r2, [pc, #152]	; (800d84c <TIM_Base_SetConfig+0x130>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d00b      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a25      	ldr	r2, [pc, #148]	; (800d850 <TIM_Base_SetConfig+0x134>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d007      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a24      	ldr	r2, [pc, #144]	; (800d854 <TIM_Base_SetConfig+0x138>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d003      	beq.n	800d7ce <TIM_Base_SetConfig+0xb2>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a23      	ldr	r2, [pc, #140]	; (800d858 <TIM_Base_SetConfig+0x13c>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d108      	bne.n	800d7e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	695b      	ldr	r3, [r3, #20]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	689a      	ldr	r2, [r3, #8]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a0a      	ldr	r2, [pc, #40]	; (800d830 <TIM_Base_SetConfig+0x114>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d003      	beq.n	800d814 <TIM_Base_SetConfig+0xf8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a0c      	ldr	r2, [pc, #48]	; (800d840 <TIM_Base_SetConfig+0x124>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d103      	bne.n	800d81c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	691a      	ldr	r2, [r3, #16]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	615a      	str	r2, [r3, #20]
}
 800d822:	bf00      	nop
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	40010000 	.word	0x40010000
 800d834:	40000400 	.word	0x40000400
 800d838:	40000800 	.word	0x40000800
 800d83c:	40000c00 	.word	0x40000c00
 800d840:	40010400 	.word	0x40010400
 800d844:	40014000 	.word	0x40014000
 800d848:	40014400 	.word	0x40014400
 800d84c:	40014800 	.word	0x40014800
 800d850:	40001800 	.word	0x40001800
 800d854:	40001c00 	.word	0x40001c00
 800d858:	40002000 	.word	0x40002000

0800d85c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	f023 0201 	bic.w	r2, r3, #1
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a1b      	ldr	r3, [r3, #32]
 800d876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f023 0303 	bic.w	r3, r3, #3
 800d892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f023 0302 	bic.w	r3, r3, #2
 800d8a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a20      	ldr	r2, [pc, #128]	; (800d934 <TIM_OC1_SetConfig+0xd8>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d003      	beq.n	800d8c0 <TIM_OC1_SetConfig+0x64>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a1f      	ldr	r2, [pc, #124]	; (800d938 <TIM_OC1_SetConfig+0xdc>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d10c      	bne.n	800d8da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f023 0308 	bic.w	r3, r3, #8
 800d8c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f023 0304 	bic.w	r3, r3, #4
 800d8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a15      	ldr	r2, [pc, #84]	; (800d934 <TIM_OC1_SetConfig+0xd8>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d003      	beq.n	800d8ea <TIM_OC1_SetConfig+0x8e>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a14      	ldr	r2, [pc, #80]	; (800d938 <TIM_OC1_SetConfig+0xdc>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d111      	bne.n	800d90e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	4313      	orrs	r3, r2
 800d902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	621a      	str	r2, [r3, #32]
}
 800d928:	bf00      	nop
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	40010000 	.word	0x40010000
 800d938:	40010400 	.word	0x40010400

0800d93c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	f023 0210 	bic.w	r2, r3, #16
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	021b      	lsls	r3, r3, #8
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	f023 0320 	bic.w	r3, r3, #32
 800d986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	4313      	orrs	r3, r2
 800d992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a22      	ldr	r2, [pc, #136]	; (800da20 <TIM_OC2_SetConfig+0xe4>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d003      	beq.n	800d9a4 <TIM_OC2_SetConfig+0x68>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a21      	ldr	r2, [pc, #132]	; (800da24 <TIM_OC2_SetConfig+0xe8>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d10d      	bne.n	800d9c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	011b      	lsls	r3, r3, #4
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a17      	ldr	r2, [pc, #92]	; (800da20 <TIM_OC2_SetConfig+0xe4>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_OC2_SetConfig+0x94>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a16      	ldr	r2, [pc, #88]	; (800da24 <TIM_OC2_SetConfig+0xe8>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d113      	bne.n	800d9f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	621a      	str	r2, [r3, #32]
}
 800da12:	bf00      	nop
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	40010000 	.word	0x40010000
 800da24:	40010400 	.word	0x40010400

0800da28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f023 0303 	bic.w	r3, r3, #3
 800da5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	4313      	orrs	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	021b      	lsls	r3, r3, #8
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4a21      	ldr	r2, [pc, #132]	; (800db08 <TIM_OC3_SetConfig+0xe0>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d003      	beq.n	800da8e <TIM_OC3_SetConfig+0x66>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a20      	ldr	r2, [pc, #128]	; (800db0c <TIM_OC3_SetConfig+0xe4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d10d      	bne.n	800daaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	021b      	lsls	r3, r3, #8
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800daa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a16      	ldr	r2, [pc, #88]	; (800db08 <TIM_OC3_SetConfig+0xe0>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d003      	beq.n	800daba <TIM_OC3_SetConfig+0x92>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a15      	ldr	r2, [pc, #84]	; (800db0c <TIM_OC3_SetConfig+0xe4>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d113      	bne.n	800dae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	699b      	ldr	r3, [r3, #24]
 800dada:	011b      	lsls	r3, r3, #4
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	4313      	orrs	r3, r2
 800dae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	621a      	str	r2, [r3, #32]
}
 800dafc:	bf00      	nop
 800dafe:	371c      	adds	r7, #28
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	40010000 	.word	0x40010000
 800db0c:	40010400 	.word	0x40010400

0800db10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db10:	b480      	push	{r7}
 800db12:	b087      	sub	sp, #28
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a1b      	ldr	r3, [r3, #32]
 800db2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	4313      	orrs	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	031b      	lsls	r3, r3, #12
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	4313      	orrs	r3, r2
 800db66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a12      	ldr	r2, [pc, #72]	; (800dbb4 <TIM_OC4_SetConfig+0xa4>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d003      	beq.n	800db78 <TIM_OC4_SetConfig+0x68>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a11      	ldr	r2, [pc, #68]	; (800dbb8 <TIM_OC4_SetConfig+0xa8>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d109      	bne.n	800db8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	019b      	lsls	r3, r3, #6
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4313      	orrs	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	621a      	str	r2, [r3, #32]
}
 800dba6:	bf00      	nop
 800dba8:	371c      	adds	r7, #28
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	40010000 	.word	0x40010000
 800dbb8:	40010400 	.word	0x40010400

0800dbbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6a1b      	ldr	r3, [r3, #32]
 800dbcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	f023 0201 	bic.w	r2, r3, #1
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	699b      	ldr	r3, [r3, #24]
 800dbde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	011b      	lsls	r3, r3, #4
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f023 030a 	bic.w	r3, r3, #10
 800dbf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	693a      	ldr	r2, [r7, #16]
 800dc06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	621a      	str	r2, [r3, #32]
}
 800dc0e:	bf00      	nop
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b087      	sub	sp, #28
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	f023 0210 	bic.w	r2, r3, #16
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6a1b      	ldr	r3, [r3, #32]
 800dc3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	031b      	lsls	r3, r3, #12
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	011b      	lsls	r3, r3, #4
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	621a      	str	r2, [r3, #32]
}
 800dc6e:	bf00      	nop
 800dc70:	371c      	adds	r7, #28
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	f043 0307 	orr.w	r3, r3, #7
 800dc9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	609a      	str	r2, [r3, #8]
}
 800dca4:	bf00      	nop
 800dca6:	3714      	adds	r7, #20
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	021a      	lsls	r2, r3, #8
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	697a      	ldr	r2, [r7, #20]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	609a      	str	r2, [r3, #8]
}
 800dce4:	bf00      	nop
 800dce6:	371c      	adds	r7, #28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f003 031f 	and.w	r3, r3, #31
 800dd02:	2201      	movs	r2, #1
 800dd04:	fa02 f303 	lsl.w	r3, r2, r3
 800dd08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6a1a      	ldr	r2, [r3, #32]
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	43db      	mvns	r3, r3
 800dd12:	401a      	ands	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6a1a      	ldr	r2, [r3, #32]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f003 031f 	and.w	r3, r3, #31
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	fa01 f303 	lsl.w	r3, r1, r3
 800dd28:	431a      	orrs	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	621a      	str	r2, [r3, #32]
}
 800dd2e:	bf00      	nop
 800dd30:	371c      	adds	r7, #28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
	...

0800dd3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d101      	bne.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd50:	2302      	movs	r3, #2
 800dd52:	e05a      	b.n	800de0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2202      	movs	r2, #2
 800dd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a21      	ldr	r2, [pc, #132]	; (800de18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d022      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dda0:	d01d      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a1d      	ldr	r2, [pc, #116]	; (800de1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d018      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a1b      	ldr	r2, [pc, #108]	; (800de20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d013      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a1a      	ldr	r2, [pc, #104]	; (800de24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d00e      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a18      	ldr	r2, [pc, #96]	; (800de28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d009      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a17      	ldr	r2, [pc, #92]	; (800de2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d004      	beq.n	800ddde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a15      	ldr	r2, [pc, #84]	; (800de30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d10c      	bne.n	800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dde4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	40010000 	.word	0x40010000
 800de1c:	40000400 	.word	0x40000400
 800de20:	40000800 	.word	0x40000800
 800de24:	40000c00 	.word	0x40000c00
 800de28:	40010400 	.word	0x40010400
 800de2c:	40014000 	.word	0x40014000
 800de30:	40001800 	.word	0x40001800

0800de34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de3e:	2300      	movs	r3, #0
 800de40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d101      	bne.n	800de50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800de4c:	2302      	movs	r3, #2
 800de4e:	e03d      	b.n	800decc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	4313      	orrs	r3, r2
 800de64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	4313      	orrs	r3, r2
 800de72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	4313      	orrs	r3, r2
 800de80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d101      	bne.n	800df12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	e03f      	b.n	800df92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d106      	bne.n	800df2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7fa f972 	bl	8008210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2224      	movs	r2, #36	; 0x24
 800df30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68da      	ldr	r2, [r3, #12]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 ff43 	bl	800edd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	691a      	ldr	r2, [r3, #16]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	695a      	ldr	r2, [r3, #20]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2220      	movs	r2, #32
 800df84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2220      	movs	r2, #32
 800df8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08c      	sub	sp, #48	; 0x30
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b20      	cmp	r3, #32
 800dfb4:	d165      	bne.n	800e082 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <HAL_UART_Transmit_DMA+0x26>
 800dfbc:	88fb      	ldrh	r3, [r7, #6]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d101      	bne.n	800dfc6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e05e      	b.n	800e084 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d101      	bne.n	800dfd4 <HAL_UART_Transmit_DMA+0x38>
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	e057      	b.n	800e084 <HAL_UART_Transmit_DMA+0xe8>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	88fa      	ldrh	r2, [r7, #6]
 800dfe6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	88fa      	ldrh	r2, [r7, #6]
 800dfec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2221      	movs	r2, #33	; 0x21
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e000:	4a22      	ldr	r2, [pc, #136]	; (800e08c <HAL_UART_Transmit_DMA+0xf0>)
 800e002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e008:	4a21      	ldr	r2, [pc, #132]	; (800e090 <HAL_UART_Transmit_DMA+0xf4>)
 800e00a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e010:	4a20      	ldr	r2, [pc, #128]	; (800e094 <HAL_UART_Transmit_DMA+0xf8>)
 800e012:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e018:	2200      	movs	r2, #0
 800e01a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	6819      	ldr	r1, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3304      	adds	r3, #4
 800e030:	461a      	mov	r2, r3
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	f7fa fce8 	bl	8008a08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e040:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3314      	adds	r3, #20
 800e050:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	e853 3f00 	ldrex	r3, [r3]
 800e058:	617b      	str	r3, [r7, #20]
   return(result);
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e060:	62bb      	str	r3, [r7, #40]	; 0x28
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3314      	adds	r3, #20
 800e068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e06a:	627a      	str	r2, [r7, #36]	; 0x24
 800e06c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06e:	6a39      	ldr	r1, [r7, #32]
 800e070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e072:	e841 2300 	strex	r3, r2, [r1]
 800e076:	61fb      	str	r3, [r7, #28]
   return(result);
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1e5      	bne.n	800e04a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	e000      	b.n	800e084 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800e082:	2302      	movs	r3, #2
  }
}
 800e084:	4618      	mov	r0, r3
 800e086:	3730      	adds	r7, #48	; 0x30
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	0800e669 	.word	0x0800e669
 800e090:	0800e703 	.word	0x0800e703
 800e094:	0800e87b 	.word	0x0800e87b

0800e098 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b20      	cmp	r3, #32
 800e0b0:	d11d      	bne.n	800e0ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <HAL_UART_Receive_DMA+0x26>
 800e0b8:	88fb      	ldrh	r3, [r7, #6]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e016      	b.n	800e0f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d101      	bne.n	800e0d0 <HAL_UART_Receive_DMA+0x38>
 800e0cc:	2302      	movs	r3, #2
 800e0ce:	e00f      	b.n	800e0f0 <HAL_UART_Receive_DMA+0x58>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e0de:	88fb      	ldrh	r3, [r7, #6]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 fc13 	bl	800e910 <UART_Start_Receive_DMA>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	e000      	b.n	800e0f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e0ee:	2302      	movs	r3, #2
  }
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b0ba      	sub	sp, #232	; 0xe8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e11e:	2300      	movs	r3, #0
 800e120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e124:	2300      	movs	r3, #0
 800e126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e12e:	f003 030f 	and.w	r3, r3, #15
 800e132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10f      	bne.n	800e15e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b00      	cmp	r3, #0
 800e148:	d009      	beq.n	800e15e <HAL_UART_IRQHandler+0x66>
 800e14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e14e:	f003 0320 	and.w	r3, r3, #32
 800e152:	2b00      	cmp	r3, #0
 800e154:	d003      	beq.n	800e15e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fd7f 	bl	800ec5a <UART_Receive_IT>
      return;
 800e15c:	e256      	b.n	800e60c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e15e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e162:	2b00      	cmp	r3, #0
 800e164:	f000 80de 	beq.w	800e324 <HAL_UART_IRQHandler+0x22c>
 800e168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e16c:	f003 0301 	and.w	r3, r3, #1
 800e170:	2b00      	cmp	r3, #0
 800e172:	d106      	bne.n	800e182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e178:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f000 80d1 	beq.w	800e324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00b      	beq.n	800e1a6 <HAL_UART_IRQHandler+0xae>
 800e18e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e196:	2b00      	cmp	r3, #0
 800e198:	d005      	beq.n	800e1a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19e:	f043 0201 	orr.w	r2, r3, #1
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1aa:	f003 0304 	and.w	r3, r3, #4
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <HAL_UART_IRQHandler+0xd2>
 800e1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1c2:	f043 0202 	orr.w	r2, r3, #2
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00b      	beq.n	800e1ee <HAL_UART_IRQHandler+0xf6>
 800e1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d005      	beq.n	800e1ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e6:	f043 0204 	orr.w	r2, r3, #4
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1f2:	f003 0308 	and.w	r3, r3, #8
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d011      	beq.n	800e21e <HAL_UART_IRQHandler+0x126>
 800e1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1fe:	f003 0320 	and.w	r3, r3, #32
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e216:	f043 0208 	orr.w	r2, r3, #8
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 81ed 	beq.w	800e602 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e22c:	f003 0320 	and.w	r3, r3, #32
 800e230:	2b00      	cmp	r3, #0
 800e232:	d008      	beq.n	800e246 <HAL_UART_IRQHandler+0x14e>
 800e234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e238:	f003 0320 	and.w	r3, r3, #32
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fd0a 	bl	800ec5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	695b      	ldr	r3, [r3, #20]
 800e24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e250:	2b40      	cmp	r3, #64	; 0x40
 800e252:	bf0c      	ite	eq
 800e254:	2301      	moveq	r3, #1
 800e256:	2300      	movne	r3, #0
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e262:	f003 0308 	and.w	r3, r3, #8
 800e266:	2b00      	cmp	r3, #0
 800e268:	d103      	bne.n	800e272 <HAL_UART_IRQHandler+0x17a>
 800e26a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d04f      	beq.n	800e312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fc12 	bl	800ea9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e282:	2b40      	cmp	r3, #64	; 0x40
 800e284:	d141      	bne.n	800e30a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3314      	adds	r3, #20
 800e28c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e294:	e853 3f00 	ldrex	r3, [r3]
 800e298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e29c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3314      	adds	r3, #20
 800e2ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e2b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e2b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e2be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e2c2:	e841 2300 	strex	r3, r2, [r1]
 800e2c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1d9      	bne.n	800e286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d013      	beq.n	800e302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2de:	4a7d      	ldr	r2, [pc, #500]	; (800e4d4 <HAL_UART_IRQHandler+0x3dc>)
 800e2e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fa fc56 	bl	8008b98 <HAL_DMA_Abort_IT>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d016      	beq.n	800e320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e300:	e00e      	b.n	800e320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f99a 	bl	800e63c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e308:	e00a      	b.n	800e320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f996 	bl	800e63c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e310:	e006      	b.n	800e320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 f992 	bl	800e63c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e31e:	e170      	b.n	800e602 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e320:	bf00      	nop
    return;
 800e322:	e16e      	b.n	800e602 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e328:	2b01      	cmp	r3, #1
 800e32a:	f040 814a 	bne.w	800e5c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e332:	f003 0310 	and.w	r3, r3, #16
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 8143 	beq.w	800e5c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e340:	f003 0310 	and.w	r3, r3, #16
 800e344:	2b00      	cmp	r3, #0
 800e346:	f000 813c 	beq.w	800e5c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e34a:	2300      	movs	r3, #0
 800e34c:	60bb      	str	r3, [r7, #8]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60bb      	str	r3, [r7, #8]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	60bb      	str	r3, [r7, #8]
 800e35e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e36a:	2b40      	cmp	r3, #64	; 0x40
 800e36c:	f040 80b4 	bne.w	800e4d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e37c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 8140 	beq.w	800e606 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e38a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e38e:	429a      	cmp	r2, r3
 800e390:	f080 8139 	bcs.w	800e606 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e39a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a0:	69db      	ldr	r3, [r3, #28]
 800e3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3a6:	f000 8088 	beq.w	800e4ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	330c      	adds	r3, #12
 800e3b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3b8:	e853 3f00 	ldrex	r3, [r3]
 800e3bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e3c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	330c      	adds	r3, #12
 800e3d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e3d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e3da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e3e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e3ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1d9      	bne.n	800e3aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3314      	adds	r3, #20
 800e3fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e400:	e853 3f00 	ldrex	r3, [r3]
 800e404:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e408:	f023 0301 	bic.w	r3, r3, #1
 800e40c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	3314      	adds	r3, #20
 800e416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e41a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e41e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e420:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e422:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1e1      	bne.n	800e3f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3314      	adds	r3, #20
 800e438:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e43c:	e853 3f00 	ldrex	r3, [r3]
 800e440:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3314      	adds	r3, #20
 800e452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e456:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e45c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e45e:	e841 2300 	strex	r3, r2, [r1]
 800e462:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e3      	bne.n	800e432 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2220      	movs	r2, #32
 800e46e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	330c      	adds	r3, #12
 800e47e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e482:	e853 3f00 	ldrex	r3, [r3]
 800e486:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e48a:	f023 0310 	bic.w	r3, r3, #16
 800e48e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	330c      	adds	r3, #12
 800e498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e49c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e49e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4a4:	e841 2300 	strex	r3, r2, [r1]
 800e4a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1e3      	bne.n	800e478 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fa faff 	bl	8008ab8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f8c0 	bl	800e650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e4d0:	e099      	b.n	800e606 <HAL_UART_IRQHandler+0x50e>
 800e4d2:	bf00      	nop
 800e4d4:	0800eb63 	.word	0x0800eb63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 808b 	beq.w	800e60a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e4f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 8086 	beq.w	800e60a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	330c      	adds	r3, #12
 800e504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	330c      	adds	r3, #12
 800e51e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e522:	647a      	str	r2, [r7, #68]	; 0x44
 800e524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e52a:	e841 2300 	strex	r3, r2, [r1]
 800e52e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1e3      	bne.n	800e4fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3314      	adds	r3, #20
 800e53c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	e853 3f00 	ldrex	r3, [r3]
 800e544:	623b      	str	r3, [r7, #32]
   return(result);
 800e546:	6a3b      	ldr	r3, [r7, #32]
 800e548:	f023 0301 	bic.w	r3, r3, #1
 800e54c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3314      	adds	r3, #20
 800e556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e55a:	633a      	str	r2, [r7, #48]	; 0x30
 800e55c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e3      	bne.n	800e536 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2220      	movs	r2, #32
 800e572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	330c      	adds	r3, #12
 800e582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f023 0310 	bic.w	r3, r3, #16
 800e592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	330c      	adds	r3, #12
 800e59c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e5a0:	61fa      	str	r2, [r7, #28]
 800e5a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a4:	69b9      	ldr	r1, [r7, #24]
 800e5a6:	69fa      	ldr	r2, [r7, #28]
 800e5a8:	e841 2300 	strex	r3, r2, [r1]
 800e5ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1e3      	bne.n	800e57c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f848 	bl	800e650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e5c0:	e023      	b.n	800e60a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d009      	beq.n	800e5e2 <HAL_UART_IRQHandler+0x4ea>
 800e5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fad5 	bl	800eb8a <UART_Transmit_IT>
    return;
 800e5e0:	e014      	b.n	800e60c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00e      	beq.n	800e60c <HAL_UART_IRQHandler+0x514>
 800e5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d008      	beq.n	800e60c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fb15 	bl	800ec2a <UART_EndTransmit_IT>
    return;
 800e600:	e004      	b.n	800e60c <HAL_UART_IRQHandler+0x514>
    return;
 800e602:	bf00      	nop
 800e604:	e002      	b.n	800e60c <HAL_UART_IRQHandler+0x514>
      return;
 800e606:	bf00      	nop
 800e608:	e000      	b.n	800e60c <HAL_UART_IRQHandler+0x514>
      return;
 800e60a:	bf00      	nop
  }
}
 800e60c:	37e8      	adds	r7, #232	; 0xe8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop

0800e614 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b090      	sub	sp, #64	; 0x40
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e680:	2b00      	cmp	r3, #0
 800e682:	d137      	bne.n	800e6f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e686:	2200      	movs	r2, #0
 800e688:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3314      	adds	r3, #20
 800e690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	e853 3f00 	ldrex	r3, [r3]
 800e698:	623b      	str	r3, [r7, #32]
   return(result);
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3314      	adds	r3, #20
 800e6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6aa:	633a      	str	r2, [r7, #48]	; 0x30
 800e6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b2:	e841 2300 	strex	r3, r2, [r1]
 800e6b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1e5      	bne.n	800e68a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	e853 3f00 	ldrex	r3, [r3]
 800e6cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	330c      	adds	r3, #12
 800e6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6de:	61fa      	str	r2, [r7, #28]
 800e6e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e2:	69b9      	ldr	r1, [r7, #24]
 800e6e4:	69fa      	ldr	r2, [r7, #28]
 800e6e6:	e841 2300 	strex	r3, r2, [r1]
 800e6ea:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1e5      	bne.n	800e6be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6f2:	e002      	b.n	800e6fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e6f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e6f6:	f7f7 fc37 	bl	8005f68 <HAL_UART_TxCpltCallback>
}
 800e6fa:	bf00      	nop
 800e6fc:	3740      	adds	r7, #64	; 0x40
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f7ff ff7f 	bl	800e614 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e716:	bf00      	nop
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b09c      	sub	sp, #112	; 0x70
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e736:	2b00      	cmp	r3, #0
 800e738:	d172      	bne.n	800e820 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73c:	2200      	movs	r2, #0
 800e73e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	330c      	adds	r3, #12
 800e746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e74a:	e853 3f00 	ldrex	r3, [r3]
 800e74e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e756:	66bb      	str	r3, [r7, #104]	; 0x68
 800e758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	330c      	adds	r3, #12
 800e75e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e760:	65ba      	str	r2, [r7, #88]	; 0x58
 800e762:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e76e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e5      	bne.n	800e740 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3314      	adds	r3, #20
 800e77a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77e:	e853 3f00 	ldrex	r3, [r3]
 800e782:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e786:	f023 0301 	bic.w	r3, r3, #1
 800e78a:	667b      	str	r3, [r7, #100]	; 0x64
 800e78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3314      	adds	r3, #20
 800e792:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e794:	647a      	str	r2, [r7, #68]	; 0x44
 800e796:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e79a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e79c:	e841 2300 	strex	r3, r2, [r1]
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e5      	bne.n	800e774 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	3314      	adds	r3, #20
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	e853 3f00 	ldrex	r3, [r3]
 800e7b6:	623b      	str	r3, [r7, #32]
   return(result);
 800e7b8:	6a3b      	ldr	r3, [r7, #32]
 800e7ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7be:	663b      	str	r3, [r7, #96]	; 0x60
 800e7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3314      	adds	r3, #20
 800e7c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7c8:	633a      	str	r2, [r7, #48]	; 0x30
 800e7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7d0:	e841 2300 	strex	r3, r2, [r1]
 800e7d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1e5      	bne.n	800e7a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7de:	2220      	movs	r2, #32
 800e7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d119      	bne.n	800e820 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	330c      	adds	r3, #12
 800e7f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	e853 3f00 	ldrex	r3, [r3]
 800e7fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f023 0310 	bic.w	r3, r3, #16
 800e802:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	330c      	adds	r3, #12
 800e80a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e80c:	61fa      	str	r2, [r7, #28]
 800e80e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e810:	69b9      	ldr	r1, [r7, #24]
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	e841 2300 	strex	r3, r2, [r1]
 800e818:	617b      	str	r3, [r7, #20]
   return(result);
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1e5      	bne.n	800e7ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e824:	2b01      	cmp	r3, #1
 800e826:	d106      	bne.n	800e836 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e82c:	4619      	mov	r1, r3
 800e82e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e830:	f7ff ff0e 	bl	800e650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e834:	e002      	b.n	800e83c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e836:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e838:	f7f7 fba8 	bl	8005f8c <HAL_UART_RxCpltCallback>
}
 800e83c:	bf00      	nop
 800e83e:	3770      	adds	r7, #112	; 0x70
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e850:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e856:	2b01      	cmp	r3, #1
 800e858:	d108      	bne.n	800e86c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e85e:	085b      	lsrs	r3, r3, #1
 800e860:	b29b      	uxth	r3, r3
 800e862:	4619      	mov	r1, r3
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7ff fef3 	bl	800e650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e86a:	e002      	b.n	800e872 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f7ff fedb 	bl	800e628 <HAL_UART_RxHalfCpltCallback>
}
 800e872:	bf00      	nop
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b084      	sub	sp, #16
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e882:	2300      	movs	r3, #0
 800e884:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e896:	2b80      	cmp	r3, #128	; 0x80
 800e898:	bf0c      	ite	eq
 800e89a:	2301      	moveq	r3, #1
 800e89c:	2300      	movne	r3, #0
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b21      	cmp	r3, #33	; 0x21
 800e8ac:	d108      	bne.n	800e8c0 <UART_DMAError+0x46>
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d005      	beq.n	800e8c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e8ba:	68b8      	ldr	r0, [r7, #8]
 800e8bc:	f000 f8c6 	bl	800ea4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ca:	2b40      	cmp	r3, #64	; 0x40
 800e8cc:	bf0c      	ite	eq
 800e8ce:	2301      	moveq	r3, #1
 800e8d0:	2300      	movne	r3, #0
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b22      	cmp	r3, #34	; 0x22
 800e8e0:	d108      	bne.n	800e8f4 <UART_DMAError+0x7a>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e8ee:	68b8      	ldr	r0, [r7, #8]
 800e8f0:	f000 f8d4 	bl	800ea9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f8:	f043 0210 	orr.w	r2, r3, #16
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e900:	68b8      	ldr	r0, [r7, #8]
 800e902:	f7ff fe9b 	bl	800e63c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
	...

0800e910 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b098      	sub	sp, #96	; 0x60
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	4613      	mov	r3, r2
 800e91c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	88fa      	ldrh	r2, [r7, #6]
 800e928:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2222      	movs	r2, #34	; 0x22
 800e934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93c:	4a40      	ldr	r2, [pc, #256]	; (800ea40 <UART_Start_Receive_DMA+0x130>)
 800e93e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e944:	4a3f      	ldr	r2, [pc, #252]	; (800ea44 <UART_Start_Receive_DMA+0x134>)
 800e946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e94c:	4a3e      	ldr	r2, [pc, #248]	; (800ea48 <UART_Start_Receive_DMA+0x138>)
 800e94e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e954:	2200      	movs	r2, #0
 800e956:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e958:	f107 0308 	add.w	r3, r7, #8
 800e95c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3304      	adds	r3, #4
 800e968:	4619      	mov	r1, r3
 800e96a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	88fb      	ldrh	r3, [r7, #6]
 800e970:	f7fa f84a 	bl	8008a08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e974:	2300      	movs	r3, #0
 800e976:	613b      	str	r3, [r7, #16]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	613b      	str	r3, [r7, #16]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	613b      	str	r3, [r7, #16]
 800e988:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d019      	beq.n	800e9ce <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	330c      	adds	r3, #12
 800e9a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a4:	e853 3f00 	ldrex	r3, [r3]
 800e9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	330c      	adds	r3, #12
 800e9b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e9bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9c2:	e841 2300 	strex	r3, r2, [r1]
 800e9c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1e5      	bne.n	800e99a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3314      	adds	r3, #20
 800e9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d8:	e853 3f00 	ldrex	r3, [r3]
 800e9dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	f043 0301 	orr.w	r3, r3, #1
 800e9e4:	657b      	str	r3, [r7, #84]	; 0x54
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3314      	adds	r3, #20
 800e9ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9ee:	63ba      	str	r2, [r7, #56]	; 0x38
 800e9f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9f6:	e841 2300 	strex	r3, r2, [r1]
 800e9fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1e5      	bne.n	800e9ce <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3314      	adds	r3, #20
 800ea08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	e853 3f00 	ldrex	r3, [r3]
 800ea10:	617b      	str	r3, [r7, #20]
   return(result);
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea18:	653b      	str	r3, [r7, #80]	; 0x50
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3314      	adds	r3, #20
 800ea20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea22:	627a      	str	r2, [r7, #36]	; 0x24
 800ea24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea26:	6a39      	ldr	r1, [r7, #32]
 800ea28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea2a:	e841 2300 	strex	r3, r2, [r1]
 800ea2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1e5      	bne.n	800ea02 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3760      	adds	r7, #96	; 0x60
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	0800e71f 	.word	0x0800e71f
 800ea44:	0800e845 	.word	0x0800e845
 800ea48:	0800e87b 	.word	0x0800e87b

0800ea4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b089      	sub	sp, #36	; 0x24
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	330c      	adds	r3, #12
 800ea5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	e853 3f00 	ldrex	r3, [r3]
 800ea62:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea6a:	61fb      	str	r3, [r7, #28]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	330c      	adds	r3, #12
 800ea72:	69fa      	ldr	r2, [r7, #28]
 800ea74:	61ba      	str	r2, [r7, #24]
 800ea76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea78:	6979      	ldr	r1, [r7, #20]
 800ea7a:	69ba      	ldr	r2, [r7, #24]
 800ea7c:	e841 2300 	strex	r3, r2, [r1]
 800ea80:	613b      	str	r3, [r7, #16]
   return(result);
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e5      	bne.n	800ea54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2220      	movs	r2, #32
 800ea8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ea90:	bf00      	nop
 800ea92:	3724      	adds	r7, #36	; 0x24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b095      	sub	sp, #84	; 0x54
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	330c      	adds	r3, #12
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaae:	e853 3f00 	ldrex	r3, [r3]
 800eab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eaba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	330c      	adds	r3, #12
 800eac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eac4:	643a      	str	r2, [r7, #64]	; 0x40
 800eac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eacc:	e841 2300 	strex	r3, r2, [r1]
 800ead0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ead2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1e5      	bne.n	800eaa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3314      	adds	r3, #20
 800eade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae0:	6a3b      	ldr	r3, [r7, #32]
 800eae2:	e853 3f00 	ldrex	r3, [r3]
 800eae6:	61fb      	str	r3, [r7, #28]
   return(result);
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	f023 0301 	bic.w	r3, r3, #1
 800eaee:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3314      	adds	r3, #20
 800eaf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eafa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb00:	e841 2300 	strex	r3, r2, [r1]
 800eb04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1e5      	bne.n	800ead8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d119      	bne.n	800eb48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	330c      	adds	r3, #12
 800eb1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	e853 3f00 	ldrex	r3, [r3]
 800eb22:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	f023 0310 	bic.w	r3, r3, #16
 800eb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	330c      	adds	r3, #12
 800eb32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb34:	61ba      	str	r2, [r7, #24]
 800eb36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb38:	6979      	ldr	r1, [r7, #20]
 800eb3a:	69ba      	ldr	r2, [r7, #24]
 800eb3c:	e841 2300 	strex	r3, r2, [r1]
 800eb40:	613b      	str	r3, [r7, #16]
   return(result);
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1e5      	bne.n	800eb14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2220      	movs	r2, #32
 800eb4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	631a      	str	r2, [r3, #48]	; 0x30
}
 800eb56:	bf00      	nop
 800eb58:	3754      	adds	r7, #84	; 0x54
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b084      	sub	sp, #16
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7ff fd5d 	bl	800e63c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb82:	bf00      	nop
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b085      	sub	sp, #20
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b21      	cmp	r3, #33	; 0x21
 800eb9c:	d13e      	bne.n	800ec1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eba6:	d114      	bne.n	800ebd2 <UART_Transmit_IT+0x48>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d110      	bne.n	800ebd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	1c9a      	adds	r2, r3, #2
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	621a      	str	r2, [r3, #32]
 800ebd0:	e008      	b.n	800ebe4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	1c59      	adds	r1, r3, #1
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	6211      	str	r1, [r2, #32]
 800ebdc:	781a      	ldrb	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	3b01      	subs	r3, #1
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10f      	bne.n	800ec18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68da      	ldr	r2, [r3, #12]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68da      	ldr	r2, [r3, #12]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e000      	b.n	800ec1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ec1c:	2302      	movs	r3, #2
  }
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3714      	adds	r7, #20
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2220      	movs	r2, #32
 800ec46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7f7 f98c 	bl	8005f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b08c      	sub	sp, #48	; 0x30
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b22      	cmp	r3, #34	; 0x22
 800ec6c:	f040 80ab 	bne.w	800edc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec78:	d117      	bne.n	800ecaa <UART_Receive_IT+0x50>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d113      	bne.n	800ecaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca2:	1c9a      	adds	r2, r3, #2
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	629a      	str	r2, [r3, #40]	; 0x28
 800eca8:	e026      	b.n	800ecf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecbc:	d007      	beq.n	800ecce <UART_Receive_IT+0x74>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10a      	bne.n	800ecdc <UART_Receive_IT+0x82>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d106      	bne.n	800ecdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	b2da      	uxtb	r2, r3
 800ecd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd8:	701a      	strb	r2, [r3, #0]
 800ecda:	e008      	b.n	800ecee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf2:	1c5a      	adds	r2, r3, #1
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	4619      	mov	r1, r3
 800ed06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d15a      	bne.n	800edc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68da      	ldr	r2, [r3, #12]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f022 0220 	bic.w	r2, r2, #32
 800ed1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68da      	ldr	r2, [r3, #12]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	695a      	ldr	r2, [r3, #20]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f022 0201 	bic.w	r2, r2, #1
 800ed3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2220      	movs	r2, #32
 800ed40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d135      	bne.n	800edb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	330c      	adds	r3, #12
 800ed58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	e853 3f00 	ldrex	r3, [r3]
 800ed60:	613b      	str	r3, [r7, #16]
   return(result);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	f023 0310 	bic.w	r3, r3, #16
 800ed68:	627b      	str	r3, [r7, #36]	; 0x24
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	330c      	adds	r3, #12
 800ed70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed72:	623a      	str	r2, [r7, #32]
 800ed74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed76:	69f9      	ldr	r1, [r7, #28]
 800ed78:	6a3a      	ldr	r2, [r7, #32]
 800ed7a:	e841 2300 	strex	r3, r2, [r1]
 800ed7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d1e5      	bne.n	800ed52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f003 0310 	and.w	r3, r3, #16
 800ed90:	2b10      	cmp	r3, #16
 800ed92:	d10a      	bne.n	800edaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ed94:	2300      	movs	r3, #0
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	60fb      	str	r3, [r7, #12]
 800eda8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800edae:	4619      	mov	r1, r3
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff fc4d 	bl	800e650 <HAL_UARTEx_RxEventCallback>
 800edb6:	e002      	b.n	800edbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f7 f8e7 	bl	8005f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	e002      	b.n	800edc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	e000      	b.n	800edc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800edc6:	2302      	movs	r3, #2
  }
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3730      	adds	r7, #48	; 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800edd4:	b0c0      	sub	sp, #256	; 0x100
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ede8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edec:	68d9      	ldr	r1, [r3, #12]
 800edee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	ea40 0301 	orr.w	r3, r0, r1
 800edf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800edfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800edfe:	689a      	ldr	r2, [r3, #8]
 800ee00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	431a      	orrs	r2, r3
 800ee08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	431a      	orrs	r2, r3
 800ee10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ee1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ee28:	f021 010c 	bic.w	r1, r1, #12
 800ee2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee36:	430b      	orrs	r3, r1
 800ee38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ee46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee4a:	6999      	ldr	r1, [r3, #24]
 800ee4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	ea40 0301 	orr.w	r3, r0, r1
 800ee56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	4b8f      	ldr	r3, [pc, #572]	; (800f09c <UART_SetConfig+0x2cc>)
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d005      	beq.n	800ee70 <UART_SetConfig+0xa0>
 800ee64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	4b8d      	ldr	r3, [pc, #564]	; (800f0a0 <UART_SetConfig+0x2d0>)
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d104      	bne.n	800ee7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee70:	f7fd fe70 	bl	800cb54 <HAL_RCC_GetPCLK2Freq>
 800ee74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ee78:	e003      	b.n	800ee82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ee7a:	f7fd fe57 	bl	800cb2c <HAL_RCC_GetPCLK1Freq>
 800ee7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee8c:	f040 810c 	bne.w	800f0a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ee94:	2200      	movs	r2, #0
 800ee96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ee9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800eea2:	4622      	mov	r2, r4
 800eea4:	462b      	mov	r3, r5
 800eea6:	1891      	adds	r1, r2, r2
 800eea8:	65b9      	str	r1, [r7, #88]	; 0x58
 800eeaa:	415b      	adcs	r3, r3
 800eeac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eeae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	eb12 0801 	adds.w	r8, r2, r1
 800eeb8:	4629      	mov	r1, r5
 800eeba:	eb43 0901 	adc.w	r9, r3, r1
 800eebe:	f04f 0200 	mov.w	r2, #0
 800eec2:	f04f 0300 	mov.w	r3, #0
 800eec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eeca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eed2:	4690      	mov	r8, r2
 800eed4:	4699      	mov	r9, r3
 800eed6:	4623      	mov	r3, r4
 800eed8:	eb18 0303 	adds.w	r3, r8, r3
 800eedc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eee0:	462b      	mov	r3, r5
 800eee2:	eb49 0303 	adc.w	r3, r9, r3
 800eee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eeea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800eefa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800eefe:	460b      	mov	r3, r1
 800ef00:	18db      	adds	r3, r3, r3
 800ef02:	653b      	str	r3, [r7, #80]	; 0x50
 800ef04:	4613      	mov	r3, r2
 800ef06:	eb42 0303 	adc.w	r3, r2, r3
 800ef0a:	657b      	str	r3, [r7, #84]	; 0x54
 800ef0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ef14:	f7f1 fe1c 	bl	8000b50 <__aeabi_uldivmod>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4b61      	ldr	r3, [pc, #388]	; (800f0a4 <UART_SetConfig+0x2d4>)
 800ef1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef22:	095b      	lsrs	r3, r3, #5
 800ef24:	011c      	lsls	r4, r3, #4
 800ef26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ef34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ef38:	4642      	mov	r2, r8
 800ef3a:	464b      	mov	r3, r9
 800ef3c:	1891      	adds	r1, r2, r2
 800ef3e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ef40:	415b      	adcs	r3, r3
 800ef42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef48:	4641      	mov	r1, r8
 800ef4a:	eb12 0a01 	adds.w	sl, r2, r1
 800ef4e:	4649      	mov	r1, r9
 800ef50:	eb43 0b01 	adc.w	fp, r3, r1
 800ef54:	f04f 0200 	mov.w	r2, #0
 800ef58:	f04f 0300 	mov.w	r3, #0
 800ef5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ef60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ef64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef68:	4692      	mov	sl, r2
 800ef6a:	469b      	mov	fp, r3
 800ef6c:	4643      	mov	r3, r8
 800ef6e:	eb1a 0303 	adds.w	r3, sl, r3
 800ef72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ef76:	464b      	mov	r3, r9
 800ef78:	eb4b 0303 	adc.w	r3, fp, r3
 800ef7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ef80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ef8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ef90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ef94:	460b      	mov	r3, r1
 800ef96:	18db      	adds	r3, r3, r3
 800ef98:	643b      	str	r3, [r7, #64]	; 0x40
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	eb42 0303 	adc.w	r3, r2, r3
 800efa0:	647b      	str	r3, [r7, #68]	; 0x44
 800efa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800efa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800efaa:	f7f1 fdd1 	bl	8000b50 <__aeabi_uldivmod>
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	4611      	mov	r1, r2
 800efb4:	4b3b      	ldr	r3, [pc, #236]	; (800f0a4 <UART_SetConfig+0x2d4>)
 800efb6:	fba3 2301 	umull	r2, r3, r3, r1
 800efba:	095b      	lsrs	r3, r3, #5
 800efbc:	2264      	movs	r2, #100	; 0x64
 800efbe:	fb02 f303 	mul.w	r3, r2, r3
 800efc2:	1acb      	subs	r3, r1, r3
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800efca:	4b36      	ldr	r3, [pc, #216]	; (800f0a4 <UART_SetConfig+0x2d4>)
 800efcc:	fba3 2302 	umull	r2, r3, r3, r2
 800efd0:	095b      	lsrs	r3, r3, #5
 800efd2:	005b      	lsls	r3, r3, #1
 800efd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efd8:	441c      	add	r4, r3
 800efda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800efde:	2200      	movs	r2, #0
 800efe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800efe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800efe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800efec:	4642      	mov	r2, r8
 800efee:	464b      	mov	r3, r9
 800eff0:	1891      	adds	r1, r2, r2
 800eff2:	63b9      	str	r1, [r7, #56]	; 0x38
 800eff4:	415b      	adcs	r3, r3
 800eff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800effc:	4641      	mov	r1, r8
 800effe:	1851      	adds	r1, r2, r1
 800f000:	6339      	str	r1, [r7, #48]	; 0x30
 800f002:	4649      	mov	r1, r9
 800f004:	414b      	adcs	r3, r1
 800f006:	637b      	str	r3, [r7, #52]	; 0x34
 800f008:	f04f 0200 	mov.w	r2, #0
 800f00c:	f04f 0300 	mov.w	r3, #0
 800f010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f014:	4659      	mov	r1, fp
 800f016:	00cb      	lsls	r3, r1, #3
 800f018:	4651      	mov	r1, sl
 800f01a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f01e:	4651      	mov	r1, sl
 800f020:	00ca      	lsls	r2, r1, #3
 800f022:	4610      	mov	r0, r2
 800f024:	4619      	mov	r1, r3
 800f026:	4603      	mov	r3, r0
 800f028:	4642      	mov	r2, r8
 800f02a:	189b      	adds	r3, r3, r2
 800f02c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f030:	464b      	mov	r3, r9
 800f032:	460a      	mov	r2, r1
 800f034:	eb42 0303 	adc.w	r3, r2, r3
 800f038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f04c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f050:	460b      	mov	r3, r1
 800f052:	18db      	adds	r3, r3, r3
 800f054:	62bb      	str	r3, [r7, #40]	; 0x28
 800f056:	4613      	mov	r3, r2
 800f058:	eb42 0303 	adc.w	r3, r2, r3
 800f05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f05e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f066:	f7f1 fd73 	bl	8000b50 <__aeabi_uldivmod>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4b0d      	ldr	r3, [pc, #52]	; (800f0a4 <UART_SetConfig+0x2d4>)
 800f070:	fba3 1302 	umull	r1, r3, r3, r2
 800f074:	095b      	lsrs	r3, r3, #5
 800f076:	2164      	movs	r1, #100	; 0x64
 800f078:	fb01 f303 	mul.w	r3, r1, r3
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	00db      	lsls	r3, r3, #3
 800f080:	3332      	adds	r3, #50	; 0x32
 800f082:	4a08      	ldr	r2, [pc, #32]	; (800f0a4 <UART_SetConfig+0x2d4>)
 800f084:	fba2 2303 	umull	r2, r3, r2, r3
 800f088:	095b      	lsrs	r3, r3, #5
 800f08a:	f003 0207 	and.w	r2, r3, #7
 800f08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4422      	add	r2, r4
 800f096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f098:	e106      	b.n	800f2a8 <UART_SetConfig+0x4d8>
 800f09a:	bf00      	nop
 800f09c:	40011000 	.word	0x40011000
 800f0a0:	40011400 	.word	0x40011400
 800f0a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f0b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f0ba:	4642      	mov	r2, r8
 800f0bc:	464b      	mov	r3, r9
 800f0be:	1891      	adds	r1, r2, r2
 800f0c0:	6239      	str	r1, [r7, #32]
 800f0c2:	415b      	adcs	r3, r3
 800f0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f0c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0ca:	4641      	mov	r1, r8
 800f0cc:	1854      	adds	r4, r2, r1
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	eb43 0501 	adc.w	r5, r3, r1
 800f0d4:	f04f 0200 	mov.w	r2, #0
 800f0d8:	f04f 0300 	mov.w	r3, #0
 800f0dc:	00eb      	lsls	r3, r5, #3
 800f0de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f0e2:	00e2      	lsls	r2, r4, #3
 800f0e4:	4614      	mov	r4, r2
 800f0e6:	461d      	mov	r5, r3
 800f0e8:	4643      	mov	r3, r8
 800f0ea:	18e3      	adds	r3, r4, r3
 800f0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f0f0:	464b      	mov	r3, r9
 800f0f2:	eb45 0303 	adc.w	r3, r5, r3
 800f0f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f10a:	f04f 0200 	mov.w	r2, #0
 800f10e:	f04f 0300 	mov.w	r3, #0
 800f112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f116:	4629      	mov	r1, r5
 800f118:	008b      	lsls	r3, r1, #2
 800f11a:	4621      	mov	r1, r4
 800f11c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f120:	4621      	mov	r1, r4
 800f122:	008a      	lsls	r2, r1, #2
 800f124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f128:	f7f1 fd12 	bl	8000b50 <__aeabi_uldivmod>
 800f12c:	4602      	mov	r2, r0
 800f12e:	460b      	mov	r3, r1
 800f130:	4b60      	ldr	r3, [pc, #384]	; (800f2b4 <UART_SetConfig+0x4e4>)
 800f132:	fba3 2302 	umull	r2, r3, r3, r2
 800f136:	095b      	lsrs	r3, r3, #5
 800f138:	011c      	lsls	r4, r3, #4
 800f13a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f13e:	2200      	movs	r2, #0
 800f140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f14c:	4642      	mov	r2, r8
 800f14e:	464b      	mov	r3, r9
 800f150:	1891      	adds	r1, r2, r2
 800f152:	61b9      	str	r1, [r7, #24]
 800f154:	415b      	adcs	r3, r3
 800f156:	61fb      	str	r3, [r7, #28]
 800f158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f15c:	4641      	mov	r1, r8
 800f15e:	1851      	adds	r1, r2, r1
 800f160:	6139      	str	r1, [r7, #16]
 800f162:	4649      	mov	r1, r9
 800f164:	414b      	adcs	r3, r1
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	f04f 0200 	mov.w	r2, #0
 800f16c:	f04f 0300 	mov.w	r3, #0
 800f170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f174:	4659      	mov	r1, fp
 800f176:	00cb      	lsls	r3, r1, #3
 800f178:	4651      	mov	r1, sl
 800f17a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f17e:	4651      	mov	r1, sl
 800f180:	00ca      	lsls	r2, r1, #3
 800f182:	4610      	mov	r0, r2
 800f184:	4619      	mov	r1, r3
 800f186:	4603      	mov	r3, r0
 800f188:	4642      	mov	r2, r8
 800f18a:	189b      	adds	r3, r3, r2
 800f18c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f190:	464b      	mov	r3, r9
 800f192:	460a      	mov	r2, r1
 800f194:	eb42 0303 	adc.w	r3, r2, r3
 800f198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f1a8:	f04f 0200 	mov.w	r2, #0
 800f1ac:	f04f 0300 	mov.w	r3, #0
 800f1b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	008b      	lsls	r3, r1, #2
 800f1b8:	4641      	mov	r1, r8
 800f1ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1be:	4641      	mov	r1, r8
 800f1c0:	008a      	lsls	r2, r1, #2
 800f1c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f1c6:	f7f1 fcc3 	bl	8000b50 <__aeabi_uldivmod>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	4b38      	ldr	r3, [pc, #224]	; (800f2b4 <UART_SetConfig+0x4e4>)
 800f1d2:	fba3 2301 	umull	r2, r3, r3, r1
 800f1d6:	095b      	lsrs	r3, r3, #5
 800f1d8:	2264      	movs	r2, #100	; 0x64
 800f1da:	fb02 f303 	mul.w	r3, r2, r3
 800f1de:	1acb      	subs	r3, r1, r3
 800f1e0:	011b      	lsls	r3, r3, #4
 800f1e2:	3332      	adds	r3, #50	; 0x32
 800f1e4:	4a33      	ldr	r2, [pc, #204]	; (800f2b4 <UART_SetConfig+0x4e4>)
 800f1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ea:	095b      	lsrs	r3, r3, #5
 800f1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1f0:	441c      	add	r4, r3
 800f1f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	673b      	str	r3, [r7, #112]	; 0x70
 800f1fa:	677a      	str	r2, [r7, #116]	; 0x74
 800f1fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f200:	4642      	mov	r2, r8
 800f202:	464b      	mov	r3, r9
 800f204:	1891      	adds	r1, r2, r2
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	415b      	adcs	r3, r3
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f210:	4641      	mov	r1, r8
 800f212:	1851      	adds	r1, r2, r1
 800f214:	6039      	str	r1, [r7, #0]
 800f216:	4649      	mov	r1, r9
 800f218:	414b      	adcs	r3, r1
 800f21a:	607b      	str	r3, [r7, #4]
 800f21c:	f04f 0200 	mov.w	r2, #0
 800f220:	f04f 0300 	mov.w	r3, #0
 800f224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f228:	4659      	mov	r1, fp
 800f22a:	00cb      	lsls	r3, r1, #3
 800f22c:	4651      	mov	r1, sl
 800f22e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f232:	4651      	mov	r1, sl
 800f234:	00ca      	lsls	r2, r1, #3
 800f236:	4610      	mov	r0, r2
 800f238:	4619      	mov	r1, r3
 800f23a:	4603      	mov	r3, r0
 800f23c:	4642      	mov	r2, r8
 800f23e:	189b      	adds	r3, r3, r2
 800f240:	66bb      	str	r3, [r7, #104]	; 0x68
 800f242:	464b      	mov	r3, r9
 800f244:	460a      	mov	r2, r1
 800f246:	eb42 0303 	adc.w	r3, r2, r3
 800f24a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	663b      	str	r3, [r7, #96]	; 0x60
 800f256:	667a      	str	r2, [r7, #100]	; 0x64
 800f258:	f04f 0200 	mov.w	r2, #0
 800f25c:	f04f 0300 	mov.w	r3, #0
 800f260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f264:	4649      	mov	r1, r9
 800f266:	008b      	lsls	r3, r1, #2
 800f268:	4641      	mov	r1, r8
 800f26a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f26e:	4641      	mov	r1, r8
 800f270:	008a      	lsls	r2, r1, #2
 800f272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f276:	f7f1 fc6b 	bl	8000b50 <__aeabi_uldivmod>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <UART_SetConfig+0x4e4>)
 800f280:	fba3 1302 	umull	r1, r3, r3, r2
 800f284:	095b      	lsrs	r3, r3, #5
 800f286:	2164      	movs	r1, #100	; 0x64
 800f288:	fb01 f303 	mul.w	r3, r1, r3
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	011b      	lsls	r3, r3, #4
 800f290:	3332      	adds	r3, #50	; 0x32
 800f292:	4a08      	ldr	r2, [pc, #32]	; (800f2b4 <UART_SetConfig+0x4e4>)
 800f294:	fba2 2303 	umull	r2, r3, r2, r3
 800f298:	095b      	lsrs	r3, r3, #5
 800f29a:	f003 020f 	and.w	r2, r3, #15
 800f29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4422      	add	r2, r4
 800f2a6:	609a      	str	r2, [r3, #8]
}
 800f2a8:	bf00      	nop
 800f2aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2b4:	51eb851f 	.word	0x51eb851f

0800f2b8 <sqrt>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	ed2d 8b02 	vpush	{d8}
 800f2be:	ec55 4b10 	vmov	r4, r5, d0
 800f2c2:	f000 f827 	bl	800f314 <__ieee754_sqrt>
 800f2c6:	4622      	mov	r2, r4
 800f2c8:	462b      	mov	r3, r5
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f2d2:	eef0 8a60 	vmov.f32	s17, s1
 800f2d6:	f7f1 fbd5 	bl	8000a84 <__aeabi_dcmpun>
 800f2da:	b990      	cbnz	r0, 800f302 <sqrt+0x4a>
 800f2dc:	2200      	movs	r2, #0
 800f2de:	2300      	movs	r3, #0
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	f7f1 fba6 	bl	8000a34 <__aeabi_dcmplt>
 800f2e8:	b158      	cbz	r0, 800f302 <sqrt+0x4a>
 800f2ea:	f000 faa9 	bl	800f840 <__errno>
 800f2ee:	2321      	movs	r3, #33	; 0x21
 800f2f0:	6003      	str	r3, [r0, #0]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	f7f1 fa53 	bl	80007a4 <__aeabi_ddiv>
 800f2fe:	ec41 0b18 	vmov	d8, r0, r1
 800f302:	eeb0 0a48 	vmov.f32	s0, s16
 800f306:	eef0 0a68 	vmov.f32	s1, s17
 800f30a:	ecbd 8b02 	vpop	{d8}
 800f30e:	bd38      	pop	{r3, r4, r5, pc}

0800f310 <atan2f>:
 800f310:	f000 b8da 	b.w	800f4c8 <__ieee754_atan2f>

0800f314 <__ieee754_sqrt>:
 800f314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f318:	ec55 4b10 	vmov	r4, r5, d0
 800f31c:	4e67      	ldr	r6, [pc, #412]	; (800f4bc <__ieee754_sqrt+0x1a8>)
 800f31e:	43ae      	bics	r6, r5
 800f320:	ee10 0a10 	vmov	r0, s0
 800f324:	ee10 2a10 	vmov	r2, s0
 800f328:	4629      	mov	r1, r5
 800f32a:	462b      	mov	r3, r5
 800f32c:	d10d      	bne.n	800f34a <__ieee754_sqrt+0x36>
 800f32e:	f7f1 f90f 	bl	8000550 <__aeabi_dmul>
 800f332:	4602      	mov	r2, r0
 800f334:	460b      	mov	r3, r1
 800f336:	4620      	mov	r0, r4
 800f338:	4629      	mov	r1, r5
 800f33a:	f7f0 ff53 	bl	80001e4 <__adddf3>
 800f33e:	4604      	mov	r4, r0
 800f340:	460d      	mov	r5, r1
 800f342:	ec45 4b10 	vmov	d0, r4, r5
 800f346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	dc0b      	bgt.n	800f366 <__ieee754_sqrt+0x52>
 800f34e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f352:	4326      	orrs	r6, r4
 800f354:	d0f5      	beq.n	800f342 <__ieee754_sqrt+0x2e>
 800f356:	b135      	cbz	r5, 800f366 <__ieee754_sqrt+0x52>
 800f358:	f7f0 ff42 	bl	80001e0 <__aeabi_dsub>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	f7f1 fa20 	bl	80007a4 <__aeabi_ddiv>
 800f364:	e7eb      	b.n	800f33e <__ieee754_sqrt+0x2a>
 800f366:	1509      	asrs	r1, r1, #20
 800f368:	f000 808d 	beq.w	800f486 <__ieee754_sqrt+0x172>
 800f36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f370:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f378:	07c9      	lsls	r1, r1, #31
 800f37a:	bf5c      	itt	pl
 800f37c:	005b      	lslpl	r3, r3, #1
 800f37e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f382:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f386:	bf58      	it	pl
 800f388:	0052      	lslpl	r2, r2, #1
 800f38a:	2500      	movs	r5, #0
 800f38c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f390:	1076      	asrs	r6, r6, #1
 800f392:	0052      	lsls	r2, r2, #1
 800f394:	f04f 0e16 	mov.w	lr, #22
 800f398:	46ac      	mov	ip, r5
 800f39a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f39e:	eb0c 0001 	add.w	r0, ip, r1
 800f3a2:	4298      	cmp	r0, r3
 800f3a4:	bfde      	ittt	le
 800f3a6:	1a1b      	suble	r3, r3, r0
 800f3a8:	eb00 0c01 	addle.w	ip, r0, r1
 800f3ac:	186d      	addle	r5, r5, r1
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	f1be 0e01 	subs.w	lr, lr, #1
 800f3b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f3b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f3bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f3c0:	d1ed      	bne.n	800f39e <__ieee754_sqrt+0x8a>
 800f3c2:	4674      	mov	r4, lr
 800f3c4:	2720      	movs	r7, #32
 800f3c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f3ca:	4563      	cmp	r3, ip
 800f3cc:	eb01 000e 	add.w	r0, r1, lr
 800f3d0:	dc02      	bgt.n	800f3d8 <__ieee754_sqrt+0xc4>
 800f3d2:	d113      	bne.n	800f3fc <__ieee754_sqrt+0xe8>
 800f3d4:	4290      	cmp	r0, r2
 800f3d6:	d811      	bhi.n	800f3fc <__ieee754_sqrt+0xe8>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	eb00 0e01 	add.w	lr, r0, r1
 800f3de:	da57      	bge.n	800f490 <__ieee754_sqrt+0x17c>
 800f3e0:	f1be 0f00 	cmp.w	lr, #0
 800f3e4:	db54      	blt.n	800f490 <__ieee754_sqrt+0x17c>
 800f3e6:	f10c 0801 	add.w	r8, ip, #1
 800f3ea:	eba3 030c 	sub.w	r3, r3, ip
 800f3ee:	4290      	cmp	r0, r2
 800f3f0:	bf88      	it	hi
 800f3f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f3f6:	1a12      	subs	r2, r2, r0
 800f3f8:	440c      	add	r4, r1
 800f3fa:	46c4      	mov	ip, r8
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	3f01      	subs	r7, #1
 800f400:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f404:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f408:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f40c:	d1dd      	bne.n	800f3ca <__ieee754_sqrt+0xb6>
 800f40e:	4313      	orrs	r3, r2
 800f410:	d01b      	beq.n	800f44a <__ieee754_sqrt+0x136>
 800f412:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f4c0 <__ieee754_sqrt+0x1ac>
 800f416:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f4c4 <__ieee754_sqrt+0x1b0>
 800f41a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f41e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f422:	f7f0 fedd 	bl	80001e0 <__aeabi_dsub>
 800f426:	e9da 8900 	ldrd	r8, r9, [sl]
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	4640      	mov	r0, r8
 800f430:	4649      	mov	r1, r9
 800f432:	f7f1 fb09 	bl	8000a48 <__aeabi_dcmple>
 800f436:	b140      	cbz	r0, 800f44a <__ieee754_sqrt+0x136>
 800f438:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f43c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f440:	e9db 2300 	ldrd	r2, r3, [fp]
 800f444:	d126      	bne.n	800f494 <__ieee754_sqrt+0x180>
 800f446:	3501      	adds	r5, #1
 800f448:	463c      	mov	r4, r7
 800f44a:	106a      	asrs	r2, r5, #1
 800f44c:	0863      	lsrs	r3, r4, #1
 800f44e:	07e9      	lsls	r1, r5, #31
 800f450:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f454:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f458:	bf48      	it	mi
 800f45a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f45e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f462:	461c      	mov	r4, r3
 800f464:	e76d      	b.n	800f342 <__ieee754_sqrt+0x2e>
 800f466:	0ad3      	lsrs	r3, r2, #11
 800f468:	3815      	subs	r0, #21
 800f46a:	0552      	lsls	r2, r2, #21
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d0fa      	beq.n	800f466 <__ieee754_sqrt+0x152>
 800f470:	02dc      	lsls	r4, r3, #11
 800f472:	d50a      	bpl.n	800f48a <__ieee754_sqrt+0x176>
 800f474:	f1c1 0420 	rsb	r4, r1, #32
 800f478:	fa22 f404 	lsr.w	r4, r2, r4
 800f47c:	1e4d      	subs	r5, r1, #1
 800f47e:	408a      	lsls	r2, r1
 800f480:	4323      	orrs	r3, r4
 800f482:	1b41      	subs	r1, r0, r5
 800f484:	e772      	b.n	800f36c <__ieee754_sqrt+0x58>
 800f486:	4608      	mov	r0, r1
 800f488:	e7f0      	b.n	800f46c <__ieee754_sqrt+0x158>
 800f48a:	005b      	lsls	r3, r3, #1
 800f48c:	3101      	adds	r1, #1
 800f48e:	e7ef      	b.n	800f470 <__ieee754_sqrt+0x15c>
 800f490:	46e0      	mov	r8, ip
 800f492:	e7aa      	b.n	800f3ea <__ieee754_sqrt+0xd6>
 800f494:	f7f0 fea6 	bl	80001e4 <__adddf3>
 800f498:	e9da 8900 	ldrd	r8, r9, [sl]
 800f49c:	4602      	mov	r2, r0
 800f49e:	460b      	mov	r3, r1
 800f4a0:	4640      	mov	r0, r8
 800f4a2:	4649      	mov	r1, r9
 800f4a4:	f7f1 fac6 	bl	8000a34 <__aeabi_dcmplt>
 800f4a8:	b120      	cbz	r0, 800f4b4 <__ieee754_sqrt+0x1a0>
 800f4aa:	1ca0      	adds	r0, r4, #2
 800f4ac:	bf08      	it	eq
 800f4ae:	3501      	addeq	r5, #1
 800f4b0:	3402      	adds	r4, #2
 800f4b2:	e7ca      	b.n	800f44a <__ieee754_sqrt+0x136>
 800f4b4:	3401      	adds	r4, #1
 800f4b6:	f024 0401 	bic.w	r4, r4, #1
 800f4ba:	e7c6      	b.n	800f44a <__ieee754_sqrt+0x136>
 800f4bc:	7ff00000 	.word	0x7ff00000
 800f4c0:	20000030 	.word	0x20000030
 800f4c4:	20000038 	.word	0x20000038

0800f4c8 <__ieee754_atan2f>:
 800f4c8:	ee10 2a90 	vmov	r2, s1
 800f4cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f4d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f4d4:	b510      	push	{r4, lr}
 800f4d6:	eef0 7a40 	vmov.f32	s15, s0
 800f4da:	dc06      	bgt.n	800f4ea <__ieee754_atan2f+0x22>
 800f4dc:	ee10 0a10 	vmov	r0, s0
 800f4e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f4e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f4e8:	dd04      	ble.n	800f4f4 <__ieee754_atan2f+0x2c>
 800f4ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f4ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f4f2:	bd10      	pop	{r4, pc}
 800f4f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f4f8:	d103      	bne.n	800f502 <__ieee754_atan2f+0x3a>
 800f4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4fe:	f000 b883 	b.w	800f608 <atanf>
 800f502:	1794      	asrs	r4, r2, #30
 800f504:	f004 0402 	and.w	r4, r4, #2
 800f508:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f50c:	b943      	cbnz	r3, 800f520 <__ieee754_atan2f+0x58>
 800f50e:	2c02      	cmp	r4, #2
 800f510:	d05e      	beq.n	800f5d0 <__ieee754_atan2f+0x108>
 800f512:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f5e4 <__ieee754_atan2f+0x11c>
 800f516:	2c03      	cmp	r4, #3
 800f518:	bf08      	it	eq
 800f51a:	eef0 7a47 	vmoveq.f32	s15, s14
 800f51e:	e7e6      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f520:	b941      	cbnz	r1, 800f534 <__ieee754_atan2f+0x6c>
 800f522:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f5e8 <__ieee754_atan2f+0x120>
 800f526:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f5ec <__ieee754_atan2f+0x124>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	bfb8      	it	lt
 800f52e:	eef0 7a47 	vmovlt.f32	s15, s14
 800f532:	e7dc      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f534:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f538:	d110      	bne.n	800f55c <__ieee754_atan2f+0x94>
 800f53a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f53e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f542:	d107      	bne.n	800f554 <__ieee754_atan2f+0x8c>
 800f544:	2c02      	cmp	r4, #2
 800f546:	d846      	bhi.n	800f5d6 <__ieee754_atan2f+0x10e>
 800f548:	4b29      	ldr	r3, [pc, #164]	; (800f5f0 <__ieee754_atan2f+0x128>)
 800f54a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f54e:	edd3 7a00 	vldr	s15, [r3]
 800f552:	e7cc      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f554:	2c02      	cmp	r4, #2
 800f556:	d841      	bhi.n	800f5dc <__ieee754_atan2f+0x114>
 800f558:	4b26      	ldr	r3, [pc, #152]	; (800f5f4 <__ieee754_atan2f+0x12c>)
 800f55a:	e7f6      	b.n	800f54a <__ieee754_atan2f+0x82>
 800f55c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f560:	d0df      	beq.n	800f522 <__ieee754_atan2f+0x5a>
 800f562:	1a5b      	subs	r3, r3, r1
 800f564:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f568:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f56c:	da1a      	bge.n	800f5a4 <__ieee754_atan2f+0xdc>
 800f56e:	2a00      	cmp	r2, #0
 800f570:	da01      	bge.n	800f576 <__ieee754_atan2f+0xae>
 800f572:	313c      	adds	r1, #60	; 0x3c
 800f574:	db19      	blt.n	800f5aa <__ieee754_atan2f+0xe2>
 800f576:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f57a:	f000 f919 	bl	800f7b0 <fabsf>
 800f57e:	f000 f843 	bl	800f608 <atanf>
 800f582:	eef0 7a40 	vmov.f32	s15, s0
 800f586:	2c01      	cmp	r4, #1
 800f588:	d012      	beq.n	800f5b0 <__ieee754_atan2f+0xe8>
 800f58a:	2c02      	cmp	r4, #2
 800f58c:	d017      	beq.n	800f5be <__ieee754_atan2f+0xf6>
 800f58e:	2c00      	cmp	r4, #0
 800f590:	d0ad      	beq.n	800f4ee <__ieee754_atan2f+0x26>
 800f592:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f5f8 <__ieee754_atan2f+0x130>
 800f596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f59a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f5fc <__ieee754_atan2f+0x134>
 800f59e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5a2:	e7a4      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5a4:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f5e8 <__ieee754_atan2f+0x120>
 800f5a8:	e7ed      	b.n	800f586 <__ieee754_atan2f+0xbe>
 800f5aa:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f600 <__ieee754_atan2f+0x138>
 800f5ae:	e7ea      	b.n	800f586 <__ieee754_atan2f+0xbe>
 800f5b0:	ee17 3a90 	vmov	r3, s15
 800f5b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5b8:	ee07 3a90 	vmov	s15, r3
 800f5bc:	e797      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f5f8 <__ieee754_atan2f+0x130>
 800f5c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f5fc <__ieee754_atan2f+0x134>
 800f5ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5ce:	e78e      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5d0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f5fc <__ieee754_atan2f+0x134>
 800f5d4:	e78b      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5d6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f604 <__ieee754_atan2f+0x13c>
 800f5da:	e788      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f600 <__ieee754_atan2f+0x138>
 800f5e0:	e785      	b.n	800f4ee <__ieee754_atan2f+0x26>
 800f5e2:	bf00      	nop
 800f5e4:	c0490fdb 	.word	0xc0490fdb
 800f5e8:	3fc90fdb 	.word	0x3fc90fdb
 800f5ec:	bfc90fdb 	.word	0xbfc90fdb
 800f5f0:	0800ffec 	.word	0x0800ffec
 800f5f4:	0800fff8 	.word	0x0800fff8
 800f5f8:	33bbbd2e 	.word	0x33bbbd2e
 800f5fc:	40490fdb 	.word	0x40490fdb
 800f600:	00000000 	.word	0x00000000
 800f604:	3f490fdb 	.word	0x3f490fdb

0800f608 <atanf>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	ee10 5a10 	vmov	r5, s0
 800f60e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f612:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f616:	eef0 7a40 	vmov.f32	s15, s0
 800f61a:	db10      	blt.n	800f63e <atanf+0x36>
 800f61c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f620:	dd04      	ble.n	800f62c <atanf+0x24>
 800f622:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f626:	eeb0 0a67 	vmov.f32	s0, s15
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f764 <atanf+0x15c>
 800f630:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f768 <atanf+0x160>
 800f634:	2d00      	cmp	r5, #0
 800f636:	bfd8      	it	le
 800f638:	eef0 7a47 	vmovle.f32	s15, s14
 800f63c:	e7f3      	b.n	800f626 <atanf+0x1e>
 800f63e:	4b4b      	ldr	r3, [pc, #300]	; (800f76c <atanf+0x164>)
 800f640:	429c      	cmp	r4, r3
 800f642:	dc10      	bgt.n	800f666 <atanf+0x5e>
 800f644:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f648:	da0a      	bge.n	800f660 <atanf+0x58>
 800f64a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f770 <atanf+0x168>
 800f64e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f656:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65e:	dce2      	bgt.n	800f626 <atanf+0x1e>
 800f660:	f04f 33ff 	mov.w	r3, #4294967295
 800f664:	e013      	b.n	800f68e <atanf+0x86>
 800f666:	f000 f8a3 	bl	800f7b0 <fabsf>
 800f66a:	4b42      	ldr	r3, [pc, #264]	; (800f774 <atanf+0x16c>)
 800f66c:	429c      	cmp	r4, r3
 800f66e:	dc4f      	bgt.n	800f710 <atanf+0x108>
 800f670:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f674:	429c      	cmp	r4, r3
 800f676:	dc41      	bgt.n	800f6fc <atanf+0xf4>
 800f678:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f67c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f680:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f684:	2300      	movs	r3, #0
 800f686:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f68a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f694:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f778 <atanf+0x170>
 800f698:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f77c <atanf+0x174>
 800f69c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f780 <atanf+0x178>
 800f6a0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f6a4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f6a8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f784 <atanf+0x17c>
 800f6ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f6b0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f788 <atanf+0x180>
 800f6b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f6b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f78c <atanf+0x184>
 800f6bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f6c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f790 <atanf+0x188>
 800f6c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f6c8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f794 <atanf+0x18c>
 800f6cc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f6d0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f798 <atanf+0x190>
 800f6d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f6d8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f79c <atanf+0x194>
 800f6dc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f6e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f7a0 <atanf+0x198>
 800f6e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f6e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f6ec:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f6f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f6f4:	d121      	bne.n	800f73a <atanf+0x132>
 800f6f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6fa:	e794      	b.n	800f626 <atanf+0x1e>
 800f6fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f700:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f704:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f708:	2301      	movs	r3, #1
 800f70a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f70e:	e7be      	b.n	800f68e <atanf+0x86>
 800f710:	4b24      	ldr	r3, [pc, #144]	; (800f7a4 <atanf+0x19c>)
 800f712:	429c      	cmp	r4, r3
 800f714:	dc0b      	bgt.n	800f72e <atanf+0x126>
 800f716:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f71a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f71e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f722:	2302      	movs	r3, #2
 800f724:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f72c:	e7af      	b.n	800f68e <atanf+0x86>
 800f72e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f732:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f736:	2303      	movs	r3, #3
 800f738:	e7a9      	b.n	800f68e <atanf+0x86>
 800f73a:	4a1b      	ldr	r2, [pc, #108]	; (800f7a8 <atanf+0x1a0>)
 800f73c:	491b      	ldr	r1, [pc, #108]	; (800f7ac <atanf+0x1a4>)
 800f73e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f742:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f746:	edd3 6a00 	vldr	s13, [r3]
 800f74a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f74e:	2d00      	cmp	r5, #0
 800f750:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f754:	edd2 7a00 	vldr	s15, [r2]
 800f758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f75c:	bfb8      	it	lt
 800f75e:	eef1 7a67 	vneglt.f32	s15, s15
 800f762:	e760      	b.n	800f626 <atanf+0x1e>
 800f764:	3fc90fdb 	.word	0x3fc90fdb
 800f768:	bfc90fdb 	.word	0xbfc90fdb
 800f76c:	3edfffff 	.word	0x3edfffff
 800f770:	7149f2ca 	.word	0x7149f2ca
 800f774:	3f97ffff 	.word	0x3f97ffff
 800f778:	3c8569d7 	.word	0x3c8569d7
 800f77c:	3d4bda59 	.word	0x3d4bda59
 800f780:	bd6ef16b 	.word	0xbd6ef16b
 800f784:	3d886b35 	.word	0x3d886b35
 800f788:	3dba2e6e 	.word	0x3dba2e6e
 800f78c:	3e124925 	.word	0x3e124925
 800f790:	3eaaaaab 	.word	0x3eaaaaab
 800f794:	bd15a221 	.word	0xbd15a221
 800f798:	bd9d8795 	.word	0xbd9d8795
 800f79c:	bde38e38 	.word	0xbde38e38
 800f7a0:	be4ccccd 	.word	0xbe4ccccd
 800f7a4:	401bffff 	.word	0x401bffff
 800f7a8:	08010004 	.word	0x08010004
 800f7ac:	08010014 	.word	0x08010014

0800f7b0 <fabsf>:
 800f7b0:	ee10 3a10 	vmov	r3, s0
 800f7b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7b8:	ee00 3a10 	vmov	s0, r3
 800f7bc:	4770      	bx	lr
	...

0800f7c0 <realloc>:
 800f7c0:	4b02      	ldr	r3, [pc, #8]	; (800f7cc <realloc+0xc>)
 800f7c2:	460a      	mov	r2, r1
 800f7c4:	4601      	mov	r1, r0
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	f000 b802 	b.w	800f7d0 <_realloc_r>
 800f7cc:	2000008c 	.word	0x2000008c

0800f7d0 <_realloc_r>:
 800f7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4614      	mov	r4, r2
 800f7d8:	460e      	mov	r6, r1
 800f7da:	b921      	cbnz	r1, 800f7e6 <_realloc_r+0x16>
 800f7dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	f000 b8d3 	b.w	800f98c <_malloc_r>
 800f7e6:	b92a      	cbnz	r2, 800f7f4 <_realloc_r+0x24>
 800f7e8:	f000 f864 	bl	800f8b4 <_free_r>
 800f7ec:	4625      	mov	r5, r4
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f4:	f000 f956 	bl	800faa4 <_malloc_usable_size_r>
 800f7f8:	4284      	cmp	r4, r0
 800f7fa:	4607      	mov	r7, r0
 800f7fc:	d802      	bhi.n	800f804 <_realloc_r+0x34>
 800f7fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f802:	d812      	bhi.n	800f82a <_realloc_r+0x5a>
 800f804:	4621      	mov	r1, r4
 800f806:	4640      	mov	r0, r8
 800f808:	f000 f8c0 	bl	800f98c <_malloc_r>
 800f80c:	4605      	mov	r5, r0
 800f80e:	2800      	cmp	r0, #0
 800f810:	d0ed      	beq.n	800f7ee <_realloc_r+0x1e>
 800f812:	42bc      	cmp	r4, r7
 800f814:	4622      	mov	r2, r4
 800f816:	4631      	mov	r1, r6
 800f818:	bf28      	it	cs
 800f81a:	463a      	movcs	r2, r7
 800f81c:	f000 f83c 	bl	800f898 <memcpy>
 800f820:	4631      	mov	r1, r6
 800f822:	4640      	mov	r0, r8
 800f824:	f000 f846 	bl	800f8b4 <_free_r>
 800f828:	e7e1      	b.n	800f7ee <_realloc_r+0x1e>
 800f82a:	4635      	mov	r5, r6
 800f82c:	e7df      	b.n	800f7ee <_realloc_r+0x1e>

0800f82e <memset>:
 800f82e:	4402      	add	r2, r0
 800f830:	4603      	mov	r3, r0
 800f832:	4293      	cmp	r3, r2
 800f834:	d100      	bne.n	800f838 <memset+0xa>
 800f836:	4770      	bx	lr
 800f838:	f803 1b01 	strb.w	r1, [r3], #1
 800f83c:	e7f9      	b.n	800f832 <memset+0x4>
	...

0800f840 <__errno>:
 800f840:	4b01      	ldr	r3, [pc, #4]	; (800f848 <__errno+0x8>)
 800f842:	6818      	ldr	r0, [r3, #0]
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	2000008c 	.word	0x2000008c

0800f84c <__libc_init_array>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	4d0d      	ldr	r5, [pc, #52]	; (800f884 <__libc_init_array+0x38>)
 800f850:	4c0d      	ldr	r4, [pc, #52]	; (800f888 <__libc_init_array+0x3c>)
 800f852:	1b64      	subs	r4, r4, r5
 800f854:	10a4      	asrs	r4, r4, #2
 800f856:	2600      	movs	r6, #0
 800f858:	42a6      	cmp	r6, r4
 800f85a:	d109      	bne.n	800f870 <__libc_init_array+0x24>
 800f85c:	4d0b      	ldr	r5, [pc, #44]	; (800f88c <__libc_init_array+0x40>)
 800f85e:	4c0c      	ldr	r4, [pc, #48]	; (800f890 <__libc_init_array+0x44>)
 800f860:	f000 f938 	bl	800fad4 <_init>
 800f864:	1b64      	subs	r4, r4, r5
 800f866:	10a4      	asrs	r4, r4, #2
 800f868:	2600      	movs	r6, #0
 800f86a:	42a6      	cmp	r6, r4
 800f86c:	d105      	bne.n	800f87a <__libc_init_array+0x2e>
 800f86e:	bd70      	pop	{r4, r5, r6, pc}
 800f870:	f855 3b04 	ldr.w	r3, [r5], #4
 800f874:	4798      	blx	r3
 800f876:	3601      	adds	r6, #1
 800f878:	e7ee      	b.n	800f858 <__libc_init_array+0xc>
 800f87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f87e:	4798      	blx	r3
 800f880:	3601      	adds	r6, #1
 800f882:	e7f2      	b.n	800f86a <__libc_init_array+0x1e>
 800f884:	0801002c 	.word	0x0801002c
 800f888:	0801002c 	.word	0x0801002c
 800f88c:	0801002c 	.word	0x0801002c
 800f890:	08010038 	.word	0x08010038

0800f894 <__retarget_lock_acquire_recursive>:
 800f894:	4770      	bx	lr

0800f896 <__retarget_lock_release_recursive>:
 800f896:	4770      	bx	lr

0800f898 <memcpy>:
 800f898:	440a      	add	r2, r1
 800f89a:	4291      	cmp	r1, r2
 800f89c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8a0:	d100      	bne.n	800f8a4 <memcpy+0xc>
 800f8a2:	4770      	bx	lr
 800f8a4:	b510      	push	{r4, lr}
 800f8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ae:	4291      	cmp	r1, r2
 800f8b0:	d1f9      	bne.n	800f8a6 <memcpy+0xe>
 800f8b2:	bd10      	pop	{r4, pc}

0800f8b4 <_free_r>:
 800f8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8b6:	2900      	cmp	r1, #0
 800f8b8:	d044      	beq.n	800f944 <_free_r+0x90>
 800f8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8be:	9001      	str	r0, [sp, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800f8c6:	bfb8      	it	lt
 800f8c8:	18e4      	addlt	r4, r4, r3
 800f8ca:	f000 f8df 	bl	800fa8c <__malloc_lock>
 800f8ce:	4a1e      	ldr	r2, [pc, #120]	; (800f948 <_free_r+0x94>)
 800f8d0:	9801      	ldr	r0, [sp, #4]
 800f8d2:	6813      	ldr	r3, [r2, #0]
 800f8d4:	b933      	cbnz	r3, 800f8e4 <_free_r+0x30>
 800f8d6:	6063      	str	r3, [r4, #4]
 800f8d8:	6014      	str	r4, [r2, #0]
 800f8da:	b003      	add	sp, #12
 800f8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8e0:	f000 b8da 	b.w	800fa98 <__malloc_unlock>
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	d908      	bls.n	800f8fa <_free_r+0x46>
 800f8e8:	6825      	ldr	r5, [r4, #0]
 800f8ea:	1961      	adds	r1, r4, r5
 800f8ec:	428b      	cmp	r3, r1
 800f8ee:	bf01      	itttt	eq
 800f8f0:	6819      	ldreq	r1, [r3, #0]
 800f8f2:	685b      	ldreq	r3, [r3, #4]
 800f8f4:	1949      	addeq	r1, r1, r5
 800f8f6:	6021      	streq	r1, [r4, #0]
 800f8f8:	e7ed      	b.n	800f8d6 <_free_r+0x22>
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	b10b      	cbz	r3, 800f904 <_free_r+0x50>
 800f900:	42a3      	cmp	r3, r4
 800f902:	d9fa      	bls.n	800f8fa <_free_r+0x46>
 800f904:	6811      	ldr	r1, [r2, #0]
 800f906:	1855      	adds	r5, r2, r1
 800f908:	42a5      	cmp	r5, r4
 800f90a:	d10b      	bne.n	800f924 <_free_r+0x70>
 800f90c:	6824      	ldr	r4, [r4, #0]
 800f90e:	4421      	add	r1, r4
 800f910:	1854      	adds	r4, r2, r1
 800f912:	42a3      	cmp	r3, r4
 800f914:	6011      	str	r1, [r2, #0]
 800f916:	d1e0      	bne.n	800f8da <_free_r+0x26>
 800f918:	681c      	ldr	r4, [r3, #0]
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	6053      	str	r3, [r2, #4]
 800f91e:	440c      	add	r4, r1
 800f920:	6014      	str	r4, [r2, #0]
 800f922:	e7da      	b.n	800f8da <_free_r+0x26>
 800f924:	d902      	bls.n	800f92c <_free_r+0x78>
 800f926:	230c      	movs	r3, #12
 800f928:	6003      	str	r3, [r0, #0]
 800f92a:	e7d6      	b.n	800f8da <_free_r+0x26>
 800f92c:	6825      	ldr	r5, [r4, #0]
 800f92e:	1961      	adds	r1, r4, r5
 800f930:	428b      	cmp	r3, r1
 800f932:	bf04      	itt	eq
 800f934:	6819      	ldreq	r1, [r3, #0]
 800f936:	685b      	ldreq	r3, [r3, #4]
 800f938:	6063      	str	r3, [r4, #4]
 800f93a:	bf04      	itt	eq
 800f93c:	1949      	addeq	r1, r1, r5
 800f93e:	6021      	streq	r1, [r4, #0]
 800f940:	6054      	str	r4, [r2, #4]
 800f942:	e7ca      	b.n	800f8da <_free_r+0x26>
 800f944:	b003      	add	sp, #12
 800f946:	bd30      	pop	{r4, r5, pc}
 800f948:	20001300 	.word	0x20001300

0800f94c <sbrk_aligned>:
 800f94c:	b570      	push	{r4, r5, r6, lr}
 800f94e:	4e0e      	ldr	r6, [pc, #56]	; (800f988 <sbrk_aligned+0x3c>)
 800f950:	460c      	mov	r4, r1
 800f952:	6831      	ldr	r1, [r6, #0]
 800f954:	4605      	mov	r5, r0
 800f956:	b911      	cbnz	r1, 800f95e <sbrk_aligned+0x12>
 800f958:	f000 f8ac 	bl	800fab4 <_sbrk_r>
 800f95c:	6030      	str	r0, [r6, #0]
 800f95e:	4621      	mov	r1, r4
 800f960:	4628      	mov	r0, r5
 800f962:	f000 f8a7 	bl	800fab4 <_sbrk_r>
 800f966:	1c43      	adds	r3, r0, #1
 800f968:	d00a      	beq.n	800f980 <sbrk_aligned+0x34>
 800f96a:	1cc4      	adds	r4, r0, #3
 800f96c:	f024 0403 	bic.w	r4, r4, #3
 800f970:	42a0      	cmp	r0, r4
 800f972:	d007      	beq.n	800f984 <sbrk_aligned+0x38>
 800f974:	1a21      	subs	r1, r4, r0
 800f976:	4628      	mov	r0, r5
 800f978:	f000 f89c 	bl	800fab4 <_sbrk_r>
 800f97c:	3001      	adds	r0, #1
 800f97e:	d101      	bne.n	800f984 <sbrk_aligned+0x38>
 800f980:	f04f 34ff 	mov.w	r4, #4294967295
 800f984:	4620      	mov	r0, r4
 800f986:	bd70      	pop	{r4, r5, r6, pc}
 800f988:	20001304 	.word	0x20001304

0800f98c <_malloc_r>:
 800f98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f990:	1ccd      	adds	r5, r1, #3
 800f992:	f025 0503 	bic.w	r5, r5, #3
 800f996:	3508      	adds	r5, #8
 800f998:	2d0c      	cmp	r5, #12
 800f99a:	bf38      	it	cc
 800f99c:	250c      	movcc	r5, #12
 800f99e:	2d00      	cmp	r5, #0
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	db01      	blt.n	800f9a8 <_malloc_r+0x1c>
 800f9a4:	42a9      	cmp	r1, r5
 800f9a6:	d905      	bls.n	800f9b4 <_malloc_r+0x28>
 800f9a8:	230c      	movs	r3, #12
 800f9aa:	603b      	str	r3, [r7, #0]
 800f9ac:	2600      	movs	r6, #0
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fa88 <_malloc_r+0xfc>
 800f9b8:	f000 f868 	bl	800fa8c <__malloc_lock>
 800f9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f9c0:	461c      	mov	r4, r3
 800f9c2:	bb5c      	cbnz	r4, 800fa1c <_malloc_r+0x90>
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	4638      	mov	r0, r7
 800f9c8:	f7ff ffc0 	bl	800f94c <sbrk_aligned>
 800f9cc:	1c43      	adds	r3, r0, #1
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	d155      	bne.n	800fa7e <_malloc_r+0xf2>
 800f9d2:	f8d8 4000 	ldr.w	r4, [r8]
 800f9d6:	4626      	mov	r6, r4
 800f9d8:	2e00      	cmp	r6, #0
 800f9da:	d145      	bne.n	800fa68 <_malloc_r+0xdc>
 800f9dc:	2c00      	cmp	r4, #0
 800f9de:	d048      	beq.n	800fa72 <_malloc_r+0xe6>
 800f9e0:	6823      	ldr	r3, [r4, #0]
 800f9e2:	4631      	mov	r1, r6
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	eb04 0903 	add.w	r9, r4, r3
 800f9ea:	f000 f863 	bl	800fab4 <_sbrk_r>
 800f9ee:	4581      	cmp	r9, r0
 800f9f0:	d13f      	bne.n	800fa72 <_malloc_r+0xe6>
 800f9f2:	6821      	ldr	r1, [r4, #0]
 800f9f4:	1a6d      	subs	r5, r5, r1
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f7ff ffa7 	bl	800f94c <sbrk_aligned>
 800f9fe:	3001      	adds	r0, #1
 800fa00:	d037      	beq.n	800fa72 <_malloc_r+0xe6>
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	442b      	add	r3, r5
 800fa06:	6023      	str	r3, [r4, #0]
 800fa08:	f8d8 3000 	ldr.w	r3, [r8]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d038      	beq.n	800fa82 <_malloc_r+0xf6>
 800fa10:	685a      	ldr	r2, [r3, #4]
 800fa12:	42a2      	cmp	r2, r4
 800fa14:	d12b      	bne.n	800fa6e <_malloc_r+0xe2>
 800fa16:	2200      	movs	r2, #0
 800fa18:	605a      	str	r2, [r3, #4]
 800fa1a:	e00f      	b.n	800fa3c <_malloc_r+0xb0>
 800fa1c:	6822      	ldr	r2, [r4, #0]
 800fa1e:	1b52      	subs	r2, r2, r5
 800fa20:	d41f      	bmi.n	800fa62 <_malloc_r+0xd6>
 800fa22:	2a0b      	cmp	r2, #11
 800fa24:	d917      	bls.n	800fa56 <_malloc_r+0xca>
 800fa26:	1961      	adds	r1, r4, r5
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	6025      	str	r5, [r4, #0]
 800fa2c:	bf18      	it	ne
 800fa2e:	6059      	strne	r1, [r3, #4]
 800fa30:	6863      	ldr	r3, [r4, #4]
 800fa32:	bf08      	it	eq
 800fa34:	f8c8 1000 	streq.w	r1, [r8]
 800fa38:	5162      	str	r2, [r4, r5]
 800fa3a:	604b      	str	r3, [r1, #4]
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f104 060b 	add.w	r6, r4, #11
 800fa42:	f000 f829 	bl	800fa98 <__malloc_unlock>
 800fa46:	f026 0607 	bic.w	r6, r6, #7
 800fa4a:	1d23      	adds	r3, r4, #4
 800fa4c:	1af2      	subs	r2, r6, r3
 800fa4e:	d0ae      	beq.n	800f9ae <_malloc_r+0x22>
 800fa50:	1b9b      	subs	r3, r3, r6
 800fa52:	50a3      	str	r3, [r4, r2]
 800fa54:	e7ab      	b.n	800f9ae <_malloc_r+0x22>
 800fa56:	42a3      	cmp	r3, r4
 800fa58:	6862      	ldr	r2, [r4, #4]
 800fa5a:	d1dd      	bne.n	800fa18 <_malloc_r+0x8c>
 800fa5c:	f8c8 2000 	str.w	r2, [r8]
 800fa60:	e7ec      	b.n	800fa3c <_malloc_r+0xb0>
 800fa62:	4623      	mov	r3, r4
 800fa64:	6864      	ldr	r4, [r4, #4]
 800fa66:	e7ac      	b.n	800f9c2 <_malloc_r+0x36>
 800fa68:	4634      	mov	r4, r6
 800fa6a:	6876      	ldr	r6, [r6, #4]
 800fa6c:	e7b4      	b.n	800f9d8 <_malloc_r+0x4c>
 800fa6e:	4613      	mov	r3, r2
 800fa70:	e7cc      	b.n	800fa0c <_malloc_r+0x80>
 800fa72:	230c      	movs	r3, #12
 800fa74:	603b      	str	r3, [r7, #0]
 800fa76:	4638      	mov	r0, r7
 800fa78:	f000 f80e 	bl	800fa98 <__malloc_unlock>
 800fa7c:	e797      	b.n	800f9ae <_malloc_r+0x22>
 800fa7e:	6025      	str	r5, [r4, #0]
 800fa80:	e7dc      	b.n	800fa3c <_malloc_r+0xb0>
 800fa82:	605b      	str	r3, [r3, #4]
 800fa84:	deff      	udf	#255	; 0xff
 800fa86:	bf00      	nop
 800fa88:	20001300 	.word	0x20001300

0800fa8c <__malloc_lock>:
 800fa8c:	4801      	ldr	r0, [pc, #4]	; (800fa94 <__malloc_lock+0x8>)
 800fa8e:	f7ff bf01 	b.w	800f894 <__retarget_lock_acquire_recursive>
 800fa92:	bf00      	nop
 800fa94:	200012fc 	.word	0x200012fc

0800fa98 <__malloc_unlock>:
 800fa98:	4801      	ldr	r0, [pc, #4]	; (800faa0 <__malloc_unlock+0x8>)
 800fa9a:	f7ff befc 	b.w	800f896 <__retarget_lock_release_recursive>
 800fa9e:	bf00      	nop
 800faa0:	200012fc 	.word	0x200012fc

0800faa4 <_malloc_usable_size_r>:
 800faa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa8:	1f18      	subs	r0, r3, #4
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfbc      	itt	lt
 800faae:	580b      	ldrlt	r3, [r1, r0]
 800fab0:	18c0      	addlt	r0, r0, r3
 800fab2:	4770      	bx	lr

0800fab4 <_sbrk_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4d06      	ldr	r5, [pc, #24]	; (800fad0 <_sbrk_r+0x1c>)
 800fab8:	2300      	movs	r3, #0
 800faba:	4604      	mov	r4, r0
 800fabc:	4608      	mov	r0, r1
 800fabe:	602b      	str	r3, [r5, #0]
 800fac0:	f7f8 fcda 	bl	8008478 <_sbrk>
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	d102      	bne.n	800face <_sbrk_r+0x1a>
 800fac8:	682b      	ldr	r3, [r5, #0]
 800faca:	b103      	cbz	r3, 800face <_sbrk_r+0x1a>
 800facc:	6023      	str	r3, [r4, #0]
 800face:	bd38      	pop	{r3, r4, r5, pc}
 800fad0:	200012f8 	.word	0x200012f8

0800fad4 <_init>:
 800fad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad6:	bf00      	nop
 800fad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fada:	bc08      	pop	{r3}
 800fadc:	469e      	mov	lr, r3
 800fade:	4770      	bx	lr

0800fae0 <_fini>:
 800fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae2:	bf00      	nop
 800fae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fae6:	bc08      	pop	{r3}
 800fae8:	469e      	mov	lr, r3
 800faea:	4770      	bx	lr
