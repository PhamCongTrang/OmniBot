
chatter_F407VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d08  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08010e90  08010e90  00011e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115a0  080115a0  00013090  2**0
                  CONTENTS
  4 .ARM          00000008  080115a0  080115a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115a8  080115a8  00013090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080115a8  080115a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115b4  080115b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080115b8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013090  2**0
                  CONTENTS
 10 .bss          00001298  20000090  20000090  00013090  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001328  20001328  00013090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d046  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330e  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  00033418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ce  00000000  00000000  00034948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002276d  00000000  00000000  00035a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a160  00000000  00000000  00058183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6357  00000000  00000000  000722e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014863a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000064f4  00000000  00000000  00148680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0014eb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010e78 	.word	0x08010e78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08010e78 	.word	0x08010e78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0a5a      	lsrs	r2, r3, #9
 8000ea0:	490f      	ldr	r1, [pc, #60]	@ (8000ee0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ea2:	fba1 1202 	umull	r1, r2, r1, r2
 8000ea6:	09d2      	lsrs	r2, r2, #7
 8000ea8:	490e      	ldr	r1, [pc, #56]	@ (8000ee4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000eaa:	fb01 f202 	mul.w	r2, r1, r2
 8000eae:	1a9b      	subs	r3, r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	0a5b      	lsrs	r3, r3, #9
 8000eb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	09db      	lsrs	r3, r3, #7
 8000ec0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	441a      	add	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	00044b83 	.word	0x00044b83
 8000ee4:	3b9aca00 	.word	0x3b9aca00

08000ee8 <_Z3PIDv>:
float data_PID[12]= {0,0,0,0,0,0,0,0,0,0,0,0};
bool check_PID = 0;
float test_w = 1.213, test_r;
uint8_t error =0;
void PID()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	e0cf      	b.n	8001094 <_Z3PIDv+0x1ac>
		if (v_set[i] == 0) duty[i] = 0;
 8000ef4:	4ab9      	ldr	r2, [pc, #740]	@ (80011dc <_Z3PIDv+0x2f4>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	d105      	bne.n	8000f16 <_Z3PIDv+0x2e>
 8000f0a:	4ab5      	ldr	r2, [pc, #724]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f14:	e0bb      	b.n	800108e <_Z3PIDv+0x1a6>
		else {
			e[i] = v_set[i] - v_enc[i];
 8000f16:	4ab1      	ldr	r2, [pc, #708]	@ (80011dc <_Z3PIDv+0x2f4>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	ed93 7a00 	vldr	s14, [r3]
 8000f22:	4ab0      	ldr	r2, [pc, #704]	@ (80011e4 <_Z3PIDv+0x2fc>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	4aad      	ldr	r2, [pc, #692]	@ (80011e8 <_Z3PIDv+0x300>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
			sum_e[i] += (e[i] + pre_e[i])/2;
 8000f3e:	4aab      	ldr	r2, [pc, #684]	@ (80011ec <_Z3PIDv+0x304>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4aa7      	ldr	r2, [pc, #668]	@ (80011e8 <_Z3PIDv+0x300>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	edd3 6a00 	vldr	s13, [r3]
 8000f56:	4aa6      	ldr	r2, [pc, #664]	@ (80011f0 <_Z3PIDv+0x308>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f66:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000f6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	4a9e      	ldr	r2, [pc, #632]	@ (80011ec <_Z3PIDv+0x304>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
			d_e[i] = e[i] - pre_e[i];
 8000f7e:	4a9a      	ldr	r2, [pc, #616]	@ (80011e8 <_Z3PIDv+0x300>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	ed93 7a00 	vldr	s14, [r3]
 8000f8a:	4a99      	ldr	r2, [pc, #612]	@ (80011f0 <_Z3PIDv+0x308>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	4a96      	ldr	r2, [pc, #600]	@ (80011f4 <_Z3PIDv+0x30c>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
			pre_e[i] = e[i];
 8000fa6:	4a90      	ldr	r2, [pc, #576]	@ (80011e8 <_Z3PIDv+0x300>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	498f      	ldr	r1, [pc, #572]	@ (80011f0 <_Z3PIDv+0x308>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	601a      	str	r2, [r3, #0]
			duty[i] += (Kp[i] * e[i] + Ki[i] * Ta * sum_e[i] + Kd[i] * (1 / Ta) * d_e[i]);
 8000fba:	4a89      	ldr	r2, [pc, #548]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	4a8b      	ldr	r2, [pc, #556]	@ (80011f8 <_Z3PIDv+0x310>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	edd3 6a00 	vldr	s13, [r3]
 8000fd6:	4a84      	ldr	r2, [pc, #528]	@ (80011e8 <_Z3PIDv+0x300>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fe6:	4a85      	ldr	r2, [pc, #532]	@ (80011fc <_Z3PIDv+0x314>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	ed93 6a00 	vldr	s12, [r3]
 8000ff2:	4b83      	ldr	r3, [pc, #524]	@ (8001200 <_Z3PIDv+0x318>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000ffc:	4a7b      	ldr	r2, [pc, #492]	@ (80011ec <_Z3PIDv+0x304>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	ee66 7a27 	vmul.f32	s15, s12, s15
 800100c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001010:	4a7c      	ldr	r2, [pc, #496]	@ (8001204 <_Z3PIDv+0x31c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	ed93 6a00 	vldr	s12, [r3]
 800101c:	4b78      	ldr	r3, [pc, #480]	@ (8001200 <_Z3PIDv+0x318>)
 800101e:	edd3 5a00 	vldr	s11, [r3]
 8001022:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8001026:	eec5 7a25 	vdiv.f32	s15, s10, s11
 800102a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800102e:	4a71      	ldr	r2, [pc, #452]	@ (80011f4 <_Z3PIDv+0x30c>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800103e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	b219      	sxth	r1, r3
 8001050:	4a63      	ldr	r2, [pc, #396]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			//Limit the Duty value
			if (duty[i] > 999)
 8001058:	4a61      	ldr	r2, [pc, #388]	@ (80011e0 <_Z3PIDv+0x2f8>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001064:	db06      	blt.n	8001074 <_Z3PIDv+0x18c>
			{
				duty[i] = 999;
 8001066:	4a5e      	ldr	r2, [pc, #376]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800106e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001072:	e00c      	b.n	800108e <_Z3PIDv+0x1a6>
			}
			else if (duty[i] < -999 )
 8001074:	4a5a      	ldr	r2, [pc, #360]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800107c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001080:	dc05      	bgt.n	800108e <_Z3PIDv+0x1a6>
			{
				duty[i] = -999;
 8001082:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f64f 4119 	movw	r1, #64537	@ 0xfc19
 800108a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b03      	cmp	r3, #3
 8001098:	f77f af2c 	ble.w	8000ef4 <_Z3PIDv+0xc>
			}
		}
	}

	if (duty[0] >= 0){
 800109c:	4b50      	ldr	r3, [pc, #320]	@ (80011e0 <_Z3PIDv+0x2f8>)
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db10      	blt.n	80010c8 <_Z3PIDv+0x1e0>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2120      	movs	r1, #32
 80010aa:	4857      	ldr	r0, [pc, #348]	@ (8001208 <_Z3PIDv+0x320>)
 80010ac:	f008 fdd0 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	4855      	ldr	r0, [pc, #340]	@ (800120c <_Z3PIDv+0x324>)
 80010b6:	f008 fdcb 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty[0]);
 80010ba:	4b49      	ldr	r3, [pc, #292]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80010bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c0:	4b53      	ldr	r3, [pc, #332]	@ (8001210 <_Z3PIDv+0x328>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010c6:	e015      	b.n	80010f4 <_Z3PIDv+0x20c>
	}
	else if (duty[0] < 0){
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80010ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da10      	bge.n	80010f4 <_Z3PIDv+0x20c>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	484c      	ldr	r0, [pc, #304]	@ (8001208 <_Z3PIDv+0x320>)
 80010d8:	f008 fdba 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2101      	movs	r1, #1
 80010e0:	484a      	ldr	r0, [pc, #296]	@ (800120c <_Z3PIDv+0x324>)
 80010e2:	f008 fdb5 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-duty[0]);
 80010e6:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	425a      	negs	r2, r3
 80010ee:	4b48      	ldr	r3, [pc, #288]	@ (8001210 <_Z3PIDv+0x328>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if (duty[1] >= 0){
 80010f4:	4b3a      	ldr	r3, [pc, #232]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80010f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db10      	blt.n	8001120 <_Z3PIDv+0x238>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2102      	movs	r1, #2
 8001102:	4842      	ldr	r0, [pc, #264]	@ (800120c <_Z3PIDv+0x324>)
 8001104:	f008 fda4 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2104      	movs	r1, #4
 800110c:	483f      	ldr	r0, [pc, #252]	@ (800120c <_Z3PIDv+0x324>)
 800110e:	f008 fd9f 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,duty[1]);
 8001112:	4b33      	ldr	r3, [pc, #204]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001114:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <_Z3PIDv+0x328>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	639a      	str	r2, [r3, #56]	@ 0x38
 800111e:	e015      	b.n	800114c <_Z3PIDv+0x264>
	}
	else if (duty[1] < 0){
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001122:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	da10      	bge.n	800114c <_Z3PIDv+0x264>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	4837      	ldr	r0, [pc, #220]	@ (800120c <_Z3PIDv+0x324>)
 8001130:	f008 fd8e 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2104      	movs	r1, #4
 8001138:	4834      	ldr	r0, [pc, #208]	@ (800120c <_Z3PIDv+0x324>)
 800113a:	f008 fd89 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-duty[1]);
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001140:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001144:	425a      	negs	r2, r3
 8001146:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <_Z3PIDv+0x328>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if (duty[2] >= 0){
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <_Z3PIDv+0x2f8>)
 800114e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db12      	blt.n	800117c <_Z3PIDv+0x294>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115c:	482b      	ldr	r0, [pc, #172]	@ (800120c <_Z3PIDv+0x324>)
 800115e:	f008 fd77 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001168:	4828      	ldr	r0, [pc, #160]	@ (800120c <_Z3PIDv+0x324>)
 800116a:	f008 fd71 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,duty[2]);
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <_Z3PIDv+0x2f8>)
 8001170:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <_Z3PIDv+0x328>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	63da      	str	r2, [r3, #60]	@ 0x3c
 800117a:	e017      	b.n	80011ac <_Z3PIDv+0x2c4>
	}
	else if (duty[2] < 0){
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <_Z3PIDv+0x2f8>)
 800117e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	da12      	bge.n	80011ac <_Z3PIDv+0x2c4>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	481f      	ldr	r0, [pc, #124]	@ (800120c <_Z3PIDv+0x324>)
 800118e:	f008 fd5f 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001198:	481c      	ldr	r0, [pc, #112]	@ (800120c <_Z3PIDv+0x324>)
 800119a:	f008 fd59 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,-duty[2]);
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80011a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011a4:	425a      	negs	r2, r3
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <_Z3PIDv+0x328>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	if (duty[3] >= 0){
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80011ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db2e      	blt.n	8001214 <_Z3PIDv+0x32c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011bc:	4813      	ldr	r0, [pc, #76]	@ (800120c <_Z3PIDv+0x324>)
 80011be:	f008 fd47 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <_Z3PIDv+0x324>)
 80011ca:	f008 fd41 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,duty[3]);
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <_Z3PIDv+0x2f8>)
 80011d0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <_Z3PIDv+0x328>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80011da:	e033      	b.n	8001244 <_Z3PIDv+0x35c>
 80011dc:	20000444 	.word	0x20000444
 80011e0:	200004d4 	.word	0x200004d4
 80011e4:	20000454 	.word	0x20000454
 80011e8:	20000494 	.word	0x20000494
 80011ec:	200004a4 	.word	0x200004a4
 80011f0:	200004b4 	.word	0x200004b4
 80011f4:	200004c4 	.word	0x200004c4
 80011f8:	20000464 	.word	0x20000464
 80011fc:	20000474 	.word	0x20000474
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000484 	.word	0x20000484
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400
 8001210:	20000100 	.word	0x20000100
	}
	else if (duty[3] < 0){
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <_Z3PIDv+0x36c>)
 8001216:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da12      	bge.n	8001244 <_Z3PIDv+0x35c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <_Z3PIDv+0x370>)
 8001226:	f008 fd13 	bl	8009c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001230:	4809      	ldr	r0, [pc, #36]	@ (8001258 <_Z3PIDv+0x370>)
 8001232:	f008 fd0d 	bl	8009c50 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-duty[3]);
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <_Z3PIDv+0x36c>)
 8001238:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800123c:	425a      	negs	r2, r3
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <_Z3PIDv+0x374>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40
	}
	check_PID = 0;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <_Z3PIDv+0x378>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200004d4 	.word	0x200004d4
 8001258:	40020400 	.word	0x40020400
 800125c:	20000100 	.word	0x20000100
 8001260:	20000528 	.word	0x20000528

08001264 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	// Check if timer has triggered and update attitude
	if (htim == &htim7)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a51      	ldr	r2, [pc, #324]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d102      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		MPU_calcAttitude(&hi2c1);
 8001274:	4850      	ldr	r0, [pc, #320]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001276:	f005 fdff 	bl	8006e78 <MPU_calcAttitude>
	}
	if (htim->Instance == TIM6)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a4f      	ldr	r2, [pc, #316]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001280:	4293      	cmp	r3, r2
 8001282:	f040 8092 	bne.w	80013aa <HAL_TIM_PeriodElapsedCallback+0x146>
	{
			encoder_cnt[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001286:	4b4e      	ldr	r3, [pc, #312]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b4d      	ldr	r3, [pc, #308]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001290:	801a      	strh	r2, [r3, #0]
			encoder_cnt[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001292:	4b4d      	ldr	r3, [pc, #308]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800129c:	805a      	strh	r2, [r3, #2]
			encoder_cnt[2] = __HAL_TIM_GET_COUNTER(&htim4);
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012a8:	809a      	strh	r2, [r3, #4]
			encoder_cnt[3] = __HAL_TIM_GET_COUNTER(&htim5);
 80012aa:	4b49      	ldr	r3, [pc, #292]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012b4:	80da      	strh	r2, [r3, #6]
			for (int i = 0; i < 4; i++){
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e06e      	b.n	800139a <HAL_TIM_PeriodElapsedCallback+0x136>
				if(-encoder_cnt[i] + encoder_cnt_pre[i] > 30000)			// Handle counter overflow when reversing
 80012bc:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4a3f      	ldr	r2, [pc, #252]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ce:	1acb      	subs	r3, r1, r3
 80012d0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012d4:	4293      	cmp	r3, r2
 80012d6:	dd0f      	ble.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x94>
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i] - 65536;
 80012d8:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012e0:	4938      	ldr	r1, [pc, #224]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b219      	sxth	r1, r3
 80012ee:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012f6:	e02b      	b.n	8001350 <HAL_TIM_PeriodElapsedCallback+0xec>
				}
				else if(-encoder_cnt[i] + encoder_cnt_pre[i] < -30000)	// Handling counter overflow during forward rotation
 80012f8:	4a36      	ldr	r2, [pc, #216]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001300:	4619      	mov	r1, r3
 8001302:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130a:	1acb      	subs	r3, r1, r3
 800130c:	4a33      	ldr	r2, [pc, #204]	@ (80013dc <HAL_TIM_PeriodElapsedCallback+0x178>)
 800130e:	4293      	cmp	r3, r2
 8001310:	da0f      	bge.n	8001332 <HAL_TIM_PeriodElapsedCallback+0xce>
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i] + 65536;
 8001312:	4a30      	ldr	r2, [pc, #192]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800131a:	492a      	ldr	r1, [pc, #168]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	b219      	sxth	r1, r3
 8001328:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001330:	e00e      	b.n	8001350 <HAL_TIM_PeriodElapsedCallback+0xec>
				}
				else
				{
					delta[i] = -encoder_cnt[i] + encoder_cnt_pre[i];
 8001332:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800133a:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	b219      	sxth	r1, r3
 8001348:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}
				v_enc[i] = (float)(delta[i])*60*5/1440;
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80013e0 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800136c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001370:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80013e4 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001378:	4a1b      	ldr	r2, [pc, #108]	@ (80013e8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	edc3 7a00 	vstr	s15, [r3]
				encoder_cnt_pre[i] = encoder_cnt[i] ;
 8001384:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800138c:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 4; i++){
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b03      	cmp	r3, #3
 800139e:	dd8d      	ble.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x58>
			}
			check_PID = 1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
			PID();
 80013a6:	f7ff fd9f 	bl	8000ee8 <_Z3PIDv>
	}
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002b0 	.word	0x200002b0
 80013b8:	200000ac 	.word	0x200000ac
 80013bc:	40001000 	.word	0x40001000
 80013c0:	20000148 	.word	0x20000148
 80013c4:	200004dc 	.word	0x200004dc
 80013c8:	20000190 	.word	0x20000190
 80013cc:	200001d8 	.word	0x200001d8
 80013d0:	20000220 	.word	0x20000220
 80013d4:	200004e4 	.word	0x200004e4
 80013d8:	200004ec 	.word	0x200004ec
 80013dc:	ffff8ad0 	.word	0xffff8ad0
 80013e0:	42700000 	.word	0x42700000
 80013e4:	44b40000 	.word	0x44b40000
 80013e8:	20000454 	.word	0x20000454
 80013ec:	20000528 	.word	0x20000528

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f007 fa00 	bl	80087f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f8cc 	bl	8001594 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 fcf6 	bl	8001dec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001400:	f000 fccc 	bl	8001d9c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001404:	f000 fc9c 	bl	8001d40 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001408:	f000 fa5e 	bl	80018c8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800140c:	f000 faba 	bl	8001984 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001410:	f000 fb16 	bl	8001a40 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8001414:	f000 fb72 	bl	8001afc <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001418:	f000 f964 	bl	80016e4 <_ZL12MX_TIM1_Initv>
  MX_TIM9_Init();
 800141c:	f000 fc4c 	bl	8001cb8 <_ZL12MX_TIM9_Initv>
  MX_TIM6_Init();
 8001420:	f000 fbca 	bl	8001bb8 <_ZL12MX_TIM6_Initv>
  MX_I2C1_Init();
 8001424:	f000 f92a 	bl	800167c <_ZL12MX_I2C1_Initv>
  MX_TIM7_Init();
 8001428:	f000 fc06 	bl	8001c38 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */
  Flash_Read_Array_Float(0x080A0000, Kp, 4);
 800142c:	2204      	movs	r2, #4
 800142e:	4946      	ldr	r1, [pc, #280]	@ (8001548 <main+0x158>)
 8001430:	4846      	ldr	r0, [pc, #280]	@ (800154c <main+0x15c>)
 8001432:	f005 f9c2 	bl	80067ba <Flash_Read_Array_Float>
  Flash_Read_Array_Float(0x080C0000, Ki, 4);
 8001436:	2204      	movs	r2, #4
 8001438:	4945      	ldr	r1, [pc, #276]	@ (8001550 <main+0x160>)
 800143a:	4846      	ldr	r0, [pc, #280]	@ (8001554 <main+0x164>)
 800143c:	f005 f9bd 	bl	80067ba <Flash_Read_Array_Float>
  Flash_Read_Array_Float(0x080E0000, Kd, 4);
 8001440:	2204      	movs	r2, #4
 8001442:	4945      	ldr	r1, [pc, #276]	@ (8001558 <main+0x168>)
 8001444:	4845      	ldr	r0, [pc, #276]	@ (800155c <main+0x16c>)
 8001446:	f005 f9b8 	bl	80067ba <Flash_Read_Array_Float>

  setup();
 800144a:	f004 fdd5 	bl	8005ff8 <setup>
  if (MPU_begin(&hi2c1, AD0_LOW, tau, dt))
 800144e:	4b44      	ldr	r3, [pc, #272]	@ (8001560 <main+0x170>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <main+0x174>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	eef0 0a47 	vmov.f32	s1, s14
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	2168      	movs	r1, #104	@ 0x68
 8001464:	4840      	ldr	r0, [pc, #256]	@ (8001568 <main+0x178>)
 8001466:	f005 f9e3 	bl	8006830 <MPU_begin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <main+0x92>
   {
	  error =0;
 800147a:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <main+0x17c>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e002      	b.n	8001488 <main+0x98>
   }
  else error =1;
 8001482:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <main+0x17c>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]

  MPU_calibrateGyro(&hi2c1, num_cal_point);
 8001488:	4b39      	ldr	r3, [pc, #228]	@ (8001570 <main+0x180>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	4836      	ldr	r0, [pc, #216]	@ (8001568 <main+0x178>)
 8001490:	f005 fbf6 	bl	8006c80 <MPU_calibrateGyro>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001494:	2100      	movs	r1, #0
 8001496:	4837      	ldr	r0, [pc, #220]	@ (8001574 <main+0x184>)
 8001498:	f00b fdd8 	bl	800d04c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800149c:	2104      	movs	r1, #4
 800149e:	4835      	ldr	r0, [pc, #212]	@ (8001574 <main+0x184>)
 80014a0:	f00b fdd4 	bl	800d04c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014a4:	2108      	movs	r1, #8
 80014a6:	4833      	ldr	r0, [pc, #204]	@ (8001574 <main+0x184>)
 80014a8:	f00b fdd0 	bl	800d04c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014ac:	210c      	movs	r1, #12
 80014ae:	4831      	ldr	r0, [pc, #196]	@ (8001574 <main+0x184>)
 80014b0:	f00b fdcc 	bl	800d04c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80014b4:	213c      	movs	r1, #60	@ 0x3c
 80014b6:	4830      	ldr	r0, [pc, #192]	@ (8001578 <main+0x188>)
 80014b8:	f00b ff36 	bl	800d328 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80014bc:	213c      	movs	r1, #60	@ 0x3c
 80014be:	482f      	ldr	r0, [pc, #188]	@ (800157c <main+0x18c>)
 80014c0:	f00b ff32 	bl	800d328 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80014c4:	213c      	movs	r1, #60	@ 0x3c
 80014c6:	482e      	ldr	r0, [pc, #184]	@ (8001580 <main+0x190>)
 80014c8:	f00b ff2e 	bl	800d328 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 80014cc:	213c      	movs	r1, #60	@ 0x3c
 80014ce:	482d      	ldr	r0, [pc, #180]	@ (8001584 <main+0x194>)
 80014d0:	f00b ff2a 	bl	800d328 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80014d4:	482c      	ldr	r0, [pc, #176]	@ (8001588 <main+0x198>)
 80014d6:	f00b fcef 	bl	800ceb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80014da:	482c      	ldr	r0, [pc, #176]	@ (800158c <main+0x19c>)
 80014dc:	f00b fcec 	bl	800ceb8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	data_PID[0] = Kp[0]; data_PID[1] = Ki[0]; data_PID[2] = Kd[0]; data_PID[3] = Kp[1]; data_PID[4] = Ki[1]; data_PID[5] = Kd[1]; data_PID[6] = Kp[2]; data_PID[7] = Ki[2]; data_PID[8] = Kd[2]; data_PID[9] = Kp[3]; data_PID[10] = Ki[3]; data_PID[11] = Kd[3];
 80014e0:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <main+0x158>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001590 <main+0x1a0>)
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <main+0x160>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <main+0x1a0>)
 80014ee:	6053      	str	r3, [r2, #4]
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <main+0x168>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <main+0x1a0>)
 80014f6:	6093      	str	r3, [r2, #8]
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <main+0x158>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <main+0x1a0>)
 80014fe:	60d3      	str	r3, [r2, #12]
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <main+0x160>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <main+0x1a0>)
 8001506:	6113      	str	r3, [r2, #16]
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <main+0x168>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <main+0x1a0>)
 800150e:	6153      	str	r3, [r2, #20]
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <main+0x158>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <main+0x1a0>)
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <main+0x160>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <main+0x1a0>)
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <main+0x168>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <main+0x1a0>)
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <main+0x158>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <main+0x1a0>)
 800152e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <main+0x160>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a16      	ldr	r2, [pc, #88]	@ (8001590 <main+0x1a0>)
 8001536:	6293      	str	r3, [r2, #40]	@ 0x28
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <main+0x168>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a14      	ldr	r2, [pc, #80]	@ (8001590 <main+0x1a0>)
 800153e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	loop();
 8001540:	f004 fd82 	bl	8006048 <loop>
	data_PID[0] = Kp[0]; data_PID[1] = Ki[0]; data_PID[2] = Kd[0]; data_PID[3] = Kp[1]; data_PID[4] = Ki[1]; data_PID[5] = Kd[1]; data_PID[6] = Kp[2]; data_PID[7] = Ki[2]; data_PID[8] = Kd[2]; data_PID[9] = Kp[3]; data_PID[10] = Ki[3]; data_PID[11] = Kd[3];
 8001544:	bf00      	nop
 8001546:	e7cb      	b.n	80014e0 <main+0xf0>
 8001548:	20000464 	.word	0x20000464
 800154c:	080a0000 	.word	0x080a0000
 8001550:	20000474 	.word	0x20000474
 8001554:	080c0000 	.word	0x080c0000
 8001558:	20000484 	.word	0x20000484
 800155c:	080e0000 	.word	0x080e0000
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	200000ac 	.word	0x200000ac
 800156c:	20000529 	.word	0x20000529
 8001570:	20000008 	.word	0x20000008
 8001574:	20000100 	.word	0x20000100
 8001578:	20000148 	.word	0x20000148
 800157c:	20000190 	.word	0x20000190
 8001580:	200001d8 	.word	0x200001d8
 8001584:	20000220 	.word	0x20000220
 8001588:	20000268 	.word	0x20000268
 800158c:	200002b0 	.word	0x200002b0
 8001590:	200004f8 	.word	0x200004f8

08001594 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	@ 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	@ 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00f fb16 	bl	8010bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <_Z18SystemClock_Configv+0xe0>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001674 <_Z18SystemClock_Configv+0xe0>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <_Z18SystemClock_Configv+0xe0>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <_Z18SystemClock_Configv+0xe4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <_Z18SystemClock_Configv+0xe4>)
 80015de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <_Z18SystemClock_Configv+0xe4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f8:	2310      	movs	r3, #16
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001604:	2308      	movs	r3, #8
 8001606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001608:	23a8      	movs	r3, #168	@ 0xa8
 800160a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f00a ffa5 	bl	800c568 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800162e:	f000 fc6f 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001632:	230f      	movs	r3, #15
 8001634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001636:	2302      	movs	r3, #2
 8001638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800163e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2105      	movs	r1, #5
 8001650:	4618      	mov	r0, r3
 8001652:	f00b fa01 	bl	800ca58 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf14      	ite	ne
 800165c:	2301      	movne	r3, #1
 800165e:	2300      	moveq	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001666:	f000 fc53 	bl	8001f10 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	@ 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <_ZL12MX_I2C1_Initv+0x60>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001688:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <_ZL12MX_I2C1_Initv+0x64>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800169a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b8:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ba:	f008 fae3 	bl	8009c84 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80016ce:	f000 fc1f 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	40005400 	.word	0x40005400
 80016e0:	000186a0 	.word	0x000186a0

080016e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b096      	sub	sp, #88	@ 0x58
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2220      	movs	r2, #32
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00f fa59 	bl	8010bd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001722:	4b67      	ldr	r3, [pc, #412]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001724:	4a67      	ldr	r2, [pc, #412]	@ (80018c4 <_ZL12MX_TIM1_Initv+0x1e0>)
 8001726:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001728:	4b65      	ldr	r3, [pc, #404]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 800172a:	22a7      	movs	r2, #167	@ 0xa7
 800172c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b64      	ldr	r3, [pc, #400]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001734:	4b62      	ldr	r3, [pc, #392]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001736:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800173a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b60      	ldr	r3, [pc, #384]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001742:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001748:	4b5d      	ldr	r3, [pc, #372]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800174e:	485c      	ldr	r0, [pc, #368]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001750:	f00b fb62 	bl	800ce18 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001764:	f000 fbd4 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001772:	4619      	mov	r1, r3
 8001774:	4852      	ldr	r0, [pc, #328]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001776:	f00c f82f 	bl	800d7d8 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 800178a:	f000 fbc1 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800178e:	484c      	ldr	r0, [pc, #304]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001790:	f00b fc02 	bl	800cf98 <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80017a4:	f000 fbb4 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017b4:	4619      	mov	r1, r3
 80017b6:	4842      	ldr	r0, [pc, #264]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 80017b8:	f00c fc0e 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80017cc:	f000 fba0 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d0:	2360      	movs	r3, #96	@ 0x60
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4832      	ldr	r0, [pc, #200]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 80017f6:	f00b ff2d 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800180a:	f000 fb81 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	2204      	movs	r2, #4
 8001814:	4619      	mov	r1, r3
 8001816:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001818:	f00b ff1c 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 800182c:	f000 fb70 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001834:	2208      	movs	r2, #8
 8001836:	4619      	mov	r1, r3
 8001838:	4821      	ldr	r0, [pc, #132]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 800183a:	f00b ff0b 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800184e:	f000 fb5f 	bl	8001f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001856:	220c      	movs	r2, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 800185c:	f00b fefa 	bl	800d654 <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8001870:	f000 fb4e 	bl	8001f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 8001898:	f00c fc1a 	bl	800e0d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 80018ac:	f000 fb30 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b0:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <_ZL12MX_TIM1_Initv+0x1dc>)
 80018b2:	f006 fdbb 	bl	800842c <HAL_TIM_MspPostInit>

}
 80018b6:	bf00      	nop
 80018b8:	3758      	adds	r7, #88	@ 0x58
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000100 	.word	0x20000100
 80018c4:	40010000 	.word	0x40010000

080018c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2224      	movs	r2, #36	@ 0x24
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00f f97c 	bl	8010bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e4:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 80018e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 80018fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800190c:	2303      	movs	r3, #3
 800190e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	4812      	ldr	r0, [pc, #72]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 8001938:	f00b fc50 	bl	800d1dc <HAL_TIM_Encoder_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800194c:	f000 fae0 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <_ZL12MX_TIM2_Initv+0xb8>)
 800195e:	f00c fb3b 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf14      	ite	ne
 8001968:	2301      	movne	r3, #1
 800196a:	2300      	moveq	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8001972:	f000 facd 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000148 	.word	0x20000148

08001984 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	2224      	movs	r2, #36	@ 0x24
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f00f f91e 	bl	8010bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019a2:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <_ZL12MX_TIM3_Initv+0xb8>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019c6:	2303      	movs	r3, #3
 80019c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4619      	mov	r1, r3
 80019f0:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80019f2:	f00b fbf3 	bl	800d1dc <HAL_TIM_Encoder_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001a06:	f000 fa83 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a18:	f00c fade 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf14      	ite	ne
 8001a22:	2301      	movne	r3, #1
 8001a24:	2300      	moveq	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001a2c:	f000 fa70 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3730      	adds	r7, #48	@ 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000190 	.word	0x20000190
 8001a3c:	40000400 	.word	0x40000400

08001a40 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00f f8c0 	bl	8010bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a5e:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <_ZL12MX_TIM4_Initv+0xb8>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a82:	2303      	movs	r3, #3
 8001a84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001aae:	f00b fb95 	bl	800d1dc <HAL_TIM_Encoder_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001ac2:	f000 fa25 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <_ZL12MX_TIM4_Initv+0xb4>)
 8001ad4:	f00c fa80 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001ae8:	f000 fa12 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	@ 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200001d8 	.word	0x200001d8
 8001af8:	40000800 	.word	0x40000800

08001afc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2224      	movs	r2, #36	@ 0x24
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00f f862 	bl	8010bd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b1a:	4a26      	ldr	r2, [pc, #152]	@ (8001bb4 <_ZL12MX_TIM5_Initv+0xb8>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	4811      	ldr	r0, [pc, #68]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b6a:	f00b fb37 	bl	800d1dc <HAL_TIM_Encoder_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001b7e:	f000 f9c7 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <_ZL12MX_TIM5_Initv+0xb4>)
 8001b90:	f00c fa22 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001ba4:	f000 f9b4 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	@ 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000220 	.word	0x20000220
 8001bb4:	40000c00 	.word	0x40000c00

08001bb8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <_ZL12MX_TIM6_Initv+0x7c>)
 8001bca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001bce:	f240 628f 	movw	r2, #1679	@ 0x68f
 8001bd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001bdc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001be0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001bea:	f00b f915 	bl	800ce18 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001bfe:	f000 f987 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4808      	ldr	r0, [pc, #32]	@ (8001c30 <_ZL12MX_TIM6_Initv+0x78>)
 8001c10:	f00c f9e2 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001c24:	f000 f974 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000268 	.word	0x20000268
 8001c34:	40001000 	.word	0x40001000

08001c38 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c48:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <_ZL12MX_TIM7_Initv+0x7c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3359;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c4e:	f640 521f 	movw	r2, #3359	@ 0xd1f
 8001c52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c5c:	2263      	movs	r2, #99	@ 0x63
 8001c5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c66:	4812      	ldr	r0, [pc, #72]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c68:	f00b f8d6 	bl	800ce18 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8001c7c:	f000 f948 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c88:	463b      	mov	r3, r7
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4808      	ldr	r0, [pc, #32]	@ (8001cb0 <_ZL12MX_TIM7_Initv+0x78>)
 8001c8e:	f00c f9a3 	bl	800dfd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8001ca2:	f000 f935 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002b0 	.word	0x200002b0
 8001cb4:	40001400 	.word	0x40001400

08001cb8 <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <_ZL12MX_TIM9_Initv+0x84>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001cd2:	f640 521f 	movw	r2, #3359	@ 0xd1f
 8001cd6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001ce0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ce4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cf2:	4811      	ldr	r0, [pc, #68]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001cf4:	f00b f890 	bl	800ce18 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ZL12MX_TIM9_Initv+0x54>
  {
    Error_Handler();
 8001d08:	f000 f902 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d10:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4808      	ldr	r0, [pc, #32]	@ (8001d38 <_ZL12MX_TIM9_Initv+0x80>)
 8001d18:	f00b fd5e 	bl	800d7d8 <HAL_TIM_ConfigClockSource>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <_ZL12MX_TIM9_Initv+0x78>
  {
    Error_Handler();
 8001d2c:	f000 f8f0 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200002f8 	.word	0x200002f8
 8001d3c:	40014000 	.word	0x40014000

08001d40 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d4c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001d78:	f00c fa10 	bl	800e19c <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001d8c:	f000 f8c0 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000340 	.word	0x20000340
 8001d98:	40004400 	.word	0x40004400

08001d9c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_ZL11MX_DMA_Initv+0x4c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <_ZL11MX_DMA_Initv+0x4c>)
 8001dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <_ZL11MX_DMA_Initv+0x4c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2010      	movs	r0, #16
 8001dc4:	f006 fe89 	bl	8008ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001dc8:	2010      	movs	r0, #16
 8001dca:	f006 fea2 	bl	8008b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2011      	movs	r0, #17
 8001dd4:	f006 fe81 	bl	8008ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001dd8:	2011      	movs	r0, #17
 8001dda:	f006 fe9a 	bl	8008b12 <HAL_NVIC_EnableIRQ>

}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4b38      	ldr	r3, [pc, #224]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a37      	ldr	r2, [pc, #220]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b35      	ldr	r3, [pc, #212]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a30      	ldr	r2, [pc, #192]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a29      	ldr	r2, [pc, #164]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e7c:	f043 0310 	orr.w	r3, r3, #16
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a1b      	ldr	r2, [pc, #108]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <_ZL12MX_GPIO_Initv+0x118>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2120      	movs	r1, #32
 8001eae:	4816      	ldr	r0, [pc, #88]	@ (8001f08 <_ZL12MX_GPIO_Initv+0x11c>)
 8001eb0:	f007 fece 	bl	8009c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8001eba:	4814      	ldr	r0, [pc, #80]	@ (8001f0c <_ZL12MX_GPIO_Initv+0x120>)
 8001ebc:	f007 fec8 	bl	8009c50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <_ZL12MX_GPIO_Initv+0x11c>)
 8001ed8:	f007 fd1e 	bl	8009918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001edc:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8001ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <_ZL12MX_GPIO_Initv+0x120>)
 8001ef6:	f007 fd0f 	bl	8009918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	@ 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020400 	.word	0x40020400

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <Error_Handler+0x8>
 8001f1c:	0000      	movs	r0, r0
	...

08001f20 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d117      	bne.n	8001f60 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d112      	bne.n	8001f60 <_Z41__static_initialization_and_destruction_0ii+0x40>
float r = 0.05, d = 0.175*sqrt(2), l = 2*pi*r;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe faae 	bl	80004a0 <__aeabi_f2d>
 8001f44:	a308      	add	r3, pc, #32	@ (adr r3, 8001f68 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fb01 	bl	8000550 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fdd3 	bl	8000b00 <__aeabi_d2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	54442d28 	.word	0x54442d28
 8001f6c:	401921fb 	.word	0x401921fb
 8001f70:	20000010 	.word	0x20000010
 8001f74:	200004f4 	.word	0x200004f4

08001f78 <_GLOBAL__sub_I_hi2c1>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff ffcd 	bl	8001f20 <_Z41__static_initialization_and_destruction_0ii>
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f92:	edc7 0a00 	vstr	s1, [r7]
 8001f96:	edd7 0a00 	vldr	s1, [r7]
 8001f9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f9e:	f00d fbaf 	bl	800f700 <atan2f>
 8001fa2:	eef0 7a40 	vmov.f32	s15, s0
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	08011360 	.word	0x08011360

08001ff4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
      data()
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ffe8 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ffce 	bl	8001fb0 <_ZN3ros4TimeC1Ev>
    {
    }
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	08011348 	.word	0x08011348

08002024 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	b2ca      	uxtb	r2, r1
 800203e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0a19      	lsrs	r1, r3, #8
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3301      	adds	r3, #1
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c19      	lsrs	r1, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3302      	adds	r3, #2
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	b2ca      	uxtb	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0e19      	lsrs	r1, r3, #24
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3303      	adds	r3, #3
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3304      	adds	r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a19      	lsrs	r1, r3, #8
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	0c19      	lsrs	r1, r3, #16
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3302      	adds	r3, #2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	b2ca      	uxtb	r2, r1
 80020ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0e19      	lsrs	r1, r3, #24
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3303      	adds	r3, #3
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	b2ca      	uxtb	r2, r1
 80020be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3304      	adds	r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80020c6:	68fb      	ldr	r3, [r7, #12]
    }
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	440b      	add	r3, r1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3302      	adds	r3, #2
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	440b      	add	r3, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3303      	adds	r3, #3
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	440b      	add	r3, r1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	440b      	add	r3, r1
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3302      	adds	r3, #2
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	440b      	add	r3, r1
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3303      	adds	r3, #3
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	440b      	add	r3, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
     return offset;
 800218e:	68fb      	ldr	r3, [r7, #12]
    }
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	08010e90 	.word	0x08010e90

080021b8 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	08010ea0 	.word	0x08010ea0

080021d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fef8 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80021e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021f4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021fa:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002200:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
    {
    }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08011330 	.word	0x08011330
 8002218:	08010ec4 	.word	0x08010ec4

0800221c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8899      	ldrh	r1, [r3, #4]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	b2ca      	uxtb	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	889b      	ldrh	r3, [r3, #4]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	b299      	uxth	r1, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3301      	adds	r3, #1
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4413      	add	r3, r2
 8002248:	b2ca      	uxtb	r2, r1
 800224a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3302      	adds	r3, #2
 8002250:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fd ffb6 	bl	80001c8 <strlen>
 800225c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	4413      	add	r3, r2
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	4618      	mov	r0, r3
 8002268:	f005 f836 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3304      	adds	r3, #4
 8002270:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	18d0      	adds	r0, r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4619      	mov	r1, r3
 8002280:	f00e fcdc 	bl	8010c3c <memcpy>
      offset += length_topic_name;
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd ff99 	bl	80001c8 <strlen>
 8002296:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	6979      	ldr	r1, [r7, #20]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 f819 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3304      	adds	r3, #4
 80022aa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	18d0      	adds	r0, r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f00e fcbf 	bl	8010c3c <memcpy>
      offset += length_message_type;
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ff7c 	bl	80001c8 <strlen>
 80022d0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	6939      	ldr	r1, [r7, #16]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fffc 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3304      	adds	r3, #4
 80022e4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	18d0      	adds	r0, r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f00e fca2 	bl	8010c3c <memcpy>
      offset += length_md5sum;
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	0a19      	lsrs	r1, r3, #8
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0c19      	lsrs	r1, r3, #16
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3302      	adds	r3, #2
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	4413      	add	r3, r2
 800232e:	b2ca      	uxtb	r2, r1
 8002330:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	0e19      	lsrs	r1, r3, #24
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3303      	adds	r3, #3
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	b2ca      	uxtb	r2, r1
 8002340:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	61fb      	str	r3, [r7, #28]
      return offset;
 8002348:	69fb      	ldr	r3, [r7, #28]
    }
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002352:	b580      	push	{r7, lr}
 8002354:	b08a      	sub	sp, #40	@ 0x28
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	b21a      	sxth	r2, r3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3301      	adds	r3, #1
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	440b      	add	r3, r1
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	b21b      	sxth	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b21b      	sxth	r3, r3
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3302      	adds	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	441a      	add	r2, r3
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 ffb9 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	3304      	adds	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ae:	e00b      	b.n	80023c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	441a      	add	r2, r3
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	3b01      	subs	r3, #1
 80023ba:	6839      	ldr	r1, [r7, #0]
 80023bc:	440b      	add	r3, r1
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	3301      	adds	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4413      	add	r3, r2
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3ed      	bcc.n	80023b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4413      	add	r3, r2
 80023da:	3b01      	subs	r3, #1
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	441a      	add	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4413      	add	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	441a      	add	r2, r3
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f004 ff86 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3304      	adds	r3, #4
 800240e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	e00b      	b.n	800242e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	441a      	add	r2, r3
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	3b01      	subs	r3, #1
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	440b      	add	r3, r1
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	3301      	adds	r3, #1
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3ed      	bcc.n	8002416 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	3b01      	subs	r3, #1
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	3b01      	subs	r3, #1
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	441a      	add	r2, r3
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f004 ff53 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3304      	adds	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e00b      	b.n	8002494 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	441a      	add	r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b01      	subs	r3, #1
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	440b      	add	r3, r1
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	d3ed      	bcc.n	800247c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	3b01      	subs	r3, #1
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	441a      	add	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	440a      	add	r2, r1
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	3301      	adds	r3, #1
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	440b      	add	r3, r1
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3302      	adds	r3, #2
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	440b      	add	r3, r1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	3303      	adds	r3, #3
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	440b      	add	r3, r1
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	4313      	orrs	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3304      	adds	r3, #4
 8002516:	61bb      	str	r3, [r7, #24]
     return offset;
 8002518:	69bb      	ldr	r3, [r7, #24]
    }
 800251a:	4618      	mov	r0, r3
 800251c:	3728      	adds	r7, #40	@ 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	08010ec8 	.word	0x08010ec8

08002540 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	08010ee4 	.word	0x08010ee4

0800255c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fd34 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 800256c:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	601a      	str	r2, [r3, #0]
      level(0),
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	711a      	strb	r2, [r3, #4]
      msg("")
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800257c:	609a      	str	r2, [r3, #8]
    {
    }
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	08011318 	.word	0x08011318
 800258c:	08010ec4 	.word	0x08010ec4

08002590 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	7912      	ldrb	r2, [r2, #4]
 80025a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd fe07 	bl	80001c8 <strlen>
 80025ba:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fe87 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	18d0      	adds	r0, r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4619      	mov	r1, r3
 80025de:	f00e fb2d 	bl	8010c3c <memcpy>
      offset += length_msg;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80025ea:	68fb      	ldr	r3, [r7, #12]
    }
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3301      	adds	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	441a      	add	r2, r3
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f004 fe78 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3304      	adds	r3, #4
 800262a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e00b      	b.n	800264a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	441a      	add	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3b01      	subs	r3, #1
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	440b      	add	r3, r1
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3ed      	bcc.n	8002632 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	3b01      	subs	r3, #1
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	3b01      	subs	r3, #1
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
     return offset;
 800267a:	693b      	ldr	r3, [r7, #16]
    }
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	08010f08 	.word	0x08010f08

080026a0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	08010f1c 	.word	0x08010f1c

080026bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fc84 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	08011300 	.word	0x08011300

08002718 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	@ 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b2ca      	uxtb	r2, r1
 8002732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0a19      	lsrs	r1, r3, #8
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0c19      	lsrs	r1, r3, #16
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3302      	adds	r3, #2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4413      	add	r3, r2
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0e19      	lsrs	r1, r3, #24
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	3303      	adds	r3, #3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	b2ca      	uxtb	r2, r1
 8002768:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	3304      	adds	r3, #4
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	e02a      	b.n	80027cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002784:	6939      	ldr	r1, [r7, #16]
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	0a19      	lsrs	r1, r3, #8
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	3301      	adds	r3, #1
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	0c19      	lsrs	r1, r3, #16
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	3302      	adds	r3, #2
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2ca      	uxtb	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	0e19      	lsrs	r1, r3, #24
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	3303      	adds	r3, #3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	3304      	adds	r3, #4
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	3301      	adds	r3, #1
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3cf      	bcc.n	8002776 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	0a19      	lsrs	r1, r3, #8
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	3301      	adds	r3, #1
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	b2ca      	uxtb	r2, r1
 80027f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	0c19      	lsrs	r1, r3, #16
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	3302      	adds	r3, #2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4413      	add	r3, r2
 8002804:	b2ca      	uxtb	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	0e19      	lsrs	r1, r3, #24
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	3303      	adds	r3, #3
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	4413      	add	r3, r2
 8002816:	b2ca      	uxtb	r2, r1
 8002818:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	3304      	adds	r3, #4
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e02a      	b.n	800287c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0a19      	lsrs	r1, r3, #8
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	0c19      	lsrs	r1, r3, #16
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	3302      	adds	r3, #2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0e19      	lsrs	r1, r3, #24
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	3303      	adds	r3, #3
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	3304      	adds	r3, #4
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3cf      	bcc.n	8002826 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69d9      	ldr	r1, [r3, #28]
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4413      	add	r3, r2
 8002890:	b2ca      	uxtb	r2, r1
 8002892:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	0a19      	lsrs	r1, r3, #8
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	b2ca      	uxtb	r2, r1
 80028a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	0c19      	lsrs	r1, r3, #16
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	3302      	adds	r3, #2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	b2ca      	uxtb	r2, r1
 80028b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	0e19      	lsrs	r1, r3, #24
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	3303      	adds	r3, #3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	b2ca      	uxtb	r2, r1
 80028c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	3304      	adds	r3, #4
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e027      	b.n	8002926 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fc70 	bl	80001c8 <strlen>
 80028e8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fcf0 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	3304      	adds	r3, #4
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	18d0      	adds	r0, r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4619      	mov	r1, r3
 8002914:	f00e f992 	bl	8010c3c <memcpy>
      offset += length_stringsi;
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	4413      	add	r3, r2
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	3301      	adds	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3d2      	bcc.n	80028d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002932:	4618      	mov	r0, r3
 8002934:	3728      	adds	r7, #40	@ 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800293a:	b580      	push	{r7, lr}
 800293c:	b08e      	sub	sp, #56	@ 0x38
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002954:	3301      	adds	r3, #1
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	4313      	orrs	r3, r2
 8002962:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002966:	3302      	adds	r3, #2
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	4313      	orrs	r3, r2
 8002974:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	3303      	adds	r3, #3
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	4313      	orrs	r3, r2
 8002986:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	3304      	adds	r3, #4
 800298c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	6a3a      	ldr	r2, [r7, #32]
 8002994:	429a      	cmp	r2, r3
 8002996:	d90a      	bls.n	80029ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f00e f8e0 	bl	8010b68 <realloc>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a3a      	ldr	r2, [r7, #32]
 80029b2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80029b4:	2300      	movs	r3, #0
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b8:	e035      	b.n	8002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	440a      	add	r2, r1
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d0:	3301      	adds	r3, #1
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	440b      	add	r3, r1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e2:	3302      	adds	r3, #2
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	440b      	add	r3, r1
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f4:	3303      	adds	r3, #3
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	440b      	add	r3, r1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	3301      	adds	r3, #1
 8002a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3c4      	bcc.n	80029ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4e:	3302      	adds	r3, #2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a60:	3303      	adds	r3, #3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a72:	3304      	adds	r3, #4
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d90a      	bls.n	8002a96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f00e f86c 	bl	8010b68 <realloc>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa0:	e035      	b.n	8002b0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aaa:	6839      	ldr	r1, [r7, #0]
 8002aac:	440a      	add	r2, r1
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	3301      	adds	r3, #1
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	440b      	add	r3, r1
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aca:	3302      	adds	r3, #2
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	440b      	add	r3, r1
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002adc:	3303      	adds	r3, #3
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af2:	3304      	adds	r3, #4
 8002af4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	3214      	adds	r2, #20
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3c4      	bcc.n	8002aa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b24:	3301      	adds	r3, #1
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b36:	3302      	adds	r3, #2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	3303      	adds	r3, #3
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d90a      	bls.n	8002b7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f00d fff8 	bl	8010b68 <realloc>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b88:	e03e      	b.n	8002c08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	441a      	add	r2, r3
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fbbd 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	e00b      	b.n	8002bc0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	441a      	add	r2, r3
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3ed      	bcc.n	8002ba8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	3b01      	subs	r3, #1
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	3220      	adds	r2, #32
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c04:	3301      	adds	r3, #1
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3bb      	bcc.n	8002b8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002c14:	4618      	mov	r0, r3
 8002c16:	3738      	adds	r7, #56	@ 0x38
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	080111ac 	.word	0x080111ac

08002c38 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	08010f40 	.word	0x08010f40

08002c54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68d8      	ldr	r0, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6891      	ldr	r1, [r2, #8]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	4798      	blx	r3
 8002ca0:	4603      	mov	r3, r0
  };
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
  }
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <_ZN13STM32HardwareC1Ev+0x34>)
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	20000340 	.word	0x20000340

08002d20 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f804 	bl	8002d36 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f00b faf2 	bl	800e334 <HAL_UART_Receive_DMA>
    }
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffa8 	bl	8002cc2 <_ZN13STM32Hardware10getRdmaIndEv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	429c      	cmp	r4, r3
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d88:	1c59      	adds	r1, r3, #1
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	791b      	ldrb	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002da8:	68fb      	ldr	r3, [r7, #12]
    }
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
	...

08002db4 <_ZN13STM32Hardware5flushEv>:
          tfind = (tfind + len) % tbuflen;
        }
        mutex = false;
      }
    }*/
    void flush(void){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d108      	bne.n	8002ddc <_ZN13STM32Hardware5flushEv+0x28>
 8002dca:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <_ZN13STM32Hardware5flushEv+0xb8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	f083 0301 	eor.w	r3, r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <_ZN13STM32Hardware5flushEv+0x28>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <_ZN13STM32Hardware5flushEv+0x2a>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03f      	beq.n	8002e62 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <_ZN13STM32Hardware5flushEv+0xb8>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d031      	beq.n	8002e5c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d20a      	bcs.n	8002e1e <_ZN13STM32Hardware5flushEv+0x6a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	e006      	b.n	8002e2c <_ZN13STM32Hardware5flushEv+0x78>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e38:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	89fa      	ldrh	r2, [r7, #14]
 8002e42:	4619      	mov	r1, r3
 8002e44:	f00b f9f8 	bl	800e238 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
 8002e50:	4413      	add	r3, r2
 8002e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	@ (8002e6c <_ZN13STM32Hardware5flushEv+0xb8>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
      }
    }
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000052a 	.word	0x2000052a

08002e70 <_ZN13STM32Hardware5writeEPhi>:


    void write(uint8_t* data, int length){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e86:	bfa8      	it	ge
 8002e88:	f44f 7300 	movge.w	r3, #512	@ 0x200
 8002e8c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002e94:	f5c3 7200 	rsb	r2, r3, #512	@ 0x200
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	bf28      	it	cs
 8002e9e:	4613      	movcs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002ea8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00d fec1 	bl	8010c3c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d00b      	beq.n	8002eee <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	18d1      	adds	r1, r2, r3
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f00d fea7 	bl	8010c3c <memcpy>
      }

      flush();
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff ff60 	bl	8002db4 <_ZN13STM32Hardware5flushEv>
    }
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	f005 fcde 	bl	80088c4 <HAL_GetTick>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f858 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 8002f24:	4a08      	ldr	r2, [pc, #32]	@ (8002f48 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
      label(""),
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002f2e:	605a      	str	r2, [r3, #4]
      size(0),
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
      stride(0)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    {
    }
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	080112bc 	.word	0x080112bc
 8002f4c:	08010ec4 	.word	0x08010ec4

08002f50 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd f930 	bl	80001c8 <strlen>
 8002f68:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 f9b0 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	18d0      	adds	r0, r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f00d fe56 	bl	8010c3c <memcpy>
      offset += length_label;
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2ca      	uxtb	r2, r1
 8002fa4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0a19      	lsrs	r1, r3, #8
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b2ca      	uxtb	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	0c19      	lsrs	r1, r3, #16
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	b2ca      	uxtb	r2, r1
 8002fc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0e19      	lsrs	r1, r3, #24
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3303      	adds	r3, #3
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b2ca      	uxtb	r2, r1
 8002fda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	b2ca      	uxtb	r2, r1
 8002fee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a19      	lsrs	r1, r3, #8
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b2ca      	uxtb	r2, r1
 8003000:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	0c19      	lsrs	r1, r3, #16
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3302      	adds	r3, #2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	b2ca      	uxtb	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0e19      	lsrs	r1, r3, #24
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3303      	adds	r3, #3
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	4413      	add	r3, r2
 8003022:	b2ca      	uxtb	r2, r1
 8003024:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
      return offset;
 800302c:	68fb      	ldr	r3, [r7, #12]
    }
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	441a      	add	r2, r3
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f004 f960 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3304      	adds	r3, #4
 800305a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00b      	b.n	800307a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	441a      	add	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3b01      	subs	r3, #1
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	440b      	add	r3, r1
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3301      	adds	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	429a      	cmp	r2, r3
 8003084:	d3ed      	bcc.n	8003062 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	3b01      	subs	r3, #1
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4413      	add	r3, r2
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3b01      	subs	r3, #1
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	441a      	add	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	3301      	adds	r3, #1
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	440b      	add	r3, r1
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	3302      	adds	r3, #2
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	440b      	add	r3, r1
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3303      	adds	r3, #3
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	440b      	add	r3, r1
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3304      	adds	r3, #4
 80030fe:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	440b      	add	r3, r1
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3302      	adds	r3, #2
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	440b      	add	r3, r1
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3303      	adds	r3, #3
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	440b      	add	r3, r1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3304      	adds	r3, #4
 8003154:	613b      	str	r3, [r7, #16]
     return offset;
 8003156:	693b      	ldr	r3, [r7, #16]
    }
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	08010f64 	.word	0x08010f64

0800317c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	08010f84 	.word	0x08010f84

08003198 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ff16 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80031a8:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3308      	adds	r3, #8
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff feab 	bl	8002f14 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
    {
    }
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	080112a4 	.word	0x080112a4

080031d8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	b2ca      	uxtb	r2, r1
 80031f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0a19      	lsrs	r1, r3, #8
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4413      	add	r3, r2
 8003202:	b2ca      	uxtb	r2, r1
 8003204:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	0c19      	lsrs	r1, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3302      	adds	r3, #2
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	4413      	add	r3, r2
 8003214:	b2ca      	uxtb	r2, r1
 8003216:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0e19      	lsrs	r1, r3, #24
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3303      	adds	r3, #3
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4413      	add	r3, r2
 8003226:	b2ca      	uxtb	r2, r1
 8003228:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	e017      	b.n	8003266 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	18d0      	adds	r0, r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	4413      	add	r3, r2
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	440a      	add	r2, r1
 8003254:	4611      	mov	r1, r2
 8003256:	4798      	blx	r3
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3e2      	bcc.n	8003236 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	b2ca      	uxtb	r2, r1
 800327c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	0a19      	lsrs	r1, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3301      	adds	r3, #1
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	4413      	add	r3, r2
 800328c:	b2ca      	uxtb	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	0c19      	lsrs	r1, r3, #16
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3302      	adds	r3, #2
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4413      	add	r3, r2
 800329e:	b2ca      	uxtb	r2, r1
 80032a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	0e19      	lsrs	r1, r3, #24
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3303      	adds	r3, #3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	b2ca      	uxtb	r2, r1
 80032b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80032ba:	68fb      	ldr	r3, [r7, #12]
    }
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3302      	adds	r3, #2
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3303      	adds	r3, #3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	429a      	cmp	r2, r3
 8003320:	d90a      	bls.n	8003338 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f00d fc1b 	bl	8010b68 <realloc>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e01a      	b.n	800337a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0008 	add.w	r0, r3, #8
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f7ff fe70 	bl	8003036 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003356:	4602      	mov	r2, r0
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4413      	add	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	18d0      	adds	r0, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3308      	adds	r3, #8
 800336c:	2210      	movs	r2, #16
 800336e:	4619      	mov	r1, r3
 8003370:	f00d fc64 	bl	8010c3c <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3301      	adds	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d3df      	bcc.n	8003344 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	440b      	add	r3, r1
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3302      	adds	r3, #2
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	440b      	add	r3, r1
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3303      	adds	r3, #3
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	440b      	add	r3, r1
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3304      	adds	r3, #4
 80033d8:	617b      	str	r3, [r7, #20]
     return offset;
 80033da:	697b      	ldr	r3, [r7, #20]
    }
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	08010fa8 	.word	0x08010fa8

08003400 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	08010fc4 	.word	0x08010fc4

0800341c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fdd4 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 800342c:	4a0b      	ldr	r2, [pc, #44]	@ (800345c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
      layout(),
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff feae 	bl	8003198 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	@ 0x28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
    }
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	0801128c 	.word	0x0801128c

08003460 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1d18      	adds	r0, r3, #4
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f7ff fead 	bl	80031d8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	4413      	add	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4413      	add	r3, r2
 8003490:	b2ca      	uxtb	r2, r1
 8003492:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	0a19      	lsrs	r1, r3, #8
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	b2ca      	uxtb	r2, r1
 80034a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	0c19      	lsrs	r1, r3, #16
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3302      	adds	r3, #2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	b2ca      	uxtb	r2, r1
 80034b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	0e19      	lsrs	r1, r3, #24
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3303      	adds	r3, #3
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	b2ca      	uxtb	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3304      	adds	r3, #4
 80034ce:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	e02a      	b.n	800352c <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	b2ca      	uxtb	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	0a19      	lsrs	r1, r3, #8
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3301      	adds	r3, #1
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	b2ca      	uxtb	r2, r1
 80034fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0c19      	lsrs	r1, r3, #16
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3302      	adds	r3, #2
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	b2ca      	uxtb	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0e19      	lsrs	r1, r3, #24
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3303      	adds	r3, #3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	4413      	add	r3, r2
 800351c:	b2ca      	uxtb	r2, r1
 800351e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3304      	adds	r3, #4
 8003524:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	3301      	adds	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d3cf      	bcc.n	80034d6 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8003536:	697b      	ldr	r3, [r7, #20]
    }
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	1d18      	adds	r0, r3, #4
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7ff feb3 	bl	80032c4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 800355e:	4602      	mov	r2, r0
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4413      	add	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3302      	adds	r3, #2
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	4413      	add	r3, r2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3303      	adds	r3, #3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3304      	adds	r3, #4
 80035aa:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90a      	bls.n	80035cc <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f00d fad1 	bl	8010b68 <realloc>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      data_length = data_lengthT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	@ 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e035      	b.n	8003644 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	440a      	add	r2, r1
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	440b      	add	r3, r1
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3302      	adds	r3, #2
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	440b      	add	r3, r1
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	4313      	orrs	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3303      	adds	r3, #3
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	440b      	add	r3, r1
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	4313      	orrs	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28
      offset += sizeof(this->st_data);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3304      	adds	r3, #4
 800362a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	3228      	adds	r2, #40	@ 0x28
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3301      	adds	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	429a      	cmp	r2, r3
 800364c:	d3c4      	bcc.n	80035d8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 800364e:	697b      	ldr	r3, [r7, #20]
    }
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	08010fe8 	.word	0x08010fe8

08003674 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	4b03      	ldr	r3, [pc, #12]	@ (800368c <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	08011004 	.word	0x08011004

08003690 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fc9a 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80036a0:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
      x(0),
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	08011274 	.word	0x08011274

080036e0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80036e0:	b480      	push	{r7}
 80036e2:	b08b      	sub	sp, #44	@ 0x2c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	4401      	add	r1, r0
 8003702:	b2d3      	uxtb	r3, r2
 8003704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	0a02      	lsrs	r2, r0, #8
 8003714:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003718:	0a0b      	lsrs	r3, r1, #8
 800371a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800371c:	3101      	adds	r1, #1
 800371e:	6838      	ldr	r0, [r7, #0]
 8003720:	4401      	add	r1, r0
 8003722:	b2d3      	uxtb	r3, r2
 8003724:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	0c02      	lsrs	r2, r0, #16
 8003734:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003738:	0c0b      	lsrs	r3, r1, #16
 800373a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800373c:	3102      	adds	r1, #2
 800373e:	6838      	ldr	r0, [r7, #0]
 8003740:	4401      	add	r1, r0
 8003742:	b2d3      	uxtb	r3, r2
 8003744:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003746:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	0e02      	lsrs	r2, r0, #24
 8003754:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003758:	0e0b      	lsrs	r3, r1, #24
 800375a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800375c:	3103      	adds	r1, #3
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	4401      	add	r1, r0
 8003762:	b2d3      	uxtb	r3, r2
 8003764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003766:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	000a      	movs	r2, r1
 8003774:	2300      	movs	r3, #0
 8003776:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003778:	3104      	adds	r1, #4
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	4401      	add	r1, r0
 800377e:	b2d3      	uxtb	r3, r2
 8003780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003782:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	0a0a      	lsrs	r2, r1, #8
 8003790:	2300      	movs	r3, #0
 8003792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003794:	3105      	adds	r1, #5
 8003796:	6838      	ldr	r0, [r7, #0]
 8003798:	4401      	add	r1, r0
 800379a:	b2d3      	uxtb	r3, r2
 800379c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800379e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	0c0a      	lsrs	r2, r1, #16
 80037ac:	2300      	movs	r3, #0
 80037ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037b0:	3106      	adds	r1, #6
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	4401      	add	r1, r0
 80037b6:	b2d3      	uxtb	r3, r2
 80037b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80037ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	0e0a      	lsrs	r2, r1, #24
 80037c8:	2300      	movs	r3, #0
 80037ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037cc:	3107      	adds	r1, #7
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	4401      	add	r1, r0
 80037d2:	b2d3      	uxtb	r3, r2
 80037d4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	3308      	adds	r3, #8
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80037e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	4401      	add	r1, r0
 80037f0:	b2d3      	uxtb	r3, r2
 80037f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80037f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	0a02      	lsrs	r2, r0, #8
 8003802:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003806:	0a0b      	lsrs	r3, r1, #8
 8003808:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800380a:	3101      	adds	r1, #1
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	4401      	add	r1, r0
 8003810:	b2d3      	uxtb	r3, r2
 8003812:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003814:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	0c02      	lsrs	r2, r0, #16
 8003822:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003826:	0c0b      	lsrs	r3, r1, #16
 8003828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800382a:	3102      	adds	r1, #2
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	4401      	add	r1, r0
 8003830:	b2d3      	uxtb	r3, r2
 8003832:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003834:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	0e02      	lsrs	r2, r0, #24
 8003842:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003846:	0e0b      	lsrs	r3, r1, #24
 8003848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800384a:	3103      	adds	r1, #3
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	4401      	add	r1, r0
 8003850:	b2d3      	uxtb	r3, r2
 8003852:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	000a      	movs	r2, r1
 8003862:	2300      	movs	r3, #0
 8003864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003866:	3104      	adds	r1, #4
 8003868:	6838      	ldr	r0, [r7, #0]
 800386a:	4401      	add	r1, r0
 800386c:	b2d3      	uxtb	r3, r2
 800386e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003870:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	0a0a      	lsrs	r2, r1, #8
 800387e:	2300      	movs	r3, #0
 8003880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003882:	3105      	adds	r1, #5
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	4401      	add	r1, r0
 8003888:	b2d3      	uxtb	r3, r2
 800388a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800388c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	0c0a      	lsrs	r2, r1, #16
 800389a:	2300      	movs	r3, #0
 800389c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800389e:	3106      	adds	r1, #6
 80038a0:	6838      	ldr	r0, [r7, #0]
 80038a2:	4401      	add	r1, r0
 80038a4:	b2d3      	uxtb	r3, r2
 80038a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80038a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	0e0a      	lsrs	r2, r1, #24
 80038b6:	2300      	movs	r3, #0
 80038b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ba:	3107      	adds	r1, #7
 80038bc:	6838      	ldr	r0, [r7, #0]
 80038be:	4401      	add	r1, r0
 80038c0:	b2d3      	uxtb	r3, r2
 80038c2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	3308      	adds	r3, #8
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80038d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80038d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	4401      	add	r1, r0
 80038de:	b2d3      	uxtb	r3, r2
 80038e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80038e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	0a02      	lsrs	r2, r0, #8
 80038f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80038f4:	0a0b      	lsrs	r3, r1, #8
 80038f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f8:	3101      	adds	r1, #1
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	4401      	add	r1, r0
 80038fe:	b2d3      	uxtb	r3, r2
 8003900:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	0c02      	lsrs	r2, r0, #16
 8003910:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003914:	0c0b      	lsrs	r3, r1, #16
 8003916:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003918:	3102      	adds	r1, #2
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	4401      	add	r1, r0
 800391e:	b2d3      	uxtb	r3, r2
 8003920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	0e02      	lsrs	r2, r0, #24
 8003930:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003934:	0e0b      	lsrs	r3, r1, #24
 8003936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003938:	3103      	adds	r1, #3
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	4401      	add	r1, r0
 800393e:	b2d3      	uxtb	r3, r2
 8003940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	000a      	movs	r2, r1
 8003950:	2300      	movs	r3, #0
 8003952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003954:	3104      	adds	r1, #4
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	4401      	add	r1, r0
 800395a:	b2d3      	uxtb	r3, r2
 800395c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800395e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	0a0a      	lsrs	r2, r1, #8
 800396c:	2300      	movs	r3, #0
 800396e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003970:	3105      	adds	r1, #5
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	4401      	add	r1, r0
 8003976:	b2d3      	uxtb	r3, r2
 8003978:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800397a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	0c0a      	lsrs	r2, r1, #16
 8003988:	2300      	movs	r3, #0
 800398a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398c:	3106      	adds	r1, #6
 800398e:	6838      	ldr	r0, [r7, #0]
 8003990:	4401      	add	r1, r0
 8003992:	b2d3      	uxtb	r3, r2
 8003994:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	0e0a      	lsrs	r2, r1, #24
 80039a4:	2300      	movs	r3, #0
 80039a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a8:	3107      	adds	r1, #7
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	4401      	add	r1, r0
 80039ae:	b2d3      	uxtb	r3, r2
 80039b0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	3308      	adds	r3, #8
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80039ba:	4618      	mov	r0, r3
 80039bc:	372c      	adds	r7, #44	@ 0x2c
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80039c6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039ca:	b0eb      	sub	sp, #428	@ 0x1ac
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80039d2:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80039ec:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80039f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2200      	movs	r2, #0
 80039fc:	461c      	mov	r4, r3
 80039fe:	4615      	mov	r5, r2
 8003a00:	ea40 0804 	orr.w	r8, r0, r4
 8003a04:	ea41 0905 	orr.w	r9, r1, r5
 8003a08:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a0c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003a10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2200      	movs	r2, #0
 8003a22:	469a      	mov	sl, r3
 8003a24:	4693      	mov	fp, r2
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a32:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a36:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a3a:	ea40 0402 	orr.w	r4, r0, r2
 8003a3e:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003a48:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003a4c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003a54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003a6a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003a7a:	464c      	mov	r4, r9
 8003a7c:	0423      	lsls	r3, r4, #16
 8003a7e:	4644      	mov	r4, r8
 8003a80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a84:	4644      	mov	r4, r8
 8003a86:	0422      	lsls	r2, r4, #16
 8003a88:	ea40 0402 	orr.w	r4, r0, r2
 8003a8c:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8003a90:	430b      	orrs	r3, r1
 8003a92:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003a96:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8003a9a:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a9e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003aa2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003aa6:	1cda      	adds	r2, r3, #3
 8003aa8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003aac:	4413      	add	r3, r2
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8003ab8:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8003abc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003ac8:	4623      	mov	r3, r4
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003ad0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	4303      	orrs	r3, r0
 8003ad8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003adc:	462b      	mov	r3, r5
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003ae4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003ae8:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003aec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003af0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003afa:	4413      	add	r3, r2
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003b06:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8003b16:	0023      	movs	r3, r4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	ea40 0402 	orr.w	r4, r0, r2
 8003b1e:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003b28:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003b2c:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b30:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003b34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003b38:	1d5a      	adds	r2, r3, #5
 8003b3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b3e:	4413      	add	r3, r2
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003b4a:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003b5a:	0223      	lsls	r3, r4, #8
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	ea40 0402 	orr.w	r4, r0, r2
 8003b62:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003b6c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003b70:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003b7c:	1d9a      	adds	r2, r3, #6
 8003b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003b8e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8003b9e:	0423      	lsls	r3, r4, #16
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	ea40 0402 	orr.w	r4, r0, r2
 8003ba6:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003bb0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8003bb4:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bc0:	1dda      	adds	r2, r3, #7
 8003bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003bd2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8003be2:	0623      	lsls	r3, r4, #24
 8003be4:	2200      	movs	r2, #0
 8003be6:	ea40 0402 	orr.w	r4, r0, r2
 8003bea:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003bf4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003bf8:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 8003bfc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003c00:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003c04:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003c08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c1e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003c22:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003c26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c2a:	4413      	add	r3, r2
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c36:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003c3a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003c3e:	4623      	mov	r3, r4
 8003c40:	4303      	orrs	r3, r0
 8003c42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c46:	462b      	mov	r3, r5
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c4e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8003c52:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c56:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003c5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c64:	4413      	add	r3, r2
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c70:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003c80:	464c      	mov	r4, r9
 8003c82:	0223      	lsls	r3, r4, #8
 8003c84:	4644      	mov	r4, r8
 8003c86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c8a:	4644      	mov	r4, r8
 8003c8c:	0222      	lsls	r2, r4, #8
 8003c8e:	ea40 0402 	orr.w	r4, r0, r2
 8003c92:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8003c96:	430b      	orrs	r3, r1
 8003c98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8003ca0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ca4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003ca8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003cb2:	4413      	add	r3, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003cce:	464c      	mov	r4, r9
 8003cd0:	0423      	lsls	r3, r4, #16
 8003cd2:	4644      	mov	r4, r8
 8003cd4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003cd8:	4644      	mov	r4, r8
 8003cda:	0422      	lsls	r2, r4, #16
 8003cdc:	ea40 0402 	orr.w	r4, r0, r2
 8003ce0:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cea:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003cee:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cf2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003cf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003cfa:	1cda      	adds	r2, r3, #3
 8003cfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003d00:	4413      	add	r3, r2
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d0c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003d14:	4623      	mov	r3, r4
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d24:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003d28:	4623      	mov	r3, r4
 8003d2a:	4303      	orrs	r3, r0
 8003d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d30:	462b      	mov	r3, r5
 8003d32:	430b      	orrs	r3, r1
 8003d34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d38:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003d3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003d44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d48:	1d1a      	adds	r2, r3, #4
 8003d4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003d4e:	4413      	add	r3, r2
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d5a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003d6a:	0023      	movs	r3, r4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	ea40 0402 	orr.w	r4, r0, r2
 8003d72:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8003d76:	430b      	orrs	r3, r1
 8003d78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d7c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003d80:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d84:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003d88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003d8c:	1d5a      	adds	r2, r3, #5
 8003d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003d92:	4413      	add	r3, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d9e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8003dae:	0223      	lsls	r3, r4, #8
 8003db0:	2200      	movs	r2, #0
 8003db2:	ea40 0402 	orr.w	r4, r0, r2
 8003db6:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8003dc4:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003dc8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003dcc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003dd0:	1d9a      	adds	r2, r3, #6
 8003dd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003de2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8003df2:	0423      	lsls	r3, r4, #16
 8003df4:	2200      	movs	r2, #0
 8003df6:	ea40 0402 	orr.w	r4, r0, r2
 8003dfa:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e04:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003e08:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003e10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e14:	1dda      	adds	r2, r3, #7
 8003e16:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8003e36:	0623      	lsls	r3, r4, #24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	ea40 0402 	orr.w	r4, r0, r2
 8003e3e:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8003e42:	430b      	orrs	r3, r1
 8003e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e48:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8003e4c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8003e50:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003e54:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003e58:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003e5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e60:	3308      	adds	r3, #8
 8003e62:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e72:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003e76:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003e7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e8a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e8e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003e92:	4623      	mov	r3, r4
 8003e94:	4303      	orrs	r3, r0
 8003e96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e98:	462b      	mov	r3, r5
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e9e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003ea2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ea6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003eaa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003eb4:	4413      	add	r3, r2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2200      	movs	r2, #0
 8003ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ebe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ecc:	464c      	mov	r4, r9
 8003ece:	0223      	lsls	r3, r4, #8
 8003ed0:	4644      	mov	r4, r8
 8003ed2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ed6:	4644      	mov	r4, r8
 8003ed8:	0222      	lsls	r2, r4, #8
 8003eda:	ea40 0402 	orr.w	r4, r0, r2
 8003ede:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ee4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003ee8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003eec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003ef0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f04:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f12:	464c      	mov	r4, r9
 8003f14:	0423      	lsls	r3, r4, #16
 8003f16:	4644      	mov	r4, r8
 8003f18:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003f1c:	4644      	mov	r4, r8
 8003f1e:	0422      	lsls	r2, r4, #16
 8003f20:	ea40 0402 	orr.w	r4, r0, r2
 8003f24:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003f26:	430b      	orrs	r3, r1
 8003f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f2a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003f2e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f32:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003f36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f3a:	1cda      	adds	r2, r3, #3
 8003f3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f40:	4413      	add	r3, r2
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2200      	movs	r2, #0
 8003f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003f4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003f50:	4623      	mov	r3, r4
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f56:	4623      	mov	r3, r4
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003f60:	4623      	mov	r3, r4
 8003f62:	4303      	orrs	r3, r0
 8003f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f66:	462b      	mov	r3, r5
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003f70:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f74:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003f78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003f98:	0023      	movs	r3, r4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	ea40 0402 	orr.w	r4, r0, r2
 8003fa0:	633c      	str	r4, [r7, #48]	@ 0x30
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003faa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003fae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003fb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003fb6:	1d5a      	adds	r2, r3, #5
 8003fb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003fbc:	4413      	add	r3, r2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003fd2:	0223      	lsls	r3, r4, #8
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	ea40 0402 	orr.w	r4, r0, r2
 8003fda:	623c      	str	r4, [r7, #32]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003fe4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fe8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003fec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	61fa      	str	r2, [r7, #28]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	69bc      	ldr	r4, [r7, #24]
 800400c:	0423      	lsls	r3, r4, #16
 800400e:	2200      	movs	r2, #0
 8004010:	ea40 0402 	orr.w	r4, r0, r2
 8004014:	613c      	str	r4, [r7, #16]
 8004016:	430b      	orrs	r3, r1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800401e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004022:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004026:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800402a:	3307      	adds	r3, #7
 800402c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8004030:	4413      	add	r3, r2
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2200      	movs	r2, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	60fa      	str	r2, [r7, #12]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	68bc      	ldr	r4, [r7, #8]
 8004046:	0623      	lsls	r3, r4, #24
 8004048:	2200      	movs	r2, #0
 800404a:	ea40 0402 	orr.w	r4, r0, r2
 800404e:	603c      	str	r4, [r7, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004058:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 800405c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8004060:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8004064:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004068:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800406c:	3308      	adds	r3, #8
 800406e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8004072:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8004076:	4618      	mov	r0, r3
 8004078:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004082:	4770      	bx	lr

08004084 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	4b03      	ldr	r3, [pc, #12]	@ (800409c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	08011028 	.word	0x08011028

080040a0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	08011040 	.word	0x08011040

080040bc <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ff84 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80040cc:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
      linear(),
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3308      	adds	r3, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fada 	bl	8003690 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3328      	adds	r3, #40	@ 0x28
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fad5 	bl	8003690 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	0801125c 	.word	0x0801125c

080040f4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f103 0008 	add.w	r0, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4413      	add	r3, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f7ff fae6 	bl	80036e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	4619      	mov	r1, r3
 800412a:	f7ff fad9 	bl	80036e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800412e:	4602      	mov	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
      return offset;
 8004136:	68fb      	ldr	r3, [r7, #12]
    }
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0008 	add.w	r0, r3, #8
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	4413      	add	r3, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f7ff fc33 	bl	80039c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7ff fc26 	bl	80039c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
     return offset;
 8004182:	68fb      	ldr	r3, [r7, #12]
    }
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	08011064 	.word	0x08011064

080041a8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	08011078 	.word	0x08011078

080041c4 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd ff00 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80041d4:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
      seq(0),
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
      stamp(),
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3308      	adds	r3, #8
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fee3 	bl	8001fb0 <_ZN3ros4TimeC1Ev>
      frame_id("")
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80041ee:	611a      	str	r2, [r3, #16]
    {
    }
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	08011244 	.word	0x08011244
 8004200:	08010ec4 	.word	0x08010ec4

08004204 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	4413      	add	r3, r2
 800421c:	b2ca      	uxtb	r2, r1
 800421e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0a19      	lsrs	r1, r3, #8
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	b2ca      	uxtb	r2, r1
 8004230:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0c19      	lsrs	r1, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3302      	adds	r3, #2
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	4413      	add	r3, r2
 8004240:	b2ca      	uxtb	r2, r1
 8004242:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0e19      	lsrs	r1, r3, #24
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3303      	adds	r3, #3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4413      	add	r3, r2
 8004252:	b2ca      	uxtb	r2, r1
 8004254:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4413      	add	r3, r2
 8004266:	b2ca      	uxtb	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0a19      	lsrs	r1, r3, #8
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	4413      	add	r3, r2
 8004278:	b2ca      	uxtb	r2, r1
 800427a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	0c19      	lsrs	r1, r3, #16
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3302      	adds	r3, #2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	4413      	add	r3, r2
 800428a:	b2ca      	uxtb	r2, r1
 800428c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0e19      	lsrs	r1, r3, #24
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3303      	adds	r3, #3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	4413      	add	r3, r2
 800429c:	b2ca      	uxtb	r2, r1
 800429e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3304      	adds	r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	b2ca      	uxtb	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a19      	lsrs	r1, r3, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	0c19      	lsrs	r1, r3, #16
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3302      	adds	r3, #2
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	b2ca      	uxtb	r2, r1
 80042d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0e19      	lsrs	r1, r3, #24
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3303      	adds	r3, #3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	b2ca      	uxtb	r2, r1
 80042e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3304      	adds	r3, #4
 80042ee:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fb ff67 	bl	80001c8 <strlen>
 80042fa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	4413      	add	r3, r2
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f002 ffe7 	bl	80072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	18d0      	adds	r0, r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4619      	mov	r1, r3
 800431e:	f00c fc8d 	bl	8010c3c <memcpy>
      offset += length_frame_id;
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4413      	add	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
      return offset;
 800432a:	68fb      	ldr	r3, [r7, #12]
    }
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4413      	add	r3, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	3301      	adds	r3, #1
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	440b      	add	r3, r1
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3302      	adds	r3, #2
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	440b      	add	r3, r1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3303      	adds	r3, #3
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	440b      	add	r3, r1
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	3304      	adds	r3, #4
 8004396:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	4413      	add	r3, r2
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3301      	adds	r3, #1
 80043ae:	6839      	ldr	r1, [r7, #0]
 80043b0:	440b      	add	r3, r1
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3302      	adds	r3, #2
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	440b      	add	r3, r1
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3303      	adds	r3, #3
 80043da:	6839      	ldr	r1, [r7, #0]
 80043dc:	440b      	add	r3, r1
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3304      	adds	r3, #4
 80043ec:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	3301      	adds	r3, #1
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	440b      	add	r3, r1
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	3302      	adds	r3, #2
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	440b      	add	r3, r1
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3303      	adds	r3, #3
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	440b      	add	r3, r1
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3304      	adds	r3, #4
 8004442:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	441a      	add	r2, r3
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f002 ff60 	bl	8007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3304      	adds	r3, #4
 800445a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e00b      	b.n	800447a <_ZN8std_msgs6Header11deserializeEPh+0x146>
          inbuffer[k-1]=inbuffer[k];
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	441a      	add	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3b01      	subs	r3, #1
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	440b      	add	r3, r1
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3301      	adds	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	429a      	cmp	r2, r3
 8004484:	d3ed      	bcc.n	8004462 <_ZN8std_msgs6Header11deserializeEPh+0x12e>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	3b01      	subs	r3, #1
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	4413      	add	r3, r2
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
     return offset;
 80044aa:	693b      	ldr	r3, [r7, #16]
    }
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	0801109c 	.word	0x0801109c

080044d0 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	4b03      	ldr	r3, [pc, #12]	@ (80044e8 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	080110ac 	.word	0x080110ac

080044ec <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd fd6c 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 80044fc:	4a11      	ldr	r2, [pc, #68]	@ (8004544 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
      x(0),
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0),
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9c1 2306 	strd	r2, r3, [r1, #24]
      w(0)
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	0801122c 	.word	0x0801122c

08004548 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004548:	b480      	push	{r7}
 800454a:	b08d      	sub	sp, #52	@ 0x34
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800455c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004560:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004566:	6838      	ldr	r0, [r7, #0]
 8004568:	4401      	add	r1, r0
 800456a:	b2d3      	uxtb	r3, r2
 800456c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800456e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	0a02      	lsrs	r2, r0, #8
 800457c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004580:	0a0b      	lsrs	r3, r1, #8
 8004582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004584:	3101      	adds	r1, #1
 8004586:	6838      	ldr	r0, [r7, #0]
 8004588:	4401      	add	r1, r0
 800458a:	b2d3      	uxtb	r3, r2
 800458c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800458e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	0c02      	lsrs	r2, r0, #16
 800459c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045a0:	0c0b      	lsrs	r3, r1, #16
 80045a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045a4:	3102      	adds	r1, #2
 80045a6:	6838      	ldr	r0, [r7, #0]
 80045a8:	4401      	add	r1, r0
 80045aa:	b2d3      	uxtb	r3, r2
 80045ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80045ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	0e02      	lsrs	r2, r0, #24
 80045bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045c0:	0e0b      	lsrs	r3, r1, #24
 80045c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045c4:	3103      	adds	r1, #3
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	4401      	add	r1, r0
 80045ca:	b2d3      	uxtb	r3, r2
 80045cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80045ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	000a      	movs	r2, r1
 80045dc:	2300      	movs	r3, #0
 80045de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e0:	3104      	adds	r1, #4
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	4401      	add	r1, r0
 80045e6:	b2d3      	uxtb	r3, r2
 80045e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80045ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	0a0a      	lsrs	r2, r1, #8
 80045f8:	2300      	movs	r3, #0
 80045fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045fc:	3105      	adds	r1, #5
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	4401      	add	r1, r0
 8004602:	b2d3      	uxtb	r3, r2
 8004604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004606:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	0c0a      	lsrs	r2, r1, #16
 8004614:	2300      	movs	r3, #0
 8004616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004618:	3106      	adds	r1, #6
 800461a:	6838      	ldr	r0, [r7, #0]
 800461c:	4401      	add	r1, r0
 800461e:	b2d3      	uxtb	r3, r2
 8004620:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004622:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	0e0a      	lsrs	r2, r1, #24
 8004630:	2300      	movs	r3, #0
 8004632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004634:	3107      	adds	r1, #7
 8004636:	6838      	ldr	r0, [r7, #0]
 8004638:	4401      	add	r1, r0
 800463a:	b2d3      	uxtb	r3, r2
 800463c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	3308      	adds	r3, #8
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800464a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800464e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004654:	6838      	ldr	r0, [r7, #0]
 8004656:	4401      	add	r1, r0
 8004658:	b2d3      	uxtb	r3, r2
 800465a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800465c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	0a02      	lsrs	r2, r0, #8
 800466a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800466e:	0a0b      	lsrs	r3, r1, #8
 8004670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004672:	3101      	adds	r1, #1
 8004674:	6838      	ldr	r0, [r7, #0]
 8004676:	4401      	add	r1, r0
 8004678:	b2d3      	uxtb	r3, r2
 800467a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800467c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	0c02      	lsrs	r2, r0, #16
 800468a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800468e:	0c0b      	lsrs	r3, r1, #16
 8004690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004692:	3102      	adds	r1, #2
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	4401      	add	r1, r0
 8004698:	b2d3      	uxtb	r3, r2
 800469a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800469c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	0e02      	lsrs	r2, r0, #24
 80046aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046ae:	0e0b      	lsrs	r3, r1, #24
 80046b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b2:	3103      	adds	r1, #3
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	4401      	add	r1, r0
 80046b8:	b2d3      	uxtb	r3, r2
 80046ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80046bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	000a      	movs	r2, r1
 80046ca:	2300      	movs	r3, #0
 80046cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ce:	3104      	adds	r1, #4
 80046d0:	6838      	ldr	r0, [r7, #0]
 80046d2:	4401      	add	r1, r0
 80046d4:	b2d3      	uxtb	r3, r2
 80046d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80046d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	0a0a      	lsrs	r2, r1, #8
 80046e6:	2300      	movs	r3, #0
 80046e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ea:	3105      	adds	r1, #5
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	4401      	add	r1, r0
 80046f0:	b2d3      	uxtb	r3, r2
 80046f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80046f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	0c0a      	lsrs	r2, r1, #16
 8004702:	2300      	movs	r3, #0
 8004704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004706:	3106      	adds	r1, #6
 8004708:	6838      	ldr	r0, [r7, #0]
 800470a:	4401      	add	r1, r0
 800470c:	b2d3      	uxtb	r3, r2
 800470e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004710:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	0e0a      	lsrs	r2, r1, #24
 800471e:	2300      	movs	r3, #0
 8004720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004722:	3107      	adds	r1, #7
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	4401      	add	r1, r0
 8004728:	b2d3      	uxtb	r3, r2
 800472a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800472c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472e:	3308      	adds	r3, #8
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004738:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800473c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	4401      	add	r1, r0
 8004746:	b2d3      	uxtb	r3, r2
 8004748:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800474a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	0a02      	lsrs	r2, r0, #8
 8004758:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800475c:	0a0b      	lsrs	r3, r1, #8
 800475e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004760:	3101      	adds	r1, #1
 8004762:	6838      	ldr	r0, [r7, #0]
 8004764:	4401      	add	r1, r0
 8004766:	b2d3      	uxtb	r3, r2
 8004768:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800476a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	0c02      	lsrs	r2, r0, #16
 8004778:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800477c:	0c0b      	lsrs	r3, r1, #16
 800477e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004780:	3102      	adds	r1, #2
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	4401      	add	r1, r0
 8004786:	b2d3      	uxtb	r3, r2
 8004788:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800478a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	0e02      	lsrs	r2, r0, #24
 8004798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800479c:	0e0b      	lsrs	r3, r1, #24
 800479e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047a0:	3103      	adds	r1, #3
 80047a2:	6838      	ldr	r0, [r7, #0]
 80047a4:	4401      	add	r1, r0
 80047a6:	b2d3      	uxtb	r3, r2
 80047a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80047aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	000a      	movs	r2, r1
 80047b8:	2300      	movs	r3, #0
 80047ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047bc:	3104      	adds	r1, #4
 80047be:	6838      	ldr	r0, [r7, #0]
 80047c0:	4401      	add	r1, r0
 80047c2:	b2d3      	uxtb	r3, r2
 80047c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80047c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	0a0a      	lsrs	r2, r1, #8
 80047d4:	2300      	movs	r3, #0
 80047d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d8:	3105      	adds	r1, #5
 80047da:	6838      	ldr	r0, [r7, #0]
 80047dc:	4401      	add	r1, r0
 80047de:	b2d3      	uxtb	r3, r2
 80047e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80047e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	0c0a      	lsrs	r2, r1, #16
 80047f0:	2300      	movs	r3, #0
 80047f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f4:	3106      	adds	r1, #6
 80047f6:	6838      	ldr	r0, [r7, #0]
 80047f8:	4401      	add	r1, r0
 80047fa:	b2d3      	uxtb	r3, r2
 80047fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80047fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	0e0a      	lsrs	r2, r1, #24
 800480c:	2300      	movs	r3, #0
 800480e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004810:	3107      	adds	r1, #7
 8004812:	6838      	ldr	r0, [r7, #0]
 8004814:	4401      	add	r1, r0
 8004816:	b2d3      	uxtb	r3, r2
 8004818:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481c:	3308      	adds	r3, #8
 800481e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004826:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800482a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800482e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	4401      	add	r1, r0
 8004834:	b2d3      	uxtb	r3, r2
 8004836:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8004838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	0a02      	lsrs	r2, r0, #8
 8004846:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800484a:	0a0b      	lsrs	r3, r1, #8
 800484c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800484e:	3101      	adds	r1, #1
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	4401      	add	r1, r0
 8004854:	b2d3      	uxtb	r3, r2
 8004856:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8004858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	0c02      	lsrs	r2, r0, #16
 8004866:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800486a:	0c0b      	lsrs	r3, r1, #16
 800486c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800486e:	3102      	adds	r1, #2
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	4401      	add	r1, r0
 8004874:	b2d3      	uxtb	r3, r2
 8004876:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8004878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	0e02      	lsrs	r2, r0, #24
 8004886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800488a:	0e0b      	lsrs	r3, r1, #24
 800488c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800488e:	3103      	adds	r1, #3
 8004890:	6838      	ldr	r0, [r7, #0]
 8004892:	4401      	add	r1, r0
 8004894:	b2d3      	uxtb	r3, r2
 8004896:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8004898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	000a      	movs	r2, r1
 80048a6:	2300      	movs	r3, #0
 80048a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048aa:	3104      	adds	r1, #4
 80048ac:	6838      	ldr	r0, [r7, #0]
 80048ae:	4401      	add	r1, r0
 80048b0:	b2d3      	uxtb	r3, r2
 80048b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80048b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	0a0a      	lsrs	r2, r1, #8
 80048c2:	2300      	movs	r3, #0
 80048c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c6:	3105      	adds	r1, #5
 80048c8:	6838      	ldr	r0, [r7, #0]
 80048ca:	4401      	add	r1, r0
 80048cc:	b2d3      	uxtb	r3, r2
 80048ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 80048d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	0c0a      	lsrs	r2, r1, #16
 80048de:	2300      	movs	r3, #0
 80048e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048e2:	3106      	adds	r1, #6
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	4401      	add	r1, r0
 80048e8:	b2d3      	uxtb	r3, r2
 80048ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80048ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	0e0a      	lsrs	r2, r1, #24
 80048fa:	2300      	movs	r3, #0
 80048fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048fe:	3107      	adds	r1, #7
 8004900:	6838      	ldr	r0, [r7, #0]
 8004902:	4401      	add	r1, r0
 8004904:	b2d3      	uxtb	r3, r2
 8004906:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8004908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490a:	3308      	adds	r3, #8
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      return offset;
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004910:	4618      	mov	r0, r3
 8004912:	3734      	adds	r7, #52	@ 0x34
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800491c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004920:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8004924:	af00      	add	r7, sp, #0
 8004926:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
 800492a:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
    {
      int offset = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004940:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004944:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8004948:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800494c:	4413      	add	r3, r2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2200      	movs	r2, #0
 8004954:	461c      	mov	r4, r3
 8004956:	4615      	mov	r5, r2
 8004958:	ea40 0804 	orr.w	r8, r0, r4
 800495c:	ea41 0905 	orr.w	r9, r1, r5
 8004960:	e9c7 898a 	strd	r8, r9, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004964:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004968:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2200      	movs	r2, #0
 800497a:	469a      	mov	sl, r3
 800497c:	4693      	mov	fp, r2
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800498a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800498e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004992:	ea40 0402 	orr.w	r4, r0, r2
 8004996:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 800499a:	430b      	orrs	r3, r1
 800499c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80049a0:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 80049a4:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80049a8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80049ac:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80049b0:	1c9a      	adds	r2, r3, #2
 80049b2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80049b6:	4413      	add	r3, r2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80049c2:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 80049d2:	464c      	mov	r4, r9
 80049d4:	0423      	lsls	r3, r4, #16
 80049d6:	4644      	mov	r4, r8
 80049d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80049dc:	4644      	mov	r4, r8
 80049de:	0422      	lsls	r2, r4, #16
 80049e0:	ea40 0402 	orr.w	r4, r0, r2
 80049e4:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 80049e8:	430b      	orrs	r3, r1
 80049ea:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80049ee:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 80049f2:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049f6:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80049fa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80049fe:	1cda      	adds	r2, r3, #3
 8004a00:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004a04:	4413      	add	r3, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004a10:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8004a14:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8004a18:	4623      	mov	r3, r4
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004a20:	4623      	mov	r3, r4
 8004a22:	061b      	lsls	r3, r3, #24
 8004a24:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004a28:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	4303      	orrs	r3, r0
 8004a30:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8004a34:	462b      	mov	r3, r5
 8004a36:	430b      	orrs	r3, r1
 8004a38:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004a3c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8004a40:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004a44:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004a48:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004a4c:	1d1a      	adds	r2, r3, #4
 8004a4e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004a5e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8004a6e:	0023      	movs	r3, r4
 8004a70:	2200      	movs	r2, #0
 8004a72:	ea40 0402 	orr.w	r4, r0, r2
 8004a76:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8004a80:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8004a84:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004a88:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004a8c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004a90:	1d5a      	adds	r2, r3, #5
 8004a92:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004a96:	4413      	add	r3, r2
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004aa2:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8004ab2:	0223      	lsls	r3, r4, #8
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	ea40 0402 	orr.w	r4, r0, r2
 8004aba:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004ac4:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 8004ac8:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004acc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004ad0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004ad4:	1d9a      	adds	r2, r3, #6
 8004ad6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8004ae6:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 8004af6:	0423      	lsls	r3, r4, #16
 8004af8:	2200      	movs	r2, #0
 8004afa:	ea40 0402 	orr.w	r4, r0, r2
 8004afe:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8004b02:	430b      	orrs	r3, r1
 8004b04:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8004b08:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 8004b0c:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004b10:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004b14:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004b18:	1dda      	adds	r2, r3, #7
 8004b1a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004b1e:	4413      	add	r3, r2
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004b2a:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 8004b3a:	0623      	lsls	r3, r4, #24
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	ea40 0402 	orr.w	r4, r0, r2
 8004b42:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 8004b46:	430b      	orrs	r3, r1
 8004b48:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004b4c:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8004b50:	e9c7 348a 	strd	r3, r4, [r7, #552]	@ 0x228
      this->x = u_x.real;
 8004b54:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8004b58:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004b5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8004b60:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004b64:	3308      	adds	r3, #8
 8004b66:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b76:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004b7a:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8004b7e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004b82:	4413      	add	r3, r2
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004b8e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004b92:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8004b96:	4623      	mov	r3, r4
 8004b98:	4303      	orrs	r3, r0
 8004b9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004ba6:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8004baa:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004bae:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004bb2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004bc8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 8004bd8:	464c      	mov	r4, r9
 8004bda:	0223      	lsls	r3, r4, #8
 8004bdc:	4644      	mov	r4, r8
 8004bde:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004be2:	4644      	mov	r4, r8
 8004be4:	0222      	lsls	r2, r4, #8
 8004be6:	ea40 0402 	orr.w	r4, r0, r2
 8004bea:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004bf4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8004bf8:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bfc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004c00:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004c0a:	4413      	add	r3, r2
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004c16:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8004c26:	464c      	mov	r4, r9
 8004c28:	0423      	lsls	r3, r4, #16
 8004c2a:	4644      	mov	r4, r8
 8004c2c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004c30:	4644      	mov	r4, r8
 8004c32:	0422      	lsls	r2, r4, #16
 8004c34:	ea40 0402 	orr.w	r4, r0, r2
 8004c38:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004c42:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8004c46:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c4a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004c4e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004c52:	1cda      	adds	r2, r3, #3
 8004c54:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004c58:	4413      	add	r3, r2
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004c64:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8004c68:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004c74:	4623      	mov	r3, r4
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004c7c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8004c80:	4623      	mov	r3, r4
 8004c82:	4303      	orrs	r3, r0
 8004c84:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004c88:	462b      	mov	r3, r5
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004c90:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8004c94:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c98:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004c9c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004cb2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8004cc2:	0023      	movs	r3, r4
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	ea40 0402 	orr.w	r4, r0, r2
 8004cca:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004cd4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8004cd8:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004cdc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004ce0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004ce4:	1d5a      	adds	r2, r3, #5
 8004ce6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004cf6:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8004d06:	0223      	lsls	r3, r4, #8
 8004d08:	2200      	movs	r2, #0
 8004d0a:	ea40 0402 	orr.w	r4, r0, r2
 8004d0e:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 8004d12:	430b      	orrs	r3, r1
 8004d14:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004d18:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8004d1c:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004d20:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004d24:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004d28:	1d9a      	adds	r2, r3, #6
 8004d2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004d2e:	4413      	add	r3, r2
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004d3a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8004d4a:	0423      	lsls	r3, r4, #16
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	ea40 0402 	orr.w	r4, r0, r2
 8004d52:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8004d56:	430b      	orrs	r3, r1
 8004d58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004d5c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8004d60:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004d64:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004d68:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004d6c:	1dda      	adds	r2, r3, #7
 8004d6e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004d7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8004d8e:	0623      	lsls	r3, r4, #24
 8004d90:	2200      	movs	r2, #0
 8004d92:	ea40 0402 	orr.w	r4, r0, r2
 8004d96:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004da0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8004da4:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
      this->y = u_y.real;
 8004da8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8004dac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004db0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004db4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004db8:	3308      	adds	r3, #8
 8004dba:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004dca:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004dce:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8004dd2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004de2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004de6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8004dea:	4623      	mov	r3, r4
 8004dec:	4303      	orrs	r3, r0
 8004dee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004df2:	462b      	mov	r3, r5
 8004df4:	430b      	orrs	r3, r1
 8004df6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004dfa:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8004dfe:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e02:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004e06:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004e10:	4413      	add	r3, r2
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e1c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8004e2c:	464c      	mov	r4, r9
 8004e2e:	0223      	lsls	r3, r4, #8
 8004e30:	4644      	mov	r4, r8
 8004e32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e36:	4644      	mov	r4, r8
 8004e38:	0222      	lsls	r2, r4, #8
 8004e3a:	ea40 0402 	orr.w	r4, r0, r2
 8004e3e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e48:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8004e4c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e50:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004e54:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004e5e:	4413      	add	r3, r2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8004e7a:	464c      	mov	r4, r9
 8004e7c:	0423      	lsls	r3, r4, #16
 8004e7e:	4644      	mov	r4, r8
 8004e80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004e84:	4644      	mov	r4, r8
 8004e86:	0422      	lsls	r2, r4, #16
 8004e88:	ea40 0402 	orr.w	r4, r0, r2
 8004e8c:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8004e90:	430b      	orrs	r3, r1
 8004e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e96:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8004e9a:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e9e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004ea2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004ea6:	1cda      	adds	r2, r3, #3
 8004ea8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004eac:	4413      	add	r3, r2
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eb8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ebc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ec8:	4623      	mov	r3, r4
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ed0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004ed4:	4623      	mov	r3, r4
 8004ed6:	4303      	orrs	r3, r0
 8004ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004edc:	462b      	mov	r3, r5
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004ee8:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004eec:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004ef0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f06:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004f16:	0023      	movs	r3, r4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	ea40 0402 	orr.w	r4, r0, r2
 8004f1e:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004f28:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8004f2c:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004f30:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004f34:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004f38:	1d5a      	adds	r2, r3, #5
 8004f3a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f4a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8004f5a:	0223      	lsls	r3, r4, #8
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	ea40 0402 	orr.w	r4, r0, r2
 8004f62:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f6c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8004f70:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f74:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004f78:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004f7c:	1d9a      	adds	r2, r3, #6
 8004f7e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004f9e:	0423      	lsls	r3, r4, #16
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	ea40 0402 	orr.w	r4, r0, r2
 8004fa6:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004faa:	430b      	orrs	r3, r1
 8004fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fb0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8004fb4:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004fb8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8004fbc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8004fc0:	1dda      	adds	r2, r3, #7
 8004fc2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004fc6:	4413      	add	r3, r2
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004fe2:	0623      	lsls	r3, r4, #24
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	ea40 0402 	orr.w	r4, r0, r2
 8004fea:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ff4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004ff8:	e9c7 3486 	strd	r3, r4, [r7, #536]	@ 0x218
      this->z = u_z.real;
 8004ffc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8005000:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8005004:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8005008:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800500c:	3308      	adds	r3, #8
 800500e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800501e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8005022:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8005026:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2200      	movs	r2, #0
 8005032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005036:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800503a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800503e:	4623      	mov	r3, r4
 8005040:	4303      	orrs	r3, r0
 8005042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005044:	462b      	mov	r3, r5
 8005046:	430b      	orrs	r3, r1
 8005048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800504a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800504e:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005052:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8005056:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8005060:	4413      	add	r3, r2
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2200      	movs	r2, #0
 8005068:	673b      	str	r3, [r7, #112]	@ 0x70
 800506a:	677a      	str	r2, [r7, #116]	@ 0x74
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005078:	464c      	mov	r4, r9
 800507a:	0223      	lsls	r3, r4, #8
 800507c:	4644      	mov	r4, r8
 800507e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005082:	4644      	mov	r4, r8
 8005084:	0222      	lsls	r2, r4, #8
 8005086:	ea40 0402 	orr.w	r4, r0, r2
 800508a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800508c:	430b      	orrs	r3, r1
 800508e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005090:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8005094:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005098:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800509c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80050a6:	4413      	add	r3, r2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2200      	movs	r2, #0
 80050ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b0:	667a      	str	r2, [r7, #100]	@ 0x64
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050be:	464c      	mov	r4, r9
 80050c0:	0423      	lsls	r3, r4, #16
 80050c2:	4644      	mov	r4, r8
 80050c4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80050c8:	4644      	mov	r4, r8
 80050ca:	0422      	lsls	r2, r4, #16
 80050cc:	ea40 0402 	orr.w	r4, r0, r2
 80050d0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80050d2:	430b      	orrs	r3, r1
 80050d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80050da:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80050de:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80050e2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80050e6:	1cda      	adds	r2, r3, #3
 80050e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2200      	movs	r2, #0
 80050f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f6:	657a      	str	r2, [r7, #84]	@ 0x54
 80050f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80050fc:	4623      	mov	r3, r4
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005102:	4623      	mov	r3, r4
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005108:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800510c:	4623      	mov	r3, r4
 800510e:	4303      	orrs	r3, r0
 8005110:	643b      	str	r3, [r7, #64]	@ 0x40
 8005112:	462b      	mov	r3, r5
 8005114:	430b      	orrs	r3, r1
 8005116:	647b      	str	r3, [r7, #68]	@ 0x44
 8005118:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800511c:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005120:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8005124:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2200      	movs	r2, #0
 8005136:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005138:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8005144:	0023      	movs	r3, r4
 8005146:	2200      	movs	r2, #0
 8005148:	ea40 0402 	orr.w	r4, r0, r2
 800514c:	633c      	str	r4, [r7, #48]	@ 0x30
 800514e:	430b      	orrs	r3, r1
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
 8005152:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005156:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800515a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 800515e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8005162:	1d5a      	adds	r2, r3, #5
 8005164:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8005168:	4413      	add	r3, r2
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2200      	movs	r2, #0
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800517e:	0223      	lsls	r3, r4, #8
 8005180:	2200      	movs	r2, #0
 8005182:	ea40 0402 	orr.w	r4, r0, r2
 8005186:	623c      	str	r4, [r7, #32]
 8005188:	430b      	orrs	r3, r1
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
 800518c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005190:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005194:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8005198:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800519c:	3306      	adds	r3, #6
 800519e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2200      	movs	r2, #0
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	61fa      	str	r2, [r7, #28]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	69bc      	ldr	r4, [r7, #24]
 80051b8:	0423      	lsls	r3, r4, #16
 80051ba:	2200      	movs	r2, #0
 80051bc:	ea40 0402 	orr.w	r4, r0, r2
 80051c0:	613c      	str	r4, [r7, #16]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051ca:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80051ce:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80051d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80051d6:	3307      	adds	r3, #7
 80051d8:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	60fa      	str	r2, [r7, #12]
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	68bc      	ldr	r4, [r7, #8]
 80051f2:	0623      	lsls	r3, r4, #24
 80051f4:	2200      	movs	r2, #0
 80051f6:	ea40 0402 	orr.w	r4, r0, r2
 80051fa:	603c      	str	r4, [r7, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005204:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
      this->w = u_w.real;
 8005208:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800520c:	f8d7 120c 	ldr.w	r1, [r7, #524]	@ 0x20c
 8005210:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8005214:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8005218:	3308      	adds	r3, #8
 800521a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
     return offset;
 800521e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
    }
 8005222:	4618      	mov	r0, r3
 8005224:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800522e:	4770      	bx	lr

08005230 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	080110d0 	.word	0x080110d0

0800524c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	080110ec 	.word	0x080110ec

08005268 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc feae 	bl	8001fd4 <_ZN3ros3MsgC1Ev>
 8005278:	4a24      	ldr	r2, [pc, #144]	@ (800530c <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
      header(),
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3304      	adds	r3, #4
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe ff9e 	bl	80041c4 <_ZN8std_msgs6HeaderC1Ev>
      orientation(),
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3318      	adds	r3, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f92d 	bl	80044ec <_ZN13geometry_msgs10QuaternionC1Ev>
      orientation_covariance(),
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005298:	2308      	movs	r3, #8
 800529a:	e007      	b.n	80052ac <_ZN11sensor_msgs3ImuC1Ev+0x44>
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	e9c2 0100 	strd	r0, r1, [r2]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	3208      	adds	r2, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	daf5      	bge.n	800529c <_ZN11sensor_msgs3ImuC1Ev+0x34>
      angular_velocity(),
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3388      	adds	r3, #136	@ 0x88
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe f9eb 	bl	8003690 <_ZN13geometry_msgs7Vector3C1Ev>
      angular_velocity_covariance(),
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80052c0:	2308      	movs	r3, #8
 80052c2:	e007      	b.n	80052d4 <_ZN11sensor_msgs3ImuC1Ev+0x6c>
 80052c4:	f04f 0000 	mov.w	r0, #0
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	e9c2 0100 	strd	r0, r1, [r2]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	3208      	adds	r2, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	daf5      	bge.n	80052c4 <_ZN11sensor_msgs3ImuC1Ev+0x5c>
      linear_acceleration(),
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	33f0      	adds	r3, #240	@ 0xf0
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe f9d7 	bl	8003690 <_ZN13geometry_msgs7Vector3C1Ev>
      linear_acceleration_covariance()
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 80052e8:	2308      	movs	r3, #8
 80052ea:	e007      	b.n	80052fc <_ZN11sensor_msgs3ImuC1Ev+0x94>
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	e9c2 0100 	strd	r0, r1, [r2]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	3208      	adds	r2, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	daf5      	bge.n	80052ec <_ZN11sensor_msgs3ImuC1Ev+0x84>
    {
    }
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	08011214 	.word	0x08011214

08005310 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	@ 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->header.serialize(outbuffer + offset);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	1d18      	adds	r0, r3, #4
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	4413      	add	r3, r2
 8005328:	4619      	mov	r1, r3
 800532a:	f7fe ff6b 	bl	8004204 <_ZNK8std_msgs6Header9serializeEPh>
 800532e:	4602      	mov	r2, r0
 8005330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005332:	4413      	add	r3, r2
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 0018 	add.w	r0, r3, #24
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4413      	add	r3, r2
 8005342:	4619      	mov	r1, r3
 8005344:	f7ff f900 	bl	8004548 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005348:	4602      	mov	r2, r0
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	4413      	add	r3, r2
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005350:	2300      	movs	r3, #0
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005354:	e07d      	b.n	8005452 <_ZNK11sensor_msgs3Imu9serializeEPh+0x142>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	3308      	adds	r3, #8
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8005368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	4401      	add	r1, r0
 8005372:	b2d3      	uxtb	r3, r2
 8005374:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8005376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	0a02      	lsrs	r2, r0, #8
 8005384:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005388:	0a0b      	lsrs	r3, r1, #8
 800538a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800538c:	3101      	adds	r1, #1
 800538e:	6838      	ldr	r0, [r7, #0]
 8005390:	4401      	add	r1, r0
 8005392:	b2d3      	uxtb	r3, r2
 8005394:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8005396:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	0c02      	lsrs	r2, r0, #16
 80053a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053a8:	0c0b      	lsrs	r3, r1, #16
 80053aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ac:	3102      	adds	r1, #2
 80053ae:	6838      	ldr	r0, [r7, #0]
 80053b0:	4401      	add	r1, r0
 80053b2:	b2d3      	uxtb	r3, r2
 80053b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 80053b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	0e02      	lsrs	r2, r0, #24
 80053c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80053c8:	0e0b      	lsrs	r3, r1, #24
 80053ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053cc:	3103      	adds	r1, #3
 80053ce:	6838      	ldr	r0, [r7, #0]
 80053d0:	4401      	add	r1, r0
 80053d2:	b2d3      	uxtb	r3, r2
 80053d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80053d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	000a      	movs	r2, r1
 80053e4:	2300      	movs	r3, #0
 80053e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e8:	3104      	adds	r1, #4
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	4401      	add	r1, r0
 80053ee:	b2d3      	uxtb	r3, r2
 80053f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80053f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	0a0a      	lsrs	r2, r1, #8
 8005400:	2300      	movs	r3, #0
 8005402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005404:	3105      	adds	r1, #5
 8005406:	6838      	ldr	r0, [r7, #0]
 8005408:	4401      	add	r1, r0
 800540a:	b2d3      	uxtb	r3, r2
 800540c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 800540e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	0c0a      	lsrs	r2, r1, #16
 800541c:	2300      	movs	r3, #0
 800541e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005420:	3106      	adds	r1, #6
 8005422:	6838      	ldr	r0, [r7, #0]
 8005424:	4401      	add	r1, r0
 8005426:	b2d3      	uxtb	r3, r2
 8005428:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 800542a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	0e0a      	lsrs	r2, r1, #24
 8005438:	2300      	movs	r3, #0
 800543a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800543c:	3107      	adds	r1, #7
 800543e:	6838      	ldr	r0, [r7, #0]
 8005440:	4401      	add	r1, r0
 8005442:	b2d3      	uxtb	r3, r2
 8005444:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	3308      	adds	r3, #8
 800544a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	3301      	adds	r3, #1
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	2b08      	cmp	r3, #8
 8005456:	f67f af7e 	bls.w	8005356 <_ZNK11sensor_msgs3Imu9serializeEPh+0x46>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	4413      	add	r3, r2
 8005466:	4619      	mov	r1, r3
 8005468:	f7fe f93a 	bl	80036e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800546c:	4602      	mov	r2, r0
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	4413      	add	r3, r2
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	@ 0x24
 8005478:	e07d      	b.n	8005576 <_ZNK11sensor_msgs3Imu9serializeEPh+0x266>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	3315      	adds	r3, #21
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800548c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	4401      	add	r1, r0
 8005496:	b2d3      	uxtb	r3, r2
 8005498:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 800549a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	0a02      	lsrs	r2, r0, #8
 80054a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80054ac:	0a0b      	lsrs	r3, r1, #8
 80054ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054b0:	3101      	adds	r1, #1
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	4401      	add	r1, r0
 80054b6:	b2d3      	uxtb	r3, r2
 80054b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 80054ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	0c02      	lsrs	r2, r0, #16
 80054c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80054cc:	0c0b      	lsrs	r3, r1, #16
 80054ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054d0:	3102      	adds	r1, #2
 80054d2:	6838      	ldr	r0, [r7, #0]
 80054d4:	4401      	add	r1, r0
 80054d6:	b2d3      	uxtb	r3, r2
 80054d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 80054da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	0e02      	lsrs	r2, r0, #24
 80054e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054ec:	0e0b      	lsrs	r3, r1, #24
 80054ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f0:	3103      	adds	r1, #3
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	4401      	add	r1, r0
 80054f6:	b2d3      	uxtb	r3, r2
 80054f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80054fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	000a      	movs	r2, r1
 8005508:	2300      	movs	r3, #0
 800550a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800550c:	3104      	adds	r1, #4
 800550e:	6838      	ldr	r0, [r7, #0]
 8005510:	4401      	add	r1, r0
 8005512:	b2d3      	uxtb	r3, r2
 8005514:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8005516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	0a0a      	lsrs	r2, r1, #8
 8005524:	2300      	movs	r3, #0
 8005526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005528:	3105      	adds	r1, #5
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	4401      	add	r1, r0
 800552e:	b2d3      	uxtb	r3, r2
 8005530:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8005532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	0c0a      	lsrs	r2, r1, #16
 8005540:	2300      	movs	r3, #0
 8005542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005544:	3106      	adds	r1, #6
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	4401      	add	r1, r0
 800554a:	b2d3      	uxtb	r3, r2
 800554c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 800554e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	0e0a      	lsrs	r2, r1, #24
 800555c:	2300      	movs	r3, #0
 800555e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005560:	3107      	adds	r1, #7
 8005562:	6838      	ldr	r0, [r7, #0]
 8005564:	4401      	add	r1, r0
 8005566:	b2d3      	uxtb	r3, r2
 8005568:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	3308      	adds	r3, #8
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	3301      	adds	r3, #1
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	2b08      	cmp	r3, #8
 800557a:	f67f af7e 	bls.w	800547a <_ZNK11sensor_msgs3Imu9serializeEPh+0x16a>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	4619      	mov	r1, r3
 800558c:	f7fe f8a8 	bl	80036e0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005590:	4602      	mov	r2, r0
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	4413      	add	r3, r2
 8005596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005598:	2300      	movs	r3, #0
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	e07d      	b.n	800569a <_ZNK11sensor_msgs3Imu9serializeEPh+0x38a>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	3322      	adds	r3, #34	@ 0x22
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 80055b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	4401      	add	r1, r0
 80055ba:	b2d3      	uxtb	r3, r2
 80055bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 80055be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	0a02      	lsrs	r2, r0, #8
 80055cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80055d0:	0a0b      	lsrs	r3, r1, #8
 80055d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055d4:	3101      	adds	r1, #1
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	4401      	add	r1, r0
 80055da:	b2d3      	uxtb	r3, r2
 80055dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 80055de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	0c02      	lsrs	r2, r0, #16
 80055ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055f0:	0c0b      	lsrs	r3, r1, #16
 80055f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f4:	3102      	adds	r1, #2
 80055f6:	6838      	ldr	r0, [r7, #0]
 80055f8:	4401      	add	r1, r0
 80055fa:	b2d3      	uxtb	r3, r2
 80055fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80055fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	0e02      	lsrs	r2, r0, #24
 800560c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005610:	0e0b      	lsrs	r3, r1, #24
 8005612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005614:	3103      	adds	r1, #3
 8005616:	6838      	ldr	r0, [r7, #0]
 8005618:	4401      	add	r1, r0
 800561a:	b2d3      	uxtb	r3, r2
 800561c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 800561e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	000a      	movs	r2, r1
 800562c:	2300      	movs	r3, #0
 800562e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005630:	3104      	adds	r1, #4
 8005632:	6838      	ldr	r0, [r7, #0]
 8005634:	4401      	add	r1, r0
 8005636:	b2d3      	uxtb	r3, r2
 8005638:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 800563a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	0a0a      	lsrs	r2, r1, #8
 8005648:	2300      	movs	r3, #0
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	3105      	adds	r1, #5
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	4401      	add	r1, r0
 8005652:	b2d3      	uxtb	r3, r2
 8005654:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8005656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	0c0a      	lsrs	r2, r1, #16
 8005664:	2300      	movs	r3, #0
 8005666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005668:	3106      	adds	r1, #6
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	4401      	add	r1, r0
 800566e:	b2d3      	uxtb	r3, r2
 8005670:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8005672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	0e0a      	lsrs	r2, r1, #24
 8005680:	2300      	movs	r3, #0
 8005682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005684:	3107      	adds	r1, #7
 8005686:	6838      	ldr	r0, [r7, #0]
 8005688:	4401      	add	r1, r0
 800568a:	b2d3      	uxtb	r3, r2
 800568c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	3308      	adds	r3, #8
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	3301      	adds	r3, #1
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	2b08      	cmp	r3, #8
 800569e:	f67f af7e 	bls.w	800559e <_ZNK11sensor_msgs3Imu9serializeEPh+0x28e>
      }
      return offset;
 80056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80056a4:	4618      	mov	r0, r3
 80056a6:	3730      	adds	r7, #48	@ 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b0ed      	sub	sp, #436	@ 0x1b4
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80056b8:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->header.deserialize(inbuffer + offset);
 80056c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80056c6:	1d18      	adds	r0, r3, #4
 80056c8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80056cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056d0:	4413      	add	r3, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	f7fe fe2e 	bl	8004334 <_ZN8std_msgs6Header11deserializeEPh>
 80056d8:	4602      	mov	r2, r0
 80056da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80056de:	4413      	add	r3, r2
 80056e0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      offset += this->orientation.deserialize(inbuffer + offset);
 80056e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80056e8:	f103 0018 	add.w	r0, r3, #24
 80056ec:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80056f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80056f4:	4413      	add	r3, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7ff f910 	bl	800491c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005702:	4413      	add	r3, r2
 8005704:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800570e:	e123      	b.n	8005958 <_ZN11sensor_msgs3Imu11deserializeEPh+0x2ac>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800571c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005720:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005724:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005728:	4413      	add	r3, r2
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005734:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8005738:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800573c:	4303      	orrs	r3, r0
 800573e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8005742:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800574c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8005750:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005754:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005758:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2200      	movs	r2, #0
 800576a:	469a      	mov	sl, r3
 800576c:	4693      	mov	fp, r2
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800577a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800577e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005782:	ea40 0602 	orr.w	r6, r0, r2
 8005786:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005790:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8005794:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005798:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800579c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80057a0:	1c9a      	adds	r2, r3, #2
 80057a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057a6:	4413      	add	r3, r2
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	4698      	mov	r8, r3
 80057b0:	4691      	mov	r9, r2
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80057be:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80057c2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80057c6:	ea40 0602 	orr.w	r6, r0, r2
 80057ca:	f8c7 6158 	str.w	r6, [r7, #344]	@ 0x158
 80057ce:	430b      	orrs	r3, r1
 80057d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80057d4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80057d8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80057dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80057e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80057e4:	1cda      	adds	r2, r3, #3
 80057e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80057ea:	4413      	add	r3, r2
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80057f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 80057fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80057fe:	0a1d      	lsrs	r5, r3, #8
 8005800:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8005804:	061c      	lsls	r4, r3, #24
 8005806:	ea40 0304 	orr.w	r3, r0, r4
 800580a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800580e:	ea41 0305 	orr.w	r3, r1, r5
 8005812:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005816:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800581a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800581e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005822:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005838:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	f8d7 6148 	ldr.w	r6, [r7, #328]	@ 0x148
 8005848:	0033      	movs	r3, r6
 800584a:	2200      	movs	r2, #0
 800584c:	ea40 0602 	orr.w	r6, r0, r2
 8005850:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8005854:	430b      	orrs	r3, r1
 8005856:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800585a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800585e:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005862:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005866:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800586a:	1d5a      	adds	r2, r3, #5
 800586c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005870:	4413      	add	r3, r2
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800587c:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	f8d7 6138 	ldr.w	r6, [r7, #312]	@ 0x138
 800588c:	0233      	lsls	r3, r6, #8
 800588e:	2200      	movs	r2, #0
 8005890:	ea40 0602 	orr.w	r6, r0, r2
 8005894:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8005898:	430b      	orrs	r3, r1
 800589a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800589e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80058a2:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80058a6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80058aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80058ae:	1d9a      	adds	r2, r3, #6
 80058b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058b4:	4413      	add	r3, r2
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058c0:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	f8d7 6128 	ldr.w	r6, [r7, #296]	@ 0x128
 80058d0:	0433      	lsls	r3, r6, #16
 80058d2:	2200      	movs	r2, #0
 80058d4:	ea40 0602 	orr.w	r6, r0, r2
 80058d8:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 80058dc:	430b      	orrs	r3, r1
 80058de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80058e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80058e6:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80058ea:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80058ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80058f2:	1dda      	adds	r2, r3, #7
 80058f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80058f8:	4413      	add	r3, r2
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005904:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	f8d7 6118 	ldr.w	r6, [r7, #280]	@ 0x118
 8005914:	0633      	lsls	r3, r6, #24
 8005916:	2200      	movs	r2, #0
 8005918:	ea40 0602 	orr.w	r6, r0, r2
 800591c:	f8c7 6110 	str.w	r6, [r7, #272]	@ 0x110
 8005920:	430b      	orrs	r3, r1
 8005922:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005926:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800592a:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 800592e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8005932:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005936:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800593a:	3308      	adds	r3, #8
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8005944:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005948:	3308      	adds	r3, #8
 800594a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 800594e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8005958:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800595c:	2b08      	cmp	r3, #8
 800595e:	f67f aed7 	bls.w	8005710 <_ZN11sensor_msgs3Imu11deserializeEPh+0x64>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8005962:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005966:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 800596a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800596e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005972:	4413      	add	r3, r2
 8005974:	4619      	mov	r1, r3
 8005976:	f7fe f826 	bl	80039c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800597a:	4602      	mov	r2, r0
 800597c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005980:	4413      	add	r3, r2
 8005982:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005986:	2300      	movs	r3, #0
 8005988:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800598c:	e133      	b.n	8005bf6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x54a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800599a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800599e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80059a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059a6:	4413      	add	r3, r2
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80059b2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80059b6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80059ba:	4623      	mov	r3, r4
 80059bc:	4303      	orrs	r3, r0
 80059be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059c2:	462b      	mov	r3, r5
 80059c4:	430b      	orrs	r3, r1
 80059c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059ca:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 80059ce:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80059d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80059d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80059e0:	4413      	add	r3, r2
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059ec:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 80059fc:	4634      	mov	r4, r6
 80059fe:	0223      	lsls	r3, r4, #8
 8005a00:	462c      	mov	r4, r5
 8005a02:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a06:	462c      	mov	r4, r5
 8005a08:	0222      	lsls	r2, r4, #8
 8005a0a:	ea40 0402 	orr.w	r4, r0, r2
 8005a0e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a18:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8005a1c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005a20:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005a24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005a28:	1c9a      	adds	r2, r3, #2
 8005a2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a2e:	4413      	add	r3, r2
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 8005a4a:	4634      	mov	r4, r6
 8005a4c:	0423      	lsls	r3, r4, #16
 8005a4e:	462c      	mov	r4, r5
 8005a50:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005a54:	462c      	mov	r4, r5
 8005a56:	0422      	lsls	r2, r4, #16
 8005a58:	ea40 0402 	orr.w	r4, r0, r2
 8005a5c:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8005a60:	430b      	orrs	r3, r1
 8005a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a66:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8005a6a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005a6e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005a72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005a76:	1cda      	adds	r2, r3, #3
 8005a78:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005a7c:	4413      	add	r3, r2
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a88:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a8c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8005a90:	4623      	mov	r3, r4
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a98:	4623      	mov	r3, r4
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aa0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	4303      	orrs	r3, r0
 8005aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aac:	462b      	mov	r3, r5
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005ab8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005abc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005ac0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005ac4:	1d1a      	adds	r2, r3, #4
 8005ac6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005aca:	4413      	add	r3, r2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8005ae6:	0023      	movs	r3, r4
 8005ae8:	2200      	movs	r2, #0
 8005aea:	ea40 0402 	orr.w	r4, r0, r2
 8005aee:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005af2:	430b      	orrs	r3, r1
 8005af4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005af8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8005afc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005b00:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005b08:	1d5a      	adds	r2, r3, #5
 8005b0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b1a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8005b2a:	0223      	lsls	r3, r4, #8
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	ea40 0402 	orr.w	r4, r0, r2
 8005b32:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8005b36:	430b      	orrs	r3, r1
 8005b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b3c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8005b40:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005b44:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005b4c:	1d9a      	adds	r2, r3, #6
 8005b4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b52:	4413      	add	r3, r2
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8005b6e:	0423      	lsls	r3, r4, #16
 8005b70:	2200      	movs	r2, #0
 8005b72:	ea40 0402 	orr.w	r4, r0, r2
 8005b76:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b80:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8005b84:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005b88:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005b8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005b90:	1dda      	adds	r2, r3, #7
 8005b92:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005b96:	4413      	add	r3, r2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8005bb2:	0623      	lsls	r3, r4, #24
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	ea40 0402 	orr.w	r4, r0, r2
 8005bba:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bc4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8005bc8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8005bcc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005bd0:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005bd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005bd8:	3315      	adds	r3, #21
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8005be2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005be6:	3308      	adds	r3, #8
 8005be8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005bec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005bf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	f67f aec7 	bls.w	800598e <_ZN11sensor_msgs3Imu11deserializeEPh+0x2e2>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8005c00:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8005c04:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8005c08:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005c0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c10:	4413      	add	r3, r2
 8005c12:	4619      	mov	r1, r3
 8005c14:	f7fd fed7 	bl	80039c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005c1e:	4413      	add	r3, r2
 8005c20:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005c2a:	e10f      	b.n	8005e4c <_ZN11sensor_msgs3Imu11deserializeEPh+0x7a0>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005c38:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005c3c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8005c40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c44:	4413      	add	r3, r2
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005c54:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8005c58:	4623      	mov	r3, r4
 8005c5a:	4303      	orrs	r3, r0
 8005c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c5e:	462b      	mov	r3, r5
 8005c60:	430b      	orrs	r3, r1
 8005c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c64:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8005c68:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005c6c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005c70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2200      	movs	r2, #0
 8005c82:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c84:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8005c92:	4634      	mov	r4, r6
 8005c94:	0223      	lsls	r3, r4, #8
 8005c96:	462c      	mov	r4, r5
 8005c98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c9c:	462c      	mov	r4, r5
 8005c9e:	0222      	lsls	r2, r4, #8
 8005ca0:	ea40 0402 	orr.w	r4, r0, r2
 8005ca4:	66bc      	str	r4, [r7, #104]	@ 0x68
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005caa:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8005cae:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005cb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005cb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005cba:	1c9a      	adds	r2, r3, #2
 8005cbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cca:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8005cd8:	4634      	mov	r4, r6
 8005cda:	0423      	lsls	r3, r4, #16
 8005cdc:	462c      	mov	r4, r5
 8005cde:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005ce2:	462c      	mov	r4, r5
 8005ce4:	0422      	lsls	r2, r4, #16
 8005ce6:	ea40 0402 	orr.w	r4, r0, r2
 8005cea:	65bc      	str	r4, [r7, #88]	@ 0x58
 8005cec:	430b      	orrs	r3, r1
 8005cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cf0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8005cf4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005cf8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005cfc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005d00:	1cda      	adds	r2, r3, #3
 8005d02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d10:	657a      	str	r2, [r7, #84]	@ 0x54
 8005d12:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005d16:	4623      	mov	r3, r4
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	061b      	lsls	r3, r3, #24
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005d26:	4623      	mov	r3, r4
 8005d28:	4303      	orrs	r3, r0
 8005d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d32:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8005d36:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005d3a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d48:	4413      	add	r3, r2
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2200      	movs	r2, #0
 8005d50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d52:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8005d5e:	0023      	movs	r3, r4
 8005d60:	2200      	movs	r2, #0
 8005d62:	ea40 0402 	orr.w	r4, r0, r2
 8005d66:	633c      	str	r4, [r7, #48]	@ 0x30
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8005d70:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005d74:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005d78:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005d7c:	1d5a      	adds	r2, r3, #5
 8005d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d82:	4413      	add	r3, r2
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8005d98:	0223      	lsls	r3, r4, #8
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	ea40 0402 	orr.w	r4, r0, r2
 8005da0:	623c      	str	r4, [r7, #32]
 8005da2:	430b      	orrs	r3, r1
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005daa:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005dae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005db6:	1d9a      	adds	r2, r3, #6
 8005db8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005dbc:	4413      	add	r3, r2
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	61fa      	str	r2, [r7, #28]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	69bc      	ldr	r4, [r7, #24]
 8005dd2:	0423      	lsls	r3, r4, #16
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	ea40 0402 	orr.w	r4, r0, r2
 8005dda:	613c      	str	r4, [r7, #16]
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005de4:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005de8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005dec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005df0:	1dda      	adds	r2, r3, #7
 8005df2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005df6:	4413      	add	r3, r2
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	60fa      	str	r2, [r7, #12]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	68bc      	ldr	r4, [r7, #8]
 8005e0c:	0623      	lsls	r3, r4, #24
 8005e0e:	2200      	movs	r2, #0
 8005e10:	ea40 0402 	orr.w	r4, r0, r2
 8005e14:	603c      	str	r4, [r7, #0]
 8005e16:	430b      	orrs	r3, r1
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005e1e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8005e22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005e26:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8005e2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005e2e:	3322      	adds	r3, #34	@ 0x22
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4413      	add	r3, r2
 8005e34:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8005e38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
      for( uint32_t i = 0; i < 9; i++){
 8005e42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005e46:	3301      	adds	r3, #1
 8005e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005e4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	f67f aeeb 	bls.w	8005c2c <_ZN11sensor_msgs3Imu11deserializeEPh+0x580>
      }
     return offset;
 8005e56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
    }
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f507 77da 	add.w	r7, r7, #436	@ 0x1b4
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005e68 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	08011110 	.word	0x08011110

08005e84 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	4b03      	ldr	r3, [pc, #12]	@ (8005e9c <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	08011120 	.word	0x08011120

08005ea0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	@ (8005ebc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	080112ec 	.word	0x080112ec

08005ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ffe8 	bl	8005ea0 <_ZN3ros15NodeHandleBase_C1Ev>
 8005ed0:	4a36      	ldr	r2, [pc, #216]	@ (8005fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fc ff04 	bl	8002ce8 <_ZN13STM32HardwareC1Ev>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8005f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f00a fe61 	bl	8010bd4 <memset>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8005f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f00a fe58 	bl	8010bd4 <memset>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8005f2a:	2264      	movs	r2, #100	@ 0x64
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f00a fe50 	bl	8010bd4 <memset>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8005f3a:	2264      	movs	r2, #100	@ 0x64
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f00a fe48 	bl	8010bd4 <memset>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fc fb8e 	bl	80026bc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	08011200 	.word	0x08011200

08005fb0 <HAL_UART_TxCpltCallback>:
extern float v_enc[4];
extern float v_set[4];
extern float Kp[4], Ki[4], Kd[4], data_PID[12];
extern float d, l;
long sequence = 0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8005fb8:	4805      	ldr	r0, [pc, #20]	@ (8005fd0 <HAL_UART_TxCpltCallback+0x20>)
 8005fba:	f001 fa2b 	bl	8007414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fc fef7 	bl	8002db4 <_ZN13STM32Hardware5flushEv>
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	2000052c 	.word	0x2000052c

08005fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8005fdc:	4805      	ldr	r0, [pc, #20]	@ (8005ff4 <HAL_UART_RxCpltCallback+0x20>)
 8005fde:	f001 fa19 	bl	8007414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fc fea6 	bl	8002d36 <_ZN13STM32Hardware10reset_rbufEv>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2000052c 	.word	0x2000052c

08005ff8 <setup>:

void setup(void) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	nh.initNode();
 8005ffc:	480c      	ldr	r0, [pc, #48]	@ (8006030 <setup+0x38>)
 8005ffe:	f001 fa15 	bl	800742c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.advertise(vel_set);
 8006002:	490c      	ldr	r1, [pc, #48]	@ (8006034 <setup+0x3c>)
 8006004:	480a      	ldr	r0, [pc, #40]	@ (8006030 <setup+0x38>)
 8006006:	f001 fa2e 	bl	8007466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(vel_enc);
 800600a:	490b      	ldr	r1, [pc, #44]	@ (8006038 <setup+0x40>)
 800600c:	4808      	ldr	r0, [pc, #32]	@ (8006030 <setup+0x38>)
 800600e:	f001 fa2a 	bl	8007466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	//nh.advertise(PID);
	nh.advertise(imu);
 8006012:	490a      	ldr	r1, [pc, #40]	@ (800603c <setup+0x44>)
 8006014:	4806      	ldr	r0, [pc, #24]	@ (8006030 <setup+0x38>)
 8006016:	f001 fa26 	bl	8007466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.subscribe(cmd_vel);
 800601a:	4909      	ldr	r1, [pc, #36]	@ (8006040 <setup+0x48>)
 800601c:	4804      	ldr	r0, [pc, #16]	@ (8006030 <setup+0x38>)
 800601e:	f001 fa52 	bl	80074c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(cmd_PID);
 8006022:	4908      	ldr	r1, [pc, #32]	@ (8006044 <setup+0x4c>)
 8006024:	4802      	ldr	r0, [pc, #8]	@ (8006030 <setup+0x38>)
 8006026:	f001 fa4e 	bl	80074c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

}
 800602a:	bf00      	nop
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	2000052c 	.word	0x2000052c
 8006034:	20001050 	.word	0x20001050
 8006038:	20001064 	.word	0x20001064
 800603c:	20001078 	.word	0x20001078
 8006040:	20001090 	.word	0x20001090
 8006044:	200010f0 	.word	0x200010f0

08006048 <loop>:
void loop(void) {
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0


	vel_set_msg.data_length = sizeof(v_set)/sizeof(v_set[0]);
 800604e:	4b47      	ldr	r3, [pc, #284]	@ (800616c <loop+0x124>)
 8006050:	2204      	movs	r2, #4
 8006052:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_set_msg.data = v_set;
 8006054:	4b45      	ldr	r3, [pc, #276]	@ (800616c <loop+0x124>)
 8006056:	4a46      	ldr	r2, [pc, #280]	@ (8006170 <loop+0x128>)
 8006058:	62da      	str	r2, [r3, #44]	@ 0x2c
	vel_set.publish(&vel_set_msg);
 800605a:	4944      	ldr	r1, [pc, #272]	@ (800616c <loop+0x124>)
 800605c:	4845      	ldr	r0, [pc, #276]	@ (8006174 <loop+0x12c>)
 800605e:	f7fc fe10 	bl	8002c82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(30);
 8006062:	201e      	movs	r0, #30
 8006064:	f002 fc3a 	bl	80088dc <HAL_Delay>

	vel_enc_msg.data_length = sizeof(v_enc)/sizeof(v_enc[0]);
 8006068:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <loop+0x130>)
 800606a:	2204      	movs	r2, #4
 800606c:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_enc_msg.data = v_enc;
 800606e:	4b42      	ldr	r3, [pc, #264]	@ (8006178 <loop+0x130>)
 8006070:	4a42      	ldr	r2, [pc, #264]	@ (800617c <loop+0x134>)
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c
	vel_enc.publish(&vel_enc_msg);
 8006074:	4940      	ldr	r1, [pc, #256]	@ (8006178 <loop+0x130>)
 8006076:	4842      	ldr	r0, [pc, #264]	@ (8006180 <loop+0x138>)
 8006078:	f7fc fe03 	bl	8002c82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(30);
 800607c:	201e      	movs	r0, #30
 800607e:	f002 fc2d 	bl	80088dc <HAL_Delay>
	/*PID_msg.data_length = sizeof(data_PID)/sizeof(data_PID[0]);
	PID_msg.data = data_PID;
	PID.publish(&PID_msg);
	HAL_Delay(40);*/
	  //Header
	MPU_readSensorData(&hi2c1);
 8006082:	4840      	ldr	r0, [pc, #256]	@ (8006184 <loop+0x13c>)
 8006084:	f000 fe68 	bl	8006d58 <MPU_readSensorData>
	  imu_msg.header.stamp = nh.now();
 8006088:	4c3f      	ldr	r4, [pc, #252]	@ (8006188 <loop+0x140>)
 800608a:	463b      	mov	r3, r7
 800608c:	493f      	ldr	r1, [pc, #252]	@ (800618c <loop+0x144>)
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fa44 	bl	800751c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8006094:	f104 030c 	add.w	r3, r4, #12
 8006098:	463a      	mov	r2, r7
 800609a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800609e:	e883 0003 	stmia.w	r3, {r0, r1}
	  imu_msg.header.frame_id  ="imu";
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <loop+0x140>)
 80060a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006190 <loop+0x148>)
 80060a6:	615a      	str	r2, [r3, #20]

	  //Linear Acceleration
	  imu_msg.linear_acceleration.x = sensorData.ax ;
 80060a8:	4b3a      	ldr	r3, [pc, #232]	@ (8006194 <loop+0x14c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fa f9f7 	bl	80004a0 <__aeabi_f2d>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4934      	ldr	r1, [pc, #208]	@ (8006188 <loop+0x140>)
 80060b8:	e9c1 233e 	strd	r2, r3, [r1, #248]	@ 0xf8
	  imu_msg.linear_acceleration.y = sensorData.ay ;
 80060bc:	4b35      	ldr	r3, [pc, #212]	@ (8006194 <loop+0x14c>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fa f9ed 	bl	80004a0 <__aeabi_f2d>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	492f      	ldr	r1, [pc, #188]	@ (8006188 <loop+0x140>)
 80060cc:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
	  imu_msg.linear_acceleration.z = sensorData.az ;
 80060d0:	4b30      	ldr	r3, [pc, #192]	@ (8006194 <loop+0x14c>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fa f9e3 	bl	80004a0 <__aeabi_f2d>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	492a      	ldr	r1, [pc, #168]	@ (8006188 <loop+0x140>)
 80060e0:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108

	  //Angular Velocity
	  imu_msg.angular_velocity.x = sensorData.gx ;
 80060e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006194 <loop+0x14c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fa f9d9 	bl	80004a0 <__aeabi_f2d>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4925      	ldr	r1, [pc, #148]	@ (8006188 <loop+0x140>)
 80060f4:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	  imu_msg.angular_velocity.y = sensorData.gy ;
 80060f8:	4b26      	ldr	r3, [pc, #152]	@ (8006194 <loop+0x14c>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fa f9cf 	bl	80004a0 <__aeabi_f2d>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4920      	ldr	r1, [pc, #128]	@ (8006188 <loop+0x140>)
 8006108:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	  imu_msg.angular_velocity.z = sensorData.gz ;
 800610c:	4b21      	ldr	r3, [pc, #132]	@ (8006194 <loop+0x14c>)
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fa f9c5 	bl	80004a0 <__aeabi_f2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	491b      	ldr	r1, [pc, #108]	@ (8006188 <loop+0x140>)
 800611c:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0

	  //Orientation
	  imu_msg.orientation.x = quaternion.x ;
 8006120:	4b1d      	ldr	r3, [pc, #116]	@ (8006198 <loop+0x150>)
 8006122:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006126:	4918      	ldr	r1, [pc, #96]	@ (8006188 <loop+0x140>)
 8006128:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  imu_msg.orientation.y = quaternion.y ;
 800612c:	4b1a      	ldr	r3, [pc, #104]	@ (8006198 <loop+0x150>)
 800612e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006132:	4915      	ldr	r1, [pc, #84]	@ (8006188 <loop+0x140>)
 8006134:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	  imu_msg.orientation.z = quaternion.z ;
 8006138:	4b17      	ldr	r3, [pc, #92]	@ (8006198 <loop+0x150>)
 800613a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800613e:	4912      	ldr	r1, [pc, #72]	@ (8006188 <loop+0x140>)
 8006140:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	  imu_msg.orientation.w = quaternion.w ;
 8006144:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <loop+0x150>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	490f      	ldr	r1, [pc, #60]	@ (8006188 <loop+0x140>)
 800614c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	  imu.publish(&imu_msg);
 8006150:	490d      	ldr	r1, [pc, #52]	@ (8006188 <loop+0x140>)
 8006152:	4812      	ldr	r0, [pc, #72]	@ (800619c <loop+0x154>)
 8006154:	f7fc fd95 	bl	8002c82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  HAL_Delay(40);
 8006158:	2028      	movs	r0, #40	@ 0x28
 800615a:	f002 fbbf 	bl	80088dc <HAL_Delay>
	nh.spinOnce();
 800615e:	480b      	ldr	r0, [pc, #44]	@ (800618c <loop+0x144>)
 8006160:	f001 fa18 	bl	8007594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}
 800616c:	20000e68 	.word	0x20000e68
 8006170:	20000444 	.word	0x20000444
 8006174:	20001050 	.word	0x20001050
 8006178:	20000e98 	.word	0x20000e98
 800617c:	20000454 	.word	0x20000454
 8006180:	20001064 	.word	0x20001064
 8006184:	200000ac 	.word	0x200000ac
 8006188:	20000ef8 	.word	0x20000ef8
 800618c:	2000052c 	.word	0x2000052c
 8006190:	08011144 	.word	0x08011144
 8006194:	20001154 	.word	0x20001154
 8006198:	20001198 	.word	0x20001198
 800619c:	20001078 	.word	0x20001078

080061a0 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE>:

void cmd_vel_callback(const geometry_msgs::Twist& msg){
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
	v_set[0] = 60*((-msg.linear.x+msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80061b6:	f7fa f813 	bl	80001e0 <__aeabi_dsub>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4690      	mov	r8, r2
 80061c0:	4699      	mov	r9, r3
 80061c2:	2002      	movs	r0, #2
 80061c4:	f001 fbbf 	bl	8007946 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80061c8:	ec53 2b10 	vmov	r2, r3, d0
 80061cc:	4640      	mov	r0, r8
 80061ce:	4649      	mov	r1, r9
 80061d0:	f7fa fae8 	bl	80007a4 <__aeabi_ddiv>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4692      	mov	sl, r2
 80061da:	469b      	mov	fp, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	@ 0x40
 80061e2:	4b93      	ldr	r3, [pc, #588]	@ (8006430 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa f95a 	bl	80004a0 <__aeabi_f2d>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4640      	mov	r0, r8
 80061f2:	4649      	mov	r1, r9
 80061f4:	f7fa f9ac 	bl	8000550 <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4650      	mov	r0, sl
 80061fe:	4659      	mov	r1, fp
 8006200:	f7f9 fff0 	bl	80001e4 <__adddf3>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4610      	mov	r0, r2
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	4b88      	ldr	r3, [pc, #544]	@ (8006434 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 8006212:	f7fa f99d 	bl	8000550 <__aeabi_dmul>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4690      	mov	r8, r2
 800621c:	4699      	mov	r9, r3
 800621e:	4b86      	ldr	r3, [pc, #536]	@ (8006438 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fa f93c 	bl	80004a0 <__aeabi_f2d>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	f7fa fab8 	bl	80007a4 <__aeabi_ddiv>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	f7fa fc60 	bl	8000b00 <__aeabi_d2f>
 8006240:	4603      	mov	r3, r0
 8006242:	4a7e      	ldr	r2, [pc, #504]	@ (800643c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 8006244:	6013      	str	r3, [r2, #0]
	v_set[1] = 60*((msg.linear.x+msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006252:	f7f9 ffc7 	bl	80001e4 <__adddf3>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4690      	mov	r8, r2
 800625c:	4699      	mov	r9, r3
 800625e:	2002      	movs	r0, #2
 8006260:	f001 fb71 	bl	8007946 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8006264:	ec53 2b10 	vmov	r2, r3, d0
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fa9a 	bl	80007a4 <__aeabi_ddiv>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4692      	mov	sl, r2
 8006276:	469b      	mov	fp, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	@ 0x40
 800627e:	4b6c      	ldr	r3, [pc, #432]	@ (8006430 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa f90c 	bl	80004a0 <__aeabi_f2d>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4640      	mov	r0, r8
 800628e:	4649      	mov	r1, r9
 8006290:	f7fa f95e 	bl	8000550 <__aeabi_dmul>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4650      	mov	r0, sl
 800629a:	4659      	mov	r1, fp
 800629c:	f7f9 ffa2 	bl	80001e4 <__adddf3>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	4b61      	ldr	r3, [pc, #388]	@ (8006434 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 80062ae:	f7fa f94f 	bl	8000550 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4690      	mov	r8, r2
 80062b8:	4699      	mov	r9, r3
 80062ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006438 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa f8ee 	bl	80004a0 <__aeabi_f2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7fa fa6a 	bl	80007a4 <__aeabi_ddiv>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7fa fc12 	bl	8000b00 <__aeabi_d2f>
 80062dc:	4603      	mov	r3, r0
 80062de:	4a57      	ldr	r2, [pc, #348]	@ (800643c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 80062e0:	6053      	str	r3, [r2, #4]
	v_set[2] = 60*((msg.linear.x-msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80062ee:	f7f9 ff77 	bl	80001e0 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4690      	mov	r8, r2
 80062f8:	4699      	mov	r9, r3
 80062fa:	2002      	movs	r0, #2
 80062fc:	f001 fb23 	bl	8007946 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8006300:	ec53 2b10 	vmov	r2, r3, d0
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa fa4c 	bl	80007a4 <__aeabi_ddiv>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4692      	mov	sl, r2
 8006312:	469b      	mov	fp, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	@ 0x40
 800631a:	4b45      	ldr	r3, [pc, #276]	@ (8006430 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa f8be 	bl	80004a0 <__aeabi_f2d>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa f910 	bl	8000550 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4650      	mov	r0, sl
 8006336:	4659      	mov	r1, fp
 8006338:	f7f9 ff54 	bl	80001e4 <__adddf3>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4610      	mov	r0, r2
 8006342:	4619      	mov	r1, r3
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b3a      	ldr	r3, [pc, #232]	@ (8006434 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 800634a:	f7fa f901 	bl	8000550 <__aeabi_dmul>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	4b38      	ldr	r3, [pc, #224]	@ (8006438 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa f8a0 	bl	80004a0 <__aeabi_f2d>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4640      	mov	r0, r8
 8006366:	4649      	mov	r1, r9
 8006368:	f7fa fa1c 	bl	80007a4 <__aeabi_ddiv>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	f7fa fbc4 	bl	8000b00 <__aeabi_d2f>
 8006378:	4603      	mov	r3, r0
 800637a:	4a30      	ldr	r2, [pc, #192]	@ (800643c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 800637c:	6093      	str	r3, [r2, #8]
	v_set[3] = 60*((-msg.linear.x-msg.linear.y)/sqrt(2)+msg.angular.z*d)/l;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006384:	4614      	mov	r4, r2
 8006386:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7f9 ff24 	bl	80001e0 <__aeabi_dsub>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	2002      	movs	r0, #2
 80063a2:	f001 fad0 	bl	8007946 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80063a6:	ec53 2b10 	vmov	r2, r3, d0
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f9f9 	bl	80007a4 <__aeabi_ddiv>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4690      	mov	r8, r2
 80063b8:	4699      	mov	r9, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x290>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fa f86b 	bl	80004a0 <__aeabi_f2d>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa f8bd 	bl	8000550 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7f9 ff01 	bl	80001e4 <__adddf3>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	4b11      	ldr	r3, [pc, #68]	@ (8006434 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x294>)
 80063f0:	f7fa f8ae 	bl	8000550 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	461d      	mov	r5, r3
 80063fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x298>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fa f84d 	bl	80004a0 <__aeabi_f2d>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4620      	mov	r0, r4
 800640c:	4629      	mov	r1, r5
 800640e:	f7fa f9c9 	bl	80007a4 <__aeabi_ddiv>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	f7fa fb71 	bl	8000b00 <__aeabi_d2f>
 800641e:	4603      	mov	r3, r0
 8006420:	4a06      	ldr	r2, [pc, #24]	@ (800643c <_Z16cmd_vel_callbackRKN13geometry_msgs5TwistE+0x29c>)
 8006422:	60d3      	str	r3, [r2, #12]
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	20000014 	.word	0x20000014
 8006434:	404e0000 	.word	0x404e0000
 8006438:	200004f4 	.word	0x200004f4
 800643c:	20000444 	.word	0x20000444

08006440 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE>:

void cmd_PID_callback(const std_msgs::Float32MultiArray& msg){   //{Kp1,Ki1,Kd1,Kp2,Ki2,Kd2,Kp3,Ki3,Kd3,Kp4,Ki4,Kd4}
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	Kp[0] = msg.data[0]; Kp[1] = msg.data[3]; Kp[2] = msg.data[6]; Kp[3] = msg.data[9];
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a26      	ldr	r2, [pc, #152]	@ (80064e8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4a23      	ldr	r2, [pc, #140]	@ (80064e8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 800645a:	6053      	str	r3, [r2, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 800646e:	60d3      	str	r3, [r2, #12]
	Ki[0] = msg.data[1]; Ki[1] = msg.data[4]; Ki[2] = msg.data[7]; Ki[3] = msg.data[10];
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4a1a      	ldr	r2, [pc, #104]	@ (80064ec <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006482:	6053      	str	r3, [r2, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4a18      	ldr	r2, [pc, #96]	@ (80064ec <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 800648c:	6093      	str	r3, [r2, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	4a15      	ldr	r2, [pc, #84]	@ (80064ec <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 8006496:	60d3      	str	r3, [r2, #12]
	Kd[0] = msg.data[2]; Kd[1] = msg.data[5]; Kd[2] = msg.data[8]; Kd[3] = msg.data[11];
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4a11      	ldr	r2, [pc, #68]	@ (80064f0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 80064aa:	6053      	str	r3, [r2, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	4a0f      	ldr	r2, [pc, #60]	@ (80064f0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 80064b4:	6093      	str	r3, [r2, #8]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a0c      	ldr	r2, [pc, #48]	@ (80064f0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 80064be:	60d3      	str	r3, [r2, #12]

	Flash_Write_Array_Float(0x080A0000, Kp, 4);
 80064c0:	2204      	movs	r2, #4
 80064c2:	4909      	ldr	r1, [pc, #36]	@ (80064e8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xa8>)
 80064c4:	480b      	ldr	r0, [pc, #44]	@ (80064f4 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb4>)
 80064c6:	f000 f90e 	bl	80066e6 <Flash_Write_Array_Float>
	Flash_Write_Array_Float(0x080C0000, Ki, 4);
 80064ca:	2204      	movs	r2, #4
 80064cc:	4907      	ldr	r1, [pc, #28]	@ (80064ec <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xac>)
 80064ce:	480a      	ldr	r0, [pc, #40]	@ (80064f8 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb8>)
 80064d0:	f000 f909 	bl	80066e6 <Flash_Write_Array_Float>
	Flash_Write_Array_Float(0x080E0000, Kd, 4);
 80064d4:	2204      	movs	r2, #4
 80064d6:	4906      	ldr	r1, [pc, #24]	@ (80064f0 <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xb0>)
 80064d8:	4808      	ldr	r0, [pc, #32]	@ (80064fc <_Z16cmd_PID_callbackRKN8std_msgs17Float32MultiArrayE+0xbc>)
 80064da:	f000 f904 	bl	80066e6 <Flash_Write_Array_Float>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000464 	.word	0x20000464
 80064ec:	20000474 	.word	0x20000474
 80064f0:	20000484 	.word	0x20000484
 80064f4:	080a0000 	.word	0x080a0000
 80064f8:	080c0000 	.word	0x080c0000
 80064fc:	080e0000 	.word	0x080e0000

08006500 <_ZL9GetSectorm>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 11 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a44      	ldr	r2, [pc, #272]	@ (8006620 <_ZL9GetSectorm+0x120>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d806      	bhi.n	8006522 <_ZL9GetSectorm+0x22>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800651a:	d302      	bcc.n	8006522 <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e077      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a3f      	ldr	r2, [pc, #252]	@ (8006624 <_ZL9GetSectorm+0x124>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d806      	bhi.n	8006538 <_ZL9GetSectorm+0x38>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a3e      	ldr	r2, [pc, #248]	@ (8006628 <_ZL9GetSectorm+0x128>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d302      	bcc.n	8006538 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 8006532:	2301      	movs	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e06c      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a3c      	ldr	r2, [pc, #240]	@ (800662c <_ZL9GetSectorm+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d806      	bhi.n	800654e <_ZL9GetSectorm+0x4e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a3b      	ldr	r2, [pc, #236]	@ (8006630 <_ZL9GetSectorm+0x130>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d302      	bcc.n	800654e <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8006548:	2302      	movs	r3, #2
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e061      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <_ZL9GetSectorm+0x134>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d206      	bcs.n	8006564 <_ZL9GetSectorm+0x64>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a37      	ldr	r2, [pc, #220]	@ (8006638 <_ZL9GetSectorm+0x138>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d302      	bcc.n	8006564 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 800655e:	2303      	movs	r3, #3
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	e056      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a35      	ldr	r2, [pc, #212]	@ (800663c <_ZL9GetSectorm+0x13c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d206      	bcs.n	800657a <_ZL9GetSectorm+0x7a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a31      	ldr	r2, [pc, #196]	@ (8006634 <_ZL9GetSectorm+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d902      	bls.n	800657a <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8006574:	2304      	movs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e04b      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <_ZL9GetSectorm+0x140>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d206      	bcs.n	8006590 <_ZL9GetSectorm+0x90>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2d      	ldr	r2, [pc, #180]	@ (800663c <_ZL9GetSectorm+0x13c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d902      	bls.n	8006590 <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 800658a:	2305      	movs	r3, #5
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e040      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <_ZL9GetSectorm+0x144>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d206      	bcs.n	80065a6 <_ZL9GetSectorm+0xa6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a29      	ldr	r2, [pc, #164]	@ (8006640 <_ZL9GetSectorm+0x140>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d902      	bls.n	80065a6 <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80065a0:	2306      	movs	r3, #6
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e035      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a27      	ldr	r2, [pc, #156]	@ (8006648 <_ZL9GetSectorm+0x148>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d206      	bcs.n	80065bc <_ZL9GetSectorm+0xbc>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <_ZL9GetSectorm+0x144>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d902      	bls.n	80065bc <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80065b6:	2307      	movs	r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e02a      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a23      	ldr	r2, [pc, #140]	@ (800664c <_ZL9GetSectorm+0x14c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d206      	bcs.n	80065d2 <_ZL9GetSectorm+0xd2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <_ZL9GetSectorm+0x148>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d902      	bls.n	80065d2 <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80065cc:	2308      	movs	r3, #8
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e01f      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006650 <_ZL9GetSectorm+0x150>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d206      	bcs.n	80065e8 <_ZL9GetSectorm+0xe8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <_ZL9GetSectorm+0x14c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d902      	bls.n	80065e8 <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80065e2:	2309      	movs	r3, #9
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e014      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006654 <_ZL9GetSectorm+0x154>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d806      	bhi.n	80065fe <_ZL9GetSectorm+0xfe>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <_ZL9GetSectorm+0x150>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d902      	bls.n	80065fe <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80065f8:	230a      	movs	r3, #10
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e009      	b.n	8006612 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <_ZL9GetSectorm+0x158>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d805      	bhi.n	8006612 <_ZL9GetSectorm+0x112>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a14      	ldr	r2, [pc, #80]	@ (800665c <_ZL9GetSectorm+0x15c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 800660e:	230b      	movs	r3, #11
 8006610:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	08003ffe 	.word	0x08003ffe
 8006624:	08007ffe 	.word	0x08007ffe
 8006628:	08004000 	.word	0x08004000
 800662c:	0800bffe 	.word	0x0800bffe
 8006630:	08008000 	.word	0x08008000
 8006634:	0800ffff 	.word	0x0800ffff
 8006638:	0800c000 	.word	0x0800c000
 800663c:	0801ffff 	.word	0x0801ffff
 8006640:	0803ffff 	.word	0x0803ffff
 8006644:	0805ffff 	.word	0x0805ffff
 8006648:	0807ffff 	.word	0x0807ffff
 800664c:	0809ffff 	.word	0x0809ffff
 8006650:	080bffff 	.word	0x080bffff
 8006654:	080dfffe 	.word	0x080dfffe
 8006658:	080ffffe 	.word	0x080ffffe
 800665c:	080dffff 	.word	0x080dffff

08006660 <_Z11float2BytesPhf>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
 8006674:	e00b      	b.n	800668e <_Z11float2BytesPhf+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8006676:	7bfa      	ldrb	r2, [r7, #15]
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	440b      	add	r3, r1
 800667e:	3210      	adds	r2, #16
 8006680:	443a      	add	r2, r7
 8006682:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006686:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	3301      	adds	r3, #1
 800668c:	73fb      	strb	r3, [r7, #15]
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d9f0      	bls.n	8006676 <_Z11float2BytesPhf+0x16>
    }

}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <_Z11Bytes2floatPh>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
 80066ae:	e00b      	b.n	80066c8 <_Z11Bytes2floatPh+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	441a      	add	r2, r3
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	7812      	ldrb	r2, [r2, #0]
 80066ba:	3318      	adds	r3, #24
 80066bc:	443b      	add	r3, r7
 80066be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	3301      	adds	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d9f0      	bls.n	80066b0 <_Z11Bytes2floatPh+0xe>
    }

   float float_variable =  thing.a;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	613b      	str	r3, [r7, #16]
   return float_variable;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	ee07 3a90 	vmov	s15, r3
}
 80066d8:	eeb0 0a67 	vmov.f32	s0, s15
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <Flash_Write_Array_Float>:
	value = Bytes2float(buffer);
	return value;
}

void Flash_Write_Array_Float(uint32_t StartSectorAddress, float *Array, uint16_t ArrayLength)
{
 80066e6:	b5b0      	push	{r4, r5, r7, lr}
 80066e8:	b090      	sub	sp, #64	@ 0x40
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	4613      	mov	r3, r2
 80066f2:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes_temp[4];

    uint32_t i;
    uint32_t WordsToWrite = ArrayLength * sizeof(float) / sizeof(uint32_t);
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    HAL_FLASH_Unlock();
 80066f8:	f002 fe8a 	bl	8009410 <HAL_FLASH_Unlock>

    uint32_t StartSector = GetSector(StartSectorAddress);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff feff 	bl	8006500 <_ZL9GetSectorm>
 8006702:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t EndSectorAddress = StartSectorAddress + WordsToWrite * sizeof(uint32_t);
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t EndSector = GetSector(EndSectorAddress);
 800670e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006710:	f7ff fef6 	bl	8006500 <_ZL9GetSectorm>
 8006714:	62f8      	str	r0, [r7, #44]	@ 0x2c

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800671a:	2302      	movs	r3, #2
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
    EraseInitStruct.Sector = StartSector;
 800671e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006720:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.NbSectors = (EndSector - StartSector) + 1;
 8006722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	3301      	adds	r3, #1
 800672a:	623b      	str	r3, [r7, #32]

    uint32_t SECTORError;
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800672c:	f107 0210 	add.w	r2, r7, #16
 8006730:	f107 0314 	add.w	r3, r7, #20
 8006734:	4611      	mov	r1, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f002 ffcc 	bl	80096d4 <HAL_FLASHEx_Erase>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d130      	bne.n	80067ae <Flash_Write_Array_Float+0xc8>
    {
        return;
    }

    for (i = 0; i < ArrayLength; i++)
 800674c:	2300      	movs	r3, #0
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006750:	e026      	b.n	80067a0 <Flash_Write_Array_Float+0xba>
    {
        float2Bytes(bytes_temp, Array[i]);
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4413      	add	r3, r2
 800675a:	edd3 7a00 	vldr	s15, [r3]
 800675e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006762:	eeb0 0a67 	vmov.f32	s0, s15
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff ff7a 	bl	8006660 <_Z11float2BytesPhf>

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, *(uint32_t *)bytes_temp) != HAL_OK)
 800676c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	461c      	mov	r4, r3
 8006776:	4615      	mov	r5, r2
 8006778:	4622      	mov	r2, r4
 800677a:	462b      	mov	r3, r5
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	2002      	movs	r0, #2
 8006780:	f002 fdf2 	bl	8009368 <HAL_FLASH_Program>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10e      	bne.n	80067b2 <Flash_Write_Array_Float+0xcc>
        {
            return;
        }
        StartSectorAddress += sizeof(uint32_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3304      	adds	r3, #4
 8006798:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < ArrayLength; i++)
 800679a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679c:	3301      	adds	r3, #1
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3d4      	bcc.n	8006752 <Flash_Write_Array_Float+0x6c>
    }

    HAL_FLASH_Lock();
 80067a8:	f002 fe54 	bl	8009454 <HAL_FLASH_Lock>
 80067ac:	e002      	b.n	80067b4 <Flash_Write_Array_Float+0xce>
        return;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <Flash_Write_Array_Float+0xce>
            return;
 80067b2:	bf00      	nop
}
 80067b4:	3740      	adds	r7, #64	@ 0x40
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bdb0      	pop	{r4, r5, r7, pc}

080067ba <Flash_Read_Array_Float>:

void Flash_Read_Array_Float(uint32_t StartSectorAddress, float *Array, uint16_t ArrayLength)
{
 80067ba:	b590      	push	{r4, r7, lr}
 80067bc:	b089      	sub	sp, #36	@ 0x24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	4613      	mov	r3, r2
 80067c6:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    uint8_t bytes_temp[4];

    for (i = 0; i < ArrayLength; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	e026      	b.n	800681c <Flash_Read_Array_Float+0x62>
    {
        for (int j = 0; j < 4; j++)
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	e00d      	b.n	80067f0 <Flash_Read_Array_Float+0x36>
        {
            bytes_temp[j] = *(__IO uint8_t *)(StartSectorAddress + j);
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2d9      	uxtb	r1, r3
 80067de:	f107 0214 	add.w	r2, r7, #20
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	4413      	add	r3, r2
 80067e6:	460a      	mov	r2, r1
 80067e8:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	ddee      	ble.n	80067d4 <Flash_Read_Array_Float+0x1a>
        }

        Array[i] = Bytes2float(bytes_temp);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	18d4      	adds	r4, r2, r3
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ff4d 	bl	80066a2 <_Z11Bytes2floatPh>
 8006808:	eef0 7a40 	vmov.f32	s15, s0
 800680c:	edc4 7a00 	vstr	s15, [r4]

        StartSectorAddress += 4;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3304      	adds	r3, #4
 8006814:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < ArrayLength; i++)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	3301      	adds	r3, #1
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	429a      	cmp	r2, r3
 8006822:	d3d4      	bcc.n	80067ce <Flash_Read_Array_Float+0x14>
    }
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3724      	adds	r7, #36	@ 0x24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}
	...

08006830 <MPU_begin>:
/// @param I2Cx Pointer to I2C structure config.
/// @param addr Hex address based on AD0 pin - 0x68 low or 0x69 high.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, float tau, float dt)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	@ 0x28
 8006834:	af04      	add	r7, sp, #16
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	ed87 0a01 	vstr	s0, [r7, #4]
 800683e:	edc7 0a00 	vstr	s1, [r7]
 8006842:	72fb      	strb	r3, [r7, #11]
    // Save values
    _addr = addr << 1;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b27      	ldr	r3, [pc, #156]	@ (80068e8 <MPU_begin+0xb8>)
 800684c:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 800684e:	4a27      	ldr	r2, [pc, #156]	@ (80068ec <MPU_begin+0xbc>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6013      	str	r3, [r2, #0]
    _dt = dt;
 8006854:	4a26      	ldr	r2, [pc, #152]	@ (80068f0 <MPU_begin+0xc0>)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <MPU_begin+0xb8>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	4619      	mov	r1, r3
 8006860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	2301      	movs	r3, #1
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	f107 0317 	add.w	r3, r7, #23
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2301      	movs	r3, #1
 8006872:	2275      	movs	r2, #117	@ 0x75
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f003 fc43 	bl	800a100 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b71      	cmp	r3, #113	@ 0x71
 800687e:	d002      	beq.n	8006886 <MPU_begin+0x56>
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b68      	cmp	r3, #104	@ 0x68
 8006884:	d12a      	bne.n	80068dc <MPU_begin+0xac>
    {
    	if (check == WHO_AM_I_9250_ANS)
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b71      	cmp	r3, #113	@ 0x71
 800688a:	d106      	bne.n	800689a <MPU_begin+0x6a>
    	{
    		_name = MPU9250;
 800688c:	4b19      	ldr	r3, [pc, #100]	@ (80068f4 <MPU_begin+0xc4>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
    		_maddr = MAG_LOW << 1;
 8006892:	4b19      	ldr	r3, [pc, #100]	@ (80068f8 <MPU_begin+0xc8>)
 8006894:	2218      	movs	r2, #24
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e002      	b.n	80068a0 <MPU_begin+0x70>
    	}
    	else
    	{
    		_name = MPU6050;
 800689a:	4b16      	ldr	r3, [pc, #88]	@ (80068f4 <MPU_begin+0xc4>)
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
    	}
        // Startup / reset the sensor
        select = 0x00;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 80068a4:	4b10      	ldr	r3, [pc, #64]	@ (80068e8 <MPU_begin+0xb8>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	4619      	mov	r1, r3
 80068aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	2301      	movs	r3, #1
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	f107 0316 	add.w	r3, r7, #22
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	2301      	movs	r3, #1
 80068bc:	226b      	movs	r2, #107	@ 0x6b
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f003 fb24 	bl	8009f0c <HAL_I2C_Mem_Write>
        MPU_setFullScaleRange(I2Cx, ADSR, GDSR);
 80068c4:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <MPU_begin+0xcc>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <MPU_begin+0xd0>)
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f816 	bl	8006904 <MPU_setFullScaleRange>

        return 1;
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <MPU_begin+0xae>
    }
    else
    {
        return 0;
 80068dc:	2300      	movs	r3, #0
    }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20001134 	.word	0x20001134
 80068ec:	20001138 	.word	0x20001138
 80068f0:	2000113c 	.word	0x2000113c
 80068f4:	20001136 	.word	0x20001136
 80068f8:	20001135 	.word	0x20001135
 80068fc:	20000018 	.word	0x20000018
 8006900:	2000001c 	.word	0x2000001c

08006904 <MPU_setFullScaleRange>:
/// @param _addr Hex address based on AD0 pin.
/// @param scaleFactor Save scale range.
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_setFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale, uint8_t gScale)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
 8006910:	4613      	mov	r3, r2
 8006912:	70bb      	strb	r3, [r7, #2]
	// Set full scale range
	MPU_writeAccScaleRange(I2Cx, aScale);
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f809 	bl	8006930 <MPU_writeAccScaleRange>
	MPU_writeGyrScaleRange(I2Cx, gScale);
 800691e:	78bb      	ldrb	r3, [r7, #2]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f894 	bl	8006a50 <MPU_writeGyrScaleRange>
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <MPU_writeAccScaleRange>:
/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param scaleFactor Save scale range.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af04      	add	r7, sp, #16
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d866      	bhi.n	8006a10 <MPU_writeAccScaleRange+0xe0>
 8006942:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <MPU_writeAccScaleRange+0x18>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	08006987 	.word	0x08006987
 8006950:	080069b5 	.word	0x080069b5
 8006954:	080069e3 	.word	0x080069e3
    {
    case AFSR_2G:
        scaleFactor.a = 16384.0;
 8006958:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <MPU_writeAccScaleRange+0x118>)
 800695a:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800695e:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006964:	4b39      	ldr	r3, [pc, #228]	@ (8006a4c <MPU_writeAccScaleRange+0x11c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	4619      	mov	r1, r3
 800696a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800696e:	9302      	str	r3, [sp, #8]
 8006970:	2301      	movs	r3, #1
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f107 030f 	add.w	r3, r7, #15
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	2301      	movs	r3, #1
 800697c:	221c      	movs	r2, #28
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f003 fac4 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006984:	e05b      	b.n	8006a3e <MPU_writeAccScaleRange+0x10e>
    case AFSR_4G:
        scaleFactor.a = 8192.0;
 8006986:	4b30      	ldr	r3, [pc, #192]	@ (8006a48 <MPU_writeAccScaleRange+0x118>)
 8006988:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800698c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 800698e:	2308      	movs	r3, #8
 8006990:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006992:	4b2e      	ldr	r3, [pc, #184]	@ (8006a4c <MPU_writeAccScaleRange+0x11c>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	2301      	movs	r3, #1
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	f107 030f 	add.w	r3, r7, #15
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2301      	movs	r3, #1
 80069aa:	221c      	movs	r2, #28
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f003 faad 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 80069b2:	e044      	b.n	8006a3e <MPU_writeAccScaleRange+0x10e>
    case AFSR_8G:
        scaleFactor.a = 4096.0;
 80069b4:	4b24      	ldr	r3, [pc, #144]	@ (8006a48 <MPU_writeAccScaleRange+0x118>)
 80069b6:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80069ba:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80069bc:	2310      	movs	r3, #16
 80069be:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80069c0:	4b22      	ldr	r3, [pc, #136]	@ (8006a4c <MPU_writeAccScaleRange+0x11c>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069ca:	9302      	str	r3, [sp, #8]
 80069cc:	2301      	movs	r3, #1
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	f107 030f 	add.w	r3, r7, #15
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2301      	movs	r3, #1
 80069d8:	221c      	movs	r2, #28
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f003 fa96 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 80069e0:	e02d      	b.n	8006a3e <MPU_writeAccScaleRange+0x10e>
    case AFSR_16G:
        scaleFactor.a = 2048.0;
 80069e2:	4b19      	ldr	r3, [pc, #100]	@ (8006a48 <MPU_writeAccScaleRange+0x118>)
 80069e4:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80069e8:	601a      	str	r2, [r3, #0]
        select = 0x18;
 80069ea:	2318      	movs	r3, #24
 80069ec:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80069ee:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <MPU_writeAccScaleRange+0x11c>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	2301      	movs	r3, #1
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	f107 030f 	add.w	r3, r7, #15
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2301      	movs	r3, #1
 8006a06:	221c      	movs	r2, #28
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f003 fa7f 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006a0e:	e016      	b.n	8006a3e <MPU_writeAccScaleRange+0x10e>
    default:
        scaleFactor.a = 8192.0;
 8006a10:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <MPU_writeAccScaleRange+0x118>)
 8006a12:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8006a16:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8006a18:	2308      	movs	r3, #8
 8006a1a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a4c <MPU_writeAccScaleRange+0x11c>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	4619      	mov	r1, r3
 8006a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	f107 030f 	add.w	r3, r7, #15
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2301      	movs	r3, #1
 8006a34:	221c      	movs	r2, #28
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f003 fa68 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006a3c:	bf00      	nop
    }
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20001190 	.word	0x20001190
 8006a4c:	20001134 	.word	0x20001134

08006a50 <MPU_writeGyrScaleRange>:
/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param scaleFactor Save scale range.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyrScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d862      	bhi.n	8006b28 <MPU_writeGyrScaleRange+0xd8>
 8006a62:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <MPU_writeGyrScaleRange+0x18>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006aa5 	.word	0x08006aa5
 8006a70:	08006ad1 	.word	0x08006ad1
 8006a74:	08006afd 	.word	0x08006afd
    {
    case GFSR_250DPS:
        scaleFactor.g = 131.0;
 8006a78:	4b38      	ldr	r3, [pc, #224]	@ (8006b5c <MPU_writeGyrScaleRange+0x10c>)
 8006a7a:	4a39      	ldr	r2, [pc, #228]	@ (8006b60 <MPU_writeGyrScaleRange+0x110>)
 8006a7c:	605a      	str	r2, [r3, #4]
        select = 0x00;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006a82:	4b38      	ldr	r3, [pc, #224]	@ (8006b64 <MPU_writeGyrScaleRange+0x114>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	4619      	mov	r1, r3
 8006a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	f107 030f 	add.w	r3, r7, #15
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	221b      	movs	r2, #27
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f003 fa35 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006aa2:	e057      	b.n	8006b54 <MPU_writeGyrScaleRange+0x104>
    case GFSR_500DPS:
        scaleFactor.g = 65.5;
 8006aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8006b5c <MPU_writeGyrScaleRange+0x10c>)
 8006aa6:	4a30      	ldr	r2, [pc, #192]	@ (8006b68 <MPU_writeGyrScaleRange+0x118>)
 8006aa8:	605a      	str	r2, [r3, #4]
        select = 0x08;
 8006aaa:	2308      	movs	r3, #8
 8006aac:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006aae:	4b2d      	ldr	r3, [pc, #180]	@ (8006b64 <MPU_writeGyrScaleRange+0x114>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	2301      	movs	r3, #1
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	f107 030f 	add.w	r3, r7, #15
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	221b      	movs	r2, #27
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f003 fa1f 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006ace:	e041      	b.n	8006b54 <MPU_writeGyrScaleRange+0x104>
    case GFSR_1000DPS:
        scaleFactor.g = 32.8;
 8006ad0:	4b22      	ldr	r3, [pc, #136]	@ (8006b5c <MPU_writeGyrScaleRange+0x10c>)
 8006ad2:	4a26      	ldr	r2, [pc, #152]	@ (8006b6c <MPU_writeGyrScaleRange+0x11c>)
 8006ad4:	605a      	str	r2, [r3, #4]
        select = 0x10;
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006ada:	4b22      	ldr	r3, [pc, #136]	@ (8006b64 <MPU_writeGyrScaleRange+0x114>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ae4:	9302      	str	r3, [sp, #8]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	f107 030f 	add.w	r3, r7, #15
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2301      	movs	r3, #1
 8006af2:	221b      	movs	r2, #27
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f003 fa09 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006afa:	e02b      	b.n	8006b54 <MPU_writeGyrScaleRange+0x104>
    case GFSR_2000DPS:
        scaleFactor.g = 16.4;
 8006afc:	4b17      	ldr	r3, [pc, #92]	@ (8006b5c <MPU_writeGyrScaleRange+0x10c>)
 8006afe:	4a1c      	ldr	r2, [pc, #112]	@ (8006b70 <MPU_writeGyrScaleRange+0x120>)
 8006b00:	605a      	str	r2, [r3, #4]
        select = 0x18;
 8006b02:	2318      	movs	r3, #24
 8006b04:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006b06:	4b17      	ldr	r3, [pc, #92]	@ (8006b64 <MPU_writeGyrScaleRange+0x114>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b10:	9302      	str	r3, [sp, #8]
 8006b12:	2301      	movs	r3, #1
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	f107 030f 	add.w	r3, r7, #15
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	221b      	movs	r2, #27
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f003 f9f3 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006b26:	e015      	b.n	8006b54 <MPU_writeGyrScaleRange+0x104>
    default:
        scaleFactor.g = 65.5;
 8006b28:	4b0c      	ldr	r3, [pc, #48]	@ (8006b5c <MPU_writeGyrScaleRange+0x10c>)
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b68 <MPU_writeGyrScaleRange+0x118>)
 8006b2c:	605a      	str	r2, [r3, #4]
        select = 0x08;
 8006b2e:	2308      	movs	r3, #8
 8006b30:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <MPU_writeGyrScaleRange+0x114>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	4619      	mov	r1, r3
 8006b38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b3c:	9302      	str	r3, [sp, #8]
 8006b3e:	2301      	movs	r3, #1
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	f107 030f 	add.w	r3, r7, #15
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2301      	movs	r3, #1
 8006b4a:	221b      	movs	r2, #27
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f003 f9dd 	bl	8009f0c <HAL_I2C_Mem_Write>
        break;
 8006b52:	bf00      	nop
    }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20001190 	.word	0x20001190
 8006b60:	43030000 	.word	0x43030000
 8006b64:	20001134 	.word	0x20001134
 8006b68:	42830000 	.word	0x42830000
 8006b6c:	42033333 	.word	0x42033333
 8006b70:	41833333 	.word	0x41833333

08006b74 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	@ 0x30
 8006b78:	af04      	add	r7, sp, #16
 8006b7a:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14], mbuf[6];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8006b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c70 <MPU_readRawData+0xfc>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	230e      	movs	r3, #14
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	f107 0310 	add.w	r3, r7, #16
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	223b      	movs	r2, #59	@ 0x3b
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f003 fab2 	bl	800a100 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 8006b9c:	7c3b      	ldrb	r3, [r7, #16]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	b21a      	sxth	r2, r3
 8006ba2:	7c7b      	ldrb	r3, [r7, #17]
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b21a      	sxth	r2, r3
 8006baa:	4b32      	ldr	r3, [pc, #200]	@ (8006c74 <MPU_readRawData+0x100>)
 8006bac:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 8006bae:	7cbb      	ldrb	r3, [r7, #18]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	b21a      	sxth	r2, r3
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b21a      	sxth	r2, r3
 8006bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006c74 <MPU_readRawData+0x100>)
 8006bbe:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 8006bc0:	7d3b      	ldrb	r3, [r7, #20]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	b21a      	sxth	r2, r3
 8006bc6:	7d7b      	ldrb	r3, [r7, #21]
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	4b29      	ldr	r3, [pc, #164]	@ (8006c74 <MPU_readRawData+0x100>)
 8006bd0:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 8006bd2:	7e3b      	ldrb	r3, [r7, #24]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	b21a      	sxth	r2, r3
 8006bd8:	7e7b      	ldrb	r3, [r7, #25]
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b21a      	sxth	r2, r3
 8006be0:	4b24      	ldr	r3, [pc, #144]	@ (8006c74 <MPU_readRawData+0x100>)
 8006be2:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 8006be4:	7ebb      	ldrb	r3, [r7, #26]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	b21a      	sxth	r2, r3
 8006bea:	7efb      	ldrb	r3, [r7, #27]
 8006bec:	b21b      	sxth	r3, r3
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b21a      	sxth	r2, r3
 8006bf2:	4b20      	ldr	r3, [pc, #128]	@ (8006c74 <MPU_readRawData+0x100>)
 8006bf4:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 8006bf6:	7f3b      	ldrb	r3, [r7, #28]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b21a      	sxth	r2, r3
 8006bfc:	7f7b      	ldrb	r3, [r7, #29]
 8006bfe:	b21b      	sxth	r3, r3
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b21a      	sxth	r2, r3
 8006c04:	4b1b      	ldr	r3, [pc, #108]	@ (8006c74 <MPU_readRawData+0x100>)
 8006c06:	815a      	strh	r2, [r3, #10]

    if (_name == MPU9250)
 8006c08:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <MPU_readRawData+0x104>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d12a      	bne.n	8006c66 <MPU_readRawData+0xf2>
    {
        // Read the magnetometer
        HAL_I2C_Mem_Read(I2Cx, _maddr, MAG_XOUT_H, 1, mbuf, 6, I2C_TIMOUT_MS);
 8006c10:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <MPU_readRawData+0x108>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c1a:	9302      	str	r3, [sp, #8]
 8006c1c:	2306      	movs	r3, #6
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2301      	movs	r3, #1
 8006c28:	2203      	movs	r2, #3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f003 fa68 	bl	800a100 <HAL_I2C_Mem_Read>

        // Bit shift the data
        rawData.mx = mbuf[0] << 8 | mbuf[1];
 8006c30:	7a3b      	ldrb	r3, [r7, #8]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	b21a      	sxth	r2, r3
 8006c36:	7a7b      	ldrb	r3, [r7, #9]
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b21a      	sxth	r2, r3
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <MPU_readRawData+0x100>)
 8006c40:	819a      	strh	r2, [r3, #12]
        rawData.my = mbuf[2] << 8 | mbuf[3];
 8006c42:	7abb      	ldrb	r3, [r7, #10]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	b21a      	sxth	r2, r3
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	b21b      	sxth	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b21a      	sxth	r2, r3
 8006c50:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <MPU_readRawData+0x100>)
 8006c52:	81da      	strh	r2, [r3, #14]
        rawData.mz = mbuf[4] << 8 | mbuf[5];
 8006c54:	7b3b      	ldrb	r3, [r7, #12]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	b21a      	sxth	r2, r3
 8006c5a:	7b7b      	ldrb	r3, [r7, #13]
 8006c5c:	b21b      	sxth	r3, r3
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b21a      	sxth	r2, r3
 8006c62:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <MPU_readRawData+0x100>)
 8006c64:	821a      	strh	r2, [r3, #16]
    }
}
 8006c66:	bf00      	nop
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20001134 	.word	0x20001134
 8006c74:	20001140 	.word	0x20001140
 8006c78:	20001136 	.word	0x20001136
 8006c7c:	20001135 	.word	0x20001135

08006c80 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of points to get average offsets.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	817b      	strh	r3, [r7, #10]
 8006ca6:	e01d      	b.n	8006ce4 <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff ff63 	bl	8006b74 <MPU_readRawData>
        x += rawData.gx;
 8006cae:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <MPU_calibrateGyro+0xd0>)
 8006cb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 8006cbc:	4b24      	ldr	r3, [pc, #144]	@ (8006d50 <MPU_calibrateGyro+0xd0>)
 8006cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 8006cca:	4b21      	ldr	r3, [pc, #132]	@ (8006d50 <MPU_calibrateGyro+0xd0>)
 8006ccc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8006cd8:	2003      	movs	r0, #3
 8006cda:	f001 fdff 	bl	80088dc <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	817b      	strh	r3, [r7, #10]
 8006ce4:	897a      	ldrh	r2, [r7, #10]
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d3dd      	bcc.n	8006ca8 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d04:	4b13      	ldr	r3, [pc, #76]	@ (8006d54 <MPU_calibrateGyro+0xd4>)
 8006d06:	edc3 7a00 	vstr	s15, [r3]
    gyroCal.y = (float)y / (float)numCalPoints;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d14:	887b      	ldrh	r3, [r7, #2]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <MPU_calibrateGyro+0xd4>)
 8006d24:	edc3 7a01 	vstr	s15, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d40:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <MPU_calibrateGyro+0xd4>)
 8006d42:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20001140 	.word	0x20001140
 8006d54:	20001178 	.word	0x20001178

08006d58 <MPU_readSensorData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readSensorData(I2C_HandleTypeDef *I2Cx)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff07 	bl	8006b74 <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = (float)rawData.ax / scaleFactor.a;
 8006d66:	4b3f      	ldr	r3, [pc, #252]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d74:	4b3c      	ldr	r3, [pc, #240]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006d76:	ed93 7a00 	vldr	s14, [r3]
 8006d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006d80:	edc3 7a00 	vstr	s15, [r3]
    sensorData.ay = (float)rawData.ay / scaleFactor.a;
 8006d84:	4b37      	ldr	r3, [pc, #220]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d92:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006d94:	ed93 7a00 	vldr	s14, [r3]
 8006d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9c:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006d9e:	edc3 7a01 	vstr	s15, [r3, #4]
    sensorData.az = rawData.az / scaleFactor.a;
 8006da2:	4b30      	ldr	r3, [pc, #192]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006da8:	ee07 3a90 	vmov	s15, r3
 8006dac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006db0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006db2:	ed93 7a00 	vldr	s14, [r3]
 8006db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dba:	4b2c      	ldr	r3, [pc, #176]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006dbc:	edc3 7a02 	vstr	s15, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 8006dc0:	4b28      	ldr	r3, [pc, #160]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006dc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dce:	4b28      	ldr	r3, [pc, #160]	@ (8006e70 <MPU_readSensorData+0x118>)
 8006dd0:	edd3 7a00 	vldr	s15, [r3]
 8006dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd8:	4b24      	ldr	r3, [pc, #144]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006dda:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 8006dde:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006de0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dec:	4b20      	ldr	r3, [pc, #128]	@ (8006e70 <MPU_readSensorData+0x118>)
 8006dee:	edd3 7a01 	vldr	s15, [r3, #4]
 8006df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006df8:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 8006dfc:	4b19      	ldr	r3, [pc, #100]	@ (8006e64 <MPU_readSensorData+0x10c>)
 8006dfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e0a:	4b19      	ldr	r3, [pc, #100]	@ (8006e70 <MPU_readSensorData+0x118>)
 8006e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e14:	4b15      	ldr	r3, [pc, #84]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e16:	edc3 7a05 	vstr	s15, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= scaleFactor.g;
 8006e1a:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006e20:	4b11      	ldr	r3, [pc, #68]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2a:	4b10      	ldr	r3, [pc, #64]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e2c:	edc3 7a03 	vstr	s15, [r3, #12]
    sensorData.gy /= scaleFactor.g;
 8006e30:	4b0e      	ldr	r3, [pc, #56]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e32:	edd3 6a04 	vldr	s13, [r3, #16]
 8006e36:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e40:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e42:	edc3 7a04 	vstr	s15, [r3, #16]
    sensorData.gz /= scaleFactor.g;
 8006e46:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e48:	edd3 6a05 	vldr	s13, [r3, #20]
 8006e4c:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <MPU_readSensorData+0x110>)
 8006e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e56:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <MPU_readSensorData+0x114>)
 8006e58:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20001140 	.word	0x20001140
 8006e68:	20001190 	.word	0x20001190
 8006e6c:	20001154 	.word	0x20001154
 8006e70:	20001178 	.word	0x20001178
 8006e74:	00000000 	.word	0x00000000

08006e78 <MPU_calcAttitude>:

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter.
/// @param I2Cx Pointer to I2C structure config.
void MPU_calcAttitude(I2C_HandleTypeDef *I2Cx)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
    // Read processed data
    MPU_readSensorData(I2Cx);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ff69 	bl	8006d58 <MPU_readSensorData>

    // Complementary filter
    float accelPitch = atan2(sensorData.ay, sensorData.az) * RAD2DEG;
 8006e86:	4b54      	ldr	r3, [pc, #336]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e8c:	4b52      	ldr	r3, [pc, #328]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006e8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e92:	eef0 0a47 	vmov.f32	s1, s14
 8006e96:	eeb0 0a67 	vmov.f32	s0, s15
 8006e9a:	f7fb f875 	bl	8001f88 <_ZSt5atan2ff>
 8006e9e:	ee10 3a10 	vmov	r3, s0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7f9 fafc 	bl	80004a0 <__aeabi_f2d>
 8006ea8:	a349      	add	r3, pc, #292	@ (adr r3, 8006fd0 <MPU_calcAttitude+0x158>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fb4f 	bl	8000550 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f7f9 fe21 	bl	8000b00 <__aeabi_d2f>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	60fb      	str	r3, [r7, #12]
    float accelRoll = atan2(sensorData.ax, sensorData.az) * RAD2DEG;
 8006ec2:	4b45      	ldr	r3, [pc, #276]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006ec4:	edd3 7a00 	vldr	s15, [r3]
 8006ec8:	4b43      	ldr	r3, [pc, #268]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006eca:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ece:	eef0 0a47 	vmov.f32	s1, s14
 8006ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ed6:	f7fb f857 	bl	8001f88 <_ZSt5atan2ff>
 8006eda:	ee10 3a10 	vmov	r3, s0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 fade 	bl	80004a0 <__aeabi_f2d>
 8006ee4:	a33a      	add	r3, pc, #232	@ (adr r3, 8006fd0 <MPU_calcAttitude+0x158>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 fb31 	bl	8000550 <__aeabi_dmul>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f7f9 fe03 	bl	8000b00 <__aeabi_d2f>
 8006efa:	4603      	mov	r3, r0
 8006efc:	60bb      	str	r3, [r7, #8]

    attitude.r = _tau * (attitude.r - sensorData.gy * _dt) + (1 - _tau) * accelRoll;
 8006efe:	4b37      	ldr	r3, [pc, #220]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006f00:	ed93 7a00 	vldr	s14, [r3]
 8006f04:	4b34      	ldr	r3, [pc, #208]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006f06:	edd3 6a04 	vldr	s13, [r3, #16]
 8006f0a:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <MPU_calcAttitude+0x168>)
 8006f0c:	edd3 7a00 	vldr	s15, [r3]
 8006f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f18:	4b32      	ldr	r3, [pc, #200]	@ (8006fe4 <MPU_calcAttitude+0x16c>)
 8006f1a:	edd3 7a00 	vldr	s15, [r3]
 8006f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f22:	4b30      	ldr	r3, [pc, #192]	@ (8006fe4 <MPU_calcAttitude+0x16c>)
 8006f24:	edd3 7a00 	vldr	s15, [r3]
 8006f28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006f3e:	edc3 7a00 	vstr	s15, [r3]
    attitude.p = _tau * (attitude.p + sensorData.gx * _dt) + (1 - _tau) * accelPitch;
 8006f42:	4b26      	ldr	r3, [pc, #152]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006f44:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f48:	4b23      	ldr	r3, [pc, #140]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006f4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8006f4e:	4b24      	ldr	r3, [pc, #144]	@ (8006fe0 <MPU_calcAttitude+0x168>)
 8006f50:	edd3 7a00 	vldr	s15, [r3]
 8006f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f5c:	4b21      	ldr	r3, [pc, #132]	@ (8006fe4 <MPU_calcAttitude+0x16c>)
 8006f5e:	edd3 7a00 	vldr	s15, [r3]
 8006f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f66:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe4 <MPU_calcAttitude+0x16c>)
 8006f68:	edd3 7a00 	vldr	s15, [r3]
 8006f6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f80:	4b16      	ldr	r3, [pc, #88]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006f82:	edc3 7a01 	vstr	s15, [r3, #4]
    attitude.y += sensorData.gz * _dt;
 8006f86:	4b15      	ldr	r3, [pc, #84]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006f88:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f8c:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <MPU_calcAttitude+0x160>)
 8006f8e:	edd3 6a05 	vldr	s13, [r3, #20]
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <MPU_calcAttitude+0x168>)
 8006f94:	edd3 7a00 	vldr	s15, [r3]
 8006f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006fa2:	edc3 7a02 	vstr	s15, [r3, #8]
    // attitude.r = limAngle(attitude.r);
    // attitude.p = limAngle(attitude.p);
    // attitude.y = limAngle(attitude.y);

    // Convert to quaternion
    toQuaternion(attitude);
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <MPU_calcAttitude+0x164>)
 8006fa8:	edd3 6a00 	vldr	s13, [r3]
 8006fac:	ed93 7a01 	vldr	s14, [r3, #4]
 8006fb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006fb4:	eeb0 0a66 	vmov.f32	s0, s13
 8006fb8:	eef0 0a47 	vmov.f32	s1, s14
 8006fbc:	eeb0 1a67 	vmov.f32	s2, s15
 8006fc0:	f000 f812 	bl	8006fe8 <toQuaternion>
}
 8006fc4:	bf00      	nop
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	269dd8d6 	.word	0x269dd8d6
 8006fd4:	404ca61e 	.word	0x404ca61e
 8006fd8:	20001154 	.word	0x20001154
 8006fdc:	20001184 	.word	0x20001184
 8006fe0:	2000113c 	.word	0x2000113c
 8006fe4:	20001138 	.word	0x20001138

08006fe8 <toQuaternion>:

/// @brief Convert Euler angles to quaternion.
/// @param att Attitudes in degree include roll, pitch and yaw.
void toQuaternion(Attitude att)
{
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b090      	sub	sp, #64	@ 0x40
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	eef0 6a40 	vmov.f32	s13, s0
 8006ff2:	eeb0 7a60 	vmov.f32	s14, s1
 8006ff6:	eef0 7a41 	vmov.f32	s15, s2
 8006ffa:	edc7 6a01 	vstr	s13, [r7, #4]
 8006ffe:	ed87 7a02 	vstr	s14, [r7, #8]
 8007002:	edc7 7a03 	vstr	s15, [r7, #12]
	// Degree to radian
	att.r *= DEG2RAD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4618      	mov	r0, r3
 800700a:	f7f9 fa49 	bl	80004a0 <__aeabi_f2d>
 800700e:	a3b0      	add	r3, pc, #704	@ (adr r3, 80072d0 <toQuaternion+0x2e8>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fa9c 	bl	8000550 <__aeabi_dmul>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4610      	mov	r0, r2
 800701e:	4619      	mov	r1, r3
 8007020:	f7f9 fd6e 	bl	8000b00 <__aeabi_d2f>
 8007024:	4603      	mov	r3, r0
 8007026:	607b      	str	r3, [r7, #4]
	att.p *= DEG2RAD;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 fa38 	bl	80004a0 <__aeabi_f2d>
 8007030:	a3a7      	add	r3, pc, #668	@ (adr r3, 80072d0 <toQuaternion+0x2e8>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f7f9 fa8b 	bl	8000550 <__aeabi_dmul>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	f7f9 fd5d 	bl	8000b00 <__aeabi_d2f>
 8007046:	4603      	mov	r3, r0
 8007048:	60bb      	str	r3, [r7, #8]
	att.y *= DEG2RAD;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4618      	mov	r0, r3
 800704e:	f7f9 fa27 	bl	80004a0 <__aeabi_f2d>
 8007052:	a39f      	add	r3, pc, #636	@ (adr r3, 80072d0 <toQuaternion+0x2e8>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 fa7a 	bl	8000550 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4610      	mov	r0, r2
 8007062:	4619      	mov	r1, r3
 8007064:	f7f9 fd4c 	bl	8000b00 <__aeabi_d2f>
 8007068:	4603      	mov	r3, r0
 800706a:	60fb      	str	r3, [r7, #12]

    // Abbreviations for the various angular functions
	double cr = cos(att.r * 0.5);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 fa16 	bl	80004a0 <__aeabi_f2d>
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	4b93      	ldr	r3, [pc, #588]	@ (80072c8 <toQuaternion+0x2e0>)
 800707a:	f7f9 fa69 	bl	8000550 <__aeabi_dmul>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	ec43 2b17 	vmov	d7, r2, r3
 8007086:	eeb0 0a47 	vmov.f32	s0, s14
 800708a:	eef0 0a67 	vmov.f32	s1, s15
 800708e:	f008 fa8f 	bl	800f5b0 <cos>
 8007092:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double sr = sin(att.r * 0.5);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	f7f9 fa01 	bl	80004a0 <__aeabi_f2d>
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	4b89      	ldr	r3, [pc, #548]	@ (80072c8 <toQuaternion+0x2e0>)
 80070a4:	f7f9 fa54 	bl	8000550 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	ec43 2b17 	vmov	d7, r2, r3
 80070b0:	eeb0 0a47 	vmov.f32	s0, s14
 80070b4:	eef0 0a67 	vmov.f32	s1, s15
 80070b8:	f008 face 	bl	800f658 <sin>
 80070bc:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double cp = cos(att.p * 0.5);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 f9ec 	bl	80004a0 <__aeabi_f2d>
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	4b7e      	ldr	r3, [pc, #504]	@ (80072c8 <toQuaternion+0x2e0>)
 80070ce:	f7f9 fa3f 	bl	8000550 <__aeabi_dmul>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	ec43 2b17 	vmov	d7, r2, r3
 80070da:	eeb0 0a47 	vmov.f32	s0, s14
 80070de:	eef0 0a67 	vmov.f32	s1, s15
 80070e2:	f008 fa65 	bl	800f5b0 <cos>
 80070e6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	double sp = sin(att.p * 0.5);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7f9 f9d7 	bl	80004a0 <__aeabi_f2d>
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	4b74      	ldr	r3, [pc, #464]	@ (80072c8 <toQuaternion+0x2e0>)
 80070f8:	f7f9 fa2a 	bl	8000550 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	ec43 2b17 	vmov	d7, r2, r3
 8007104:	eeb0 0a47 	vmov.f32	s0, s14
 8007108:	eef0 0a67 	vmov.f32	s1, s15
 800710c:	f008 faa4 	bl	800f658 <sin>
 8007110:	ed87 0b08 	vstr	d0, [r7, #32]
	double cy = cos(att.y * 0.5);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 f9c2 	bl	80004a0 <__aeabi_f2d>
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	4b69      	ldr	r3, [pc, #420]	@ (80072c8 <toQuaternion+0x2e0>)
 8007122:	f7f9 fa15 	bl	8000550 <__aeabi_dmul>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	ec43 2b17 	vmov	d7, r2, r3
 800712e:	eeb0 0a47 	vmov.f32	s0, s14
 8007132:	eef0 0a67 	vmov.f32	s1, s15
 8007136:	f008 fa3b 	bl	800f5b0 <cos>
 800713a:	ed87 0b06 	vstr	d0, [r7, #24]
	double sy = sin(att.y * 0.5);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4618      	mov	r0, r3
 8007142:	f7f9 f9ad 	bl	80004a0 <__aeabi_f2d>
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	4b5f      	ldr	r3, [pc, #380]	@ (80072c8 <toQuaternion+0x2e0>)
 800714c:	f7f9 fa00 	bl	8000550 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	ec43 2b17 	vmov	d7, r2, r3
 8007158:	eeb0 0a47 	vmov.f32	s0, s14
 800715c:	eef0 0a67 	vmov.f32	s1, s15
 8007160:	f008 fa7a 	bl	800f658 <sin>
 8007164:	ed87 0b04 	vstr	d0, [r7, #16]

	// Results
	quaternion.w = cr * cp * cy + sr * sp * sy;
 8007168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800716c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007170:	f7f9 f9ee 	bl	8000550 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007180:	f7f9 f9e6 	bl	8000550 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007190:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007194:	f7f9 f9dc 	bl	8000550 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4610      	mov	r0, r2
 800719e:	4619      	mov	r1, r3
 80071a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071a4:	f7f9 f9d4 	bl	8000550 <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 f818 	bl	80001e4 <__adddf3>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4944      	ldr	r1, [pc, #272]	@ (80072cc <toQuaternion+0x2e4>)
 80071ba:	e9c1 2300 	strd	r2, r3, [r1]
	quaternion.x = sr * cp * cy - cr * sp * sy;
 80071be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80071c6:	f7f9 f9c3 	bl	8000550 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d6:	f7f9 f9bb 	bl	8000550 <__aeabi_dmul>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4614      	mov	r4, r2
 80071e0:	461d      	mov	r5, r3
 80071e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071ea:	f7f9 f9b1 	bl	8000550 <__aeabi_dmul>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071fa:	f7f9 f9a9 	bl	8000550 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f8 ffeb 	bl	80001e0 <__aeabi_dsub>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	492f      	ldr	r1, [pc, #188]	@ (80072cc <toQuaternion+0x2e4>)
 8007210:	e9c1 2302 	strd	r2, r3, [r1, #8]
	quaternion.y = cr * sp * cy + sr * cp * sy;
 8007214:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007218:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800721c:	f7f9 f998 	bl	8000550 <__aeabi_dmul>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722c:	f7f9 f990 	bl	8000550 <__aeabi_dmul>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4614      	mov	r4, r2
 8007236:	461d      	mov	r5, r3
 8007238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800723c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007240:	f7f9 f986 	bl	8000550 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4610      	mov	r0, r2
 800724a:	4619      	mov	r1, r3
 800724c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007250:	f7f9 f97e 	bl	8000550 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f8 ffc2 	bl	80001e4 <__adddf3>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4919      	ldr	r1, [pc, #100]	@ (80072cc <toQuaternion+0x2e4>)
 8007266:	e9c1 2304 	strd	r2, r3, [r1, #16]
	quaternion.z = cr * cp * sy - sr * sp * cy;
 800726a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800726e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007272:	f7f9 f96d 	bl	8000550 <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007282:	f7f9 f965 	bl	8000550 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4614      	mov	r4, r2
 800728c:	461d      	mov	r5, r3
 800728e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007292:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007296:	f7f9 f95b 	bl	8000550 <__aeabi_dmul>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4610      	mov	r0, r2
 80072a0:	4619      	mov	r1, r3
 80072a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a6:	f7f9 f953 	bl	8000550 <__aeabi_dmul>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f8 ff95 	bl	80001e0 <__aeabi_dsub>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4904      	ldr	r1, [pc, #16]	@ (80072cc <toQuaternion+0x2e4>)
 80072bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80072c0:	bf00      	nop
 80072c2:	3740      	adds	r7, #64	@ 0x40
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bdb0      	pop	{r4, r5, r7, pc}
 80072c8:	3fe00000 	.word	0x3fe00000
 80072cc:	20001198 	.word	0x20001198
 80072d0:	a226e211 	.word	0xa226e211
 80072d4:	3f91df46 	.word	0x3f91df46

080072d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e00c      	b.n	8007302 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	fa22 f103 	lsr.w	r1, r2, r3
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	b2ca      	uxtb	r2, r1
 80072fa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b03      	cmp	r3, #3
 8007306:	d9ef      	bls.n	80072e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e010      	b.n	800734e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	440a      	add	r2, r1
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	4611      	mov	r1, r2
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	00d2      	lsls	r2, r2, #3
 800733e:	fa01 f202 	lsl.w	r2, r1, r2
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d9eb      	bls.n	800732c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	4a04      	ldr	r2, [pc, #16]	@ (8007380 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	080112d4 	.word	0x080112d4

08007384 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ffe5 	bl	8007364 <_ZN3ros11Subscriber_C1Ev>
 800739a:	4a0b      	ldr	r2, [pc, #44]	@ (80073c8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fc fe89 	bl	80040bc <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	609a      	str	r2, [r3, #8]
  };
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	080111e8 	.word	0x080111e8

080073cc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff ffc1 	bl	8007364 <_ZN3ros11Subscriber_C1Ev>
 80073e2:	4a0b      	ldr	r2, [pc, #44]	@ (8007410 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	330c      	adds	r3, #12
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fc f815 	bl	800341c <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    endpoint_(endpoint)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40
    topic_ = topic_name;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	609a      	str	r2, [r3, #8]
  };
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	080111d0 	.word	0x080111d0

08007414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
  }
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fb fc71 	bl	8002d20 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e01d      	b.n	80074b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d111      	bne.n	80074ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	60da      	str	r2, [r3, #12]
        return true;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e006      	b.n	80074ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b18      	cmp	r3, #24
 80074b6:	ddde      	ble.n	8007476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80074b8:	2300      	movs	r3, #0
  }
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e018      	b.n	8007508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80074de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10d      	bne.n	8007502 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	605a      	str	r2, [r3, #4]
        return true;
 80074fe:	2301      	movs	r3, #1
 8007500:	e006      	b.n	8007510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b18      	cmp	r3, #24
 800750c:	dde3      	ble.n	80074d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800750e:	2300      	movs	r3, #0
  }
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:
  Time now()
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	3304      	adds	r3, #4
 800752a:	4618      	mov	r0, r3
 800752c:	f7fb fce6 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 8007530:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fa fd3c 	bl	8001fb0 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a14      	ldr	r2, [pc, #80]	@ (800758c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	099a      	lsrs	r2, r3, #6
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8007548:	441a      	add	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4b0e      	ldr	r3, [pc, #56]	@ (800758c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8007552:	fba3 1302 	umull	r1, r3, r3, r2
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	4a0b      	ldr	r2, [pc, #44]	@ (8007590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8007564:	fb03 f202 	mul.w	r2, r3, r2
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800756e:	441a      	add	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7f9 fc88 	bl	8000e90 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8007580:	bf00      	nop
  }
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	10624dd3 	.word	0x10624dd3
 8007590:	000f4240 	.word	0x000f4240

08007594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fb fcab 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 80075a6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d903      	bls.n	80075c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
      if (spin_timeout_ > 0)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb fc84 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	1ad2      	subs	r2, r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8007600:	429a      	cmp	r2, r3
 8007602:	bf8c      	ite	hi
 8007604:	2301      	movhi	r3, #1
 8007606:	2300      	movls	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800760e:	f06f 0301 	mvn.w	r3, #1
 8007612:	e194      	b.n	800793e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fb fb9d 	bl	8002d58 <_ZN13STM32Hardware4readEv>
 800761e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f2c0 8174 	blt.w	8007910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	441a      	add	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800763e:	2b07      	cmp	r3, #7
 8007640:	d11e      	bne.n	8007680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8007648:	1c59      	adds	r1, r3, #1
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	b2d1      	uxtb	r1, r2
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	4413      	add	r3, r2
 8007658:	460a      	mov	r2, r1
 800765a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1b4      	bne.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2208      	movs	r2, #8
 800767a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 800767e:	e7af      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8007686:	2b00      	cmp	r3, #0
 8007688:	d128      	bne.n	80076dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2bff      	cmp	r3, #255	@ 0xff
 800768e:	d10d      	bne.n	80076ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f103 0214 	add.w	r2, r3, #20
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 80076aa:	e799      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fb fc23 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	bf8c      	ite	hi
 80076c4:	2301      	movhi	r3, #1
 80076c6:	2300      	movls	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d088      	beq.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 80076d6:	f06f 0301 	mvn.w	r3, #1
 80076da:	e130      	b.n	800793e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d118      	bne.n	8007718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80076ea:	d107      	bne.n	80076fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80076fa:	e771      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800770a:	2b00      	cmp	r3, #0
 800770c:	f47f af68 	bne.w	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f930 	bl	8007976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8007716:	e763      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800771e:	2b02      	cmp	r3, #2
 8007720:	d113      	bne.n	800774a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8007748:	e74a      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8007750:	2b03      	cmp	r3, #3
 8007752:	d110      	bne.n	8007776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8007774:	e734      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800777c:	2b04      	cmp	r3, #4
 800777e:	d116      	bne.n	80077ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8007786:	425a      	negs	r2, r3
 8007788:	b2db      	uxtb	r3, r3
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	bf58      	it	pl
 800778e:	4253      	negpl	r3, r2
 8007790:	2bff      	cmp	r3, #255	@ 0xff
 8007792:	d107      	bne.n	80077a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80077a2:	e71d      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 80077ac:	e718      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d10f      	bne.n	80077d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 80077d6:	e703      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 80077de:	2b06      	cmp	r3, #6
 80077e0:	d117      	bne.n	8007812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	441a      	add	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2207      	movs	r2, #7
 80077f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f47f aeec 	bne.w	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2208      	movs	r2, #8
 800780c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8007810:	e6e6      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8007818:	2b08      	cmp	r3, #8
 800781a:	f47f aee1 	bne.w	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 800782c:	425a      	negs	r2, r3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	bf58      	it	pl
 8007834:	4253      	negpl	r3, r2
 8007836:	2bff      	cmp	r3, #255	@ 0xff
 8007838:	f47f aed2 	bne.w	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8007842:	2b00      	cmp	r3, #0
 8007844:	d110      	bne.n	8007868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f895 	bl	8007976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8b0 	bl	80079b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	e06a      	b.n	800793e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 800786e:	2b0a      	cmp	r3, #10
 8007870:	d107      	bne.n	8007882 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f978 	bl	8007b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8007880:	e6ae      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8007888:	2b06      	cmp	r3, #6
 800788a:	d10e      	bne.n	80078aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f7fb f84d 	bl	800293a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 80078a8:	e69a      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80078b0:	2b0b      	cmp	r3, #11
 80078b2:	d104      	bne.n	80078be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 80078bc:	e690      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80078c4:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f43f ae84 	beq.w	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80078de:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80078e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 80078f2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80078fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 800790a:	4611      	mov	r1, r2
 800790c:	4798      	blx	r3
    while (true)
 800790e:	e667      	b.n	80075e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8007910:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00f      	beq.n	800793c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800792a:	4293      	cmp	r3, r2
 800792c:	d906      	bls.n	800793c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f821 	bl	8007976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return SPIN_OK;
 800793c:	2300      	movs	r3, #0
  }
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7f8 fd94 	bl	800047c <__aeabi_i2d>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	ec43 2b10 	vmov	d0, r2, r3
 800795c:	f007 fdfa 	bl	800f554 <sqrt>
 8007960:	eeb0 7a40 	vmov.f32	s14, s0
 8007964:	eef0 7a60 	vmov.f32	s15, s1
 8007968:	eeb0 0a47 	vmov.f32	s0, s14
 800796c:	eef0 0a67 	vmov.f32	s1, s15
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	4618      	mov	r0, r3
 8007984:	f7fa fb36 	bl	8001ff4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f107 020c 	add.w	r2, r7, #12
 8007992:	210a      	movs	r1, #10
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    rt_time = hardware_.time();
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7fb faad 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80079b2:	b590      	push	{r4, r7, lr}
 80079b4:	b08b      	sub	sp, #44	@ 0x2c
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80079ba:	f107 030c 	add.w	r3, r7, #12
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fa fc08 	bl	80021d4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80079c4:	2300      	movs	r3, #0
 80079c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c8:	e062      	b.n	8007a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d056      	beq.n	8007a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	6859      	ldr	r1, [r3, #4]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3308      	adds	r3, #8
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4608      	mov	r0, r1
 8007a58:	4798      	blx	r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a62:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681c      	ldr	r4, [r3, #0]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fb f916 	bl	8002caa <_ZN3ros9Publisher15getEndpointTypeEv>
 8007a7e:	4601      	mov	r1, r0
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	461a      	mov	r2, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	2b18      	cmp	r3, #24
 8007a94:	dd99      	ble.n	80079ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9a:	e05e      	b.n	8007b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d053      	beq.n	8007b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ac2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad2:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007ad6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4608      	mov	r0, r1
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b04:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4608      	mov	r0, r1
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8007b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b1e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681c      	ldr	r4, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b2a:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007b2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b36:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3304      	adds	r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4608      	mov	r0, r1
 8007b46:	4798      	blx	r3
 8007b48:	4601      	mov	r1, r0
 8007b4a:	f107 030c 	add.w	r3, r7, #12
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	3301      	adds	r3, #1
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	2b18      	cmp	r3, #24
 8007b5e:	dd9d      	ble.n	8007a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 8007b68:	bf00      	nop
 8007b6a:	372c      	adds	r7, #44	@ 0x2c
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}

08007b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fa fa38 	bl	8001ff4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fb f9b7 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fa fa97 	bl	80020d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4915      	ldr	r1, [pc, #84]	@ (8007c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007bac:	fba1 1303 	umull	r1, r3, r1, r3
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	4413      	add	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007bb6:	6939      	ldr	r1, [r7, #16]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4b11      	ldr	r3, [pc, #68]	@ (8007c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8007bc0:	099b      	lsrs	r3, r3, #6
 8007bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007bc6:	fb00 f303 	mul.w	r3, r0, r3
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	440b      	add	r3, r1
 8007bd4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8a6 	bl	8007d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fb f987 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 8007bf6:	bf00      	nop
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	10624dd3 	.word	0x10624dd3
 8007c04:	000f4240 	.word	0x000f4240

08007c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b63      	cmp	r3, #99	@ 0x63
 8007c18:	dd09      	ble.n	8007c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8007c20:	f083 0301 	eor.w	r3, r3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e079      	b.n	8007d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8007c3a:	3207      	adds	r2, #7
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
 8007c42:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	22ff      	movs	r2, #255	@ 0xff
 8007c48:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	22fe      	movs	r2, #254	@ 0xfe
 8007c50:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8007c7a:	4413      	add	r3, r2
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	b21b      	sxth	r3, r3
 8007c96:	121b      	asrs	r3, r3, #8
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a

    /* calculate checksum */
    int chk = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007ca6:	2305      	movs	r3, #5
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e00c      	b.n	8007cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	3306      	adds	r3, #6
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	dded      	ble.n	8007cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3307      	adds	r3, #7
 8007cd4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	425a      	negs	r2, r3
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	bf58      	it	pl
 8007ce0:	4253      	negpl	r3, r2
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	6179      	str	r1, [r7, #20]
 8007cea:	43d2      	mvns	r2, r2
 8007cec:	b2d1      	uxtb	r1, r2
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	460a      	mov	r2, r1
 8007cf4:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624

    if (l <= OUTPUT_SIZE)
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfe:	dc0a      	bgt.n	8007d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	1d18      	adds	r0, r3, #4
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f7fb f8af 	bl	8002e70 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	e005      	b.n	8007d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8007d16:	4905      	ldr	r1, [pc, #20]	@ (8007d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f849 	bl	8007db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8007d22:	4618      	mov	r0, r3
 8007d24:	3720      	adds	r7, #32
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	08011148 	.word	0x08011148

08007d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fb f8dc 	bl	8002efc <_ZN13STM32Hardware4timeEv>
 8007d44:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4915      	ldr	r1, [pc, #84]	@ (8007da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8007d4e:	fba1 1303 	umull	r1, r3, r1, r3
 8007d52:	099b      	lsrs	r3, r3, #6
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	1e5a      	subs	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6859      	ldr	r1, [r3, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4b0f      	ldr	r3, [pc, #60]	@ (8007da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8007d66:	fba3 0302 	umull	r0, r3, r3, r2
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007d70:	fb00 f303 	mul.w	r3, r0, r3
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	4a0c      	ldr	r2, [pc, #48]	@ (8007da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	1aca      	subs	r2, r1, r3
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7f9 f87a 	bl	8000e90 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	10624dd3 	.word	0x10624dd3
 8007da8:	000f4240 	.word	0x000f4240
 8007dac:	3b9aca00 	.word	0x3b9aca00

08007db0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	2103      	movs	r1, #3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f804 	bl	8007dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007dda:	f107 0314 	add.w	r3, r7, #20
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fa fbbc 	bl	800255c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f107 0214 	add.w	r2, r7, #20
 8007df6:	2107      	movs	r1, #7
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	4798      	blx	r3
  }
 8007dfc:	bf00      	nop
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <_Z41__static_initialization_and_destruction_0ii>:
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d131      	bne.n	8007e78 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d12c      	bne.n	8007e78 <_Z41__static_initialization_and_destruction_0ii+0x74>
ros::NodeHandle nh;
 8007e1e:	4818      	ldr	r0, [pc, #96]	@ (8007e80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007e20:	f7fe f84e 	bl	8005ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32MultiArray vel_set_msg;
 8007e24:	4817      	ldr	r0, [pc, #92]	@ (8007e84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007e26:	f7fb faf9 	bl	800341c <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray vel_enc_msg;
 8007e2a:	4817      	ldr	r0, [pc, #92]	@ (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007e2c:	f7fb faf6 	bl	800341c <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray PID_msg;
 8007e30:	4816      	ldr	r0, [pc, #88]	@ (8007e8c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007e32:	f7fb faf3 	bl	800341c <_ZN8std_msgs17Float32MultiArrayC1Ev>
sensor_msgs::Imu imu_msg;
 8007e36:	4816      	ldr	r0, [pc, #88]	@ (8007e90 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007e38:	f7fd fa16 	bl	8005268 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher vel_set("vel_set", &vel_set_msg);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4a11      	ldr	r2, [pc, #68]	@ (8007e84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007e40:	4914      	ldr	r1, [pc, #80]	@ (8007e94 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007e42:	4815      	ldr	r0, [pc, #84]	@ (8007e98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007e44:	f7fa ff06 	bl	8002c54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher vel_enc("vel_enc", &vel_enc_msg);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007e4c:	4913      	ldr	r1, [pc, #76]	@ (8007e9c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007e4e:	4814      	ldr	r0, [pc, #80]	@ (8007ea0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007e50:	f7fa ff00 	bl	8002c54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher imu("imu/raw", &imu_msg);
 8007e54:	2300      	movs	r3, #0
 8007e56:	4a0e      	ldr	r2, [pc, #56]	@ (8007e90 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007e58:	4912      	ldr	r1, [pc, #72]	@ (8007ea4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007e5a:	4813      	ldr	r0, [pc, #76]	@ (8007ea8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007e5c:	f7fa fefa 	bl	8002c54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel("cmd_vel",&cmd_vel_callback);
 8007e60:	2301      	movs	r3, #1
 8007e62:	4a12      	ldr	r2, [pc, #72]	@ (8007eac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007e64:	4912      	ldr	r1, [pc, #72]	@ (8007eb0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007e66:	4813      	ldr	r0, [pc, #76]	@ (8007eb4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007e68:	f7ff fa8c 	bl	8007384 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> cmd_PID("cmd_PID",&cmd_PID_callback);
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	4a12      	ldr	r2, [pc, #72]	@ (8007eb8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007e70:	4912      	ldr	r1, [pc, #72]	@ (8007ebc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007e72:	4813      	ldr	r0, [pc, #76]	@ (8007ec0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007e74:	f7ff faaa 	bl	80073cc <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	2000052c 	.word	0x2000052c
 8007e84:	20000e68 	.word	0x20000e68
 8007e88:	20000e98 	.word	0x20000e98
 8007e8c:	20000ec8 	.word	0x20000ec8
 8007e90:	20000ef8 	.word	0x20000ef8
 8007e94:	08011184 	.word	0x08011184
 8007e98:	20001050 	.word	0x20001050
 8007e9c:	0801118c 	.word	0x0801118c
 8007ea0:	20001064 	.word	0x20001064
 8007ea4:	08011194 	.word	0x08011194
 8007ea8:	20001078 	.word	0x20001078
 8007eac:	080061a1 	.word	0x080061a1
 8007eb0:	0801119c 	.word	0x0801119c
 8007eb4:	20001090 	.word	0x20001090
 8007eb8:	08006441 	.word	0x08006441
 8007ebc:	080111a4 	.word	0x080111a4
 8007ec0:	200010f0 	.word	0x200010f0

08007ec4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fb fb33 	bl	8003540 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	320c      	adds	r2, #12
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
  }
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  }
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	330c      	adds	r3, #12
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fb fba0 	bl	8003658 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8007f18:	4603      	mov	r3, r0
  }
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fb fba0 	bl	8003674 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8007f34:	4603      	mov	r3, r0
  }
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fc f8f6 	bl	8004140 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	3210      	adds	r2, #16
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
  }
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3310      	adds	r3, #16
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fc f8fd 	bl	800418c <_ZN13geometry_msgs5Twist7getTypeEv>
 8007f92:	4603      	mov	r3, r0
  }
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3310      	adds	r3, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fc f8fd 	bl	80041a8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8007fae:	4603      	mov	r3, r0
  }
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
    return configured_;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <_GLOBAL__sub_I_nh>:
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f7ff ff12 	bl	8007e04 <_Z41__static_initialization_and_destruction_0ii>
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fea:	2300      	movs	r3, #0
 8007fec:	607b      	str	r3, [r7, #4]
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <HAL_MspInit+0x4c>)
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8008030 <HAL_MspInit+0x4c>)
 8007ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <HAL_MspInit+0x4c>)
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008006:	2300      	movs	r3, #0
 8008008:	603b      	str	r3, [r7, #0]
 800800a:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <HAL_MspInit+0x4c>)
 800800c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800e:	4a08      	ldr	r2, [pc, #32]	@ (8008030 <HAL_MspInit+0x4c>)
 8008010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008014:	6413      	str	r3, [r2, #64]	@ 0x40
 8008016:	4b06      	ldr	r3, [pc, #24]	@ (8008030 <HAL_MspInit+0x4c>)
 8008018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	40023800 	.word	0x40023800

08008034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	@ 0x28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800803c:	f107 0314 	add.w	r3, r7, #20
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	609a      	str	r2, [r3, #8]
 8008048:	60da      	str	r2, [r3, #12]
 800804a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a21      	ldr	r2, [pc, #132]	@ (80080d8 <HAL_I2C_MspInit+0xa4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d13c      	bne.n	80080d0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	4b20      	ldr	r3, [pc, #128]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 800805c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805e:	4a1f      	ldr	r2, [pc, #124]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 8008060:	f043 0302 	orr.w	r3, r3, #2
 8008064:	6313      	str	r3, [r2, #48]	@ 0x30
 8008066:	4b1d      	ldr	r3, [pc, #116]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8008072:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8008076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008078:	2312      	movs	r3, #18
 800807a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008080:	2303      	movs	r3, #3
 8008082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008084:	2304      	movs	r3, #4
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008088:	f107 0314 	add.w	r3, r7, #20
 800808c:	4619      	mov	r1, r3
 800808e:	4814      	ldr	r0, [pc, #80]	@ (80080e0 <HAL_I2C_MspInit+0xac>)
 8008090:	f001 fc42 	bl	8009918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	4a0f      	ldr	r2, [pc, #60]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 800809e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80080a4:	4b0d      	ldr	r3, [pc, #52]	@ (80080dc <HAL_I2C_MspInit+0xa8>)
 80080a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80080b0:	2200      	movs	r2, #0
 80080b2:	2100      	movs	r1, #0
 80080b4:	201f      	movs	r0, #31
 80080b6:	f000 fd10 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80080ba:	201f      	movs	r0, #31
 80080bc:	f000 fd29 	bl	8008b12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80080c0:	2200      	movs	r2, #0
 80080c2:	2100      	movs	r1, #0
 80080c4:	2020      	movs	r0, #32
 80080c6:	f000 fd08 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80080ca:	2020      	movs	r0, #32
 80080cc:	f000 fd21 	bl	8008b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80080d0:	bf00      	nop
 80080d2:	3728      	adds	r7, #40	@ 0x28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40005400 	.word	0x40005400
 80080dc:	40023800 	.word	0x40023800
 80080e0:	40020400 	.word	0x40020400

080080e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a38      	ldr	r2, [pc, #224]	@ (80081d4 <HAL_TIM_Base_MspInit+0xf0>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d116      	bne.n	8008124 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	4b37      	ldr	r3, [pc, #220]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 80080fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fe:	4a36      	ldr	r2, [pc, #216]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	6453      	str	r3, [r2, #68]	@ 0x44
 8008106:	4b34      	ldr	r3, [pc, #208]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	2018      	movs	r0, #24
 8008118:	f000 fcdf 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800811c:	2018      	movs	r0, #24
 800811e:	f000 fcf8 	bl	8008b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8008122:	e052      	b.n	80081ca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM6)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2c      	ldr	r2, [pc, #176]	@ (80081dc <HAL_TIM_Base_MspInit+0xf8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d116      	bne.n	800815c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	4b29      	ldr	r3, [pc, #164]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	4a28      	ldr	r2, [pc, #160]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008138:	f043 0310 	orr.w	r3, r3, #16
 800813c:	6413      	str	r3, [r2, #64]	@ 0x40
 800813e:	4b26      	ldr	r3, [pc, #152]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	2036      	movs	r0, #54	@ 0x36
 8008150:	f000 fcc3 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008154:	2036      	movs	r0, #54	@ 0x36
 8008156:	f000 fcdc 	bl	8008b12 <HAL_NVIC_EnableIRQ>
}
 800815a:	e036      	b.n	80081ca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1f      	ldr	r2, [pc, #124]	@ (80081e0 <HAL_TIM_Base_MspInit+0xfc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d116      	bne.n	8008194 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 800816c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816e:	4a1a      	ldr	r2, [pc, #104]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008170:	f043 0320 	orr.w	r3, r3, #32
 8008174:	6413      	str	r3, [r2, #64]	@ 0x40
 8008176:	4b18      	ldr	r3, [pc, #96]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 8008178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008182:	2200      	movs	r2, #0
 8008184:	2100      	movs	r1, #0
 8008186:	2037      	movs	r0, #55	@ 0x37
 8008188:	f000 fca7 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800818c:	2037      	movs	r0, #55	@ 0x37
 800818e:	f000 fcc0 	bl	8008b12 <HAL_NVIC_EnableIRQ>
}
 8008192:	e01a      	b.n	80081ca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a12      	ldr	r2, [pc, #72]	@ (80081e4 <HAL_TIM_Base_MspInit+0x100>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d115      	bne.n	80081ca <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 80081a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a6:	4a0c      	ldr	r2, [pc, #48]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80081ae:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <HAL_TIM_Base_MspInit+0xf4>)
 80081b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081b6:	60bb      	str	r3, [r7, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80081ba:	2200      	movs	r2, #0
 80081bc:	2100      	movs	r1, #0
 80081be:	2018      	movs	r0, #24
 80081c0:	f000 fc8b 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80081c4:	2018      	movs	r0, #24
 80081c6:	f000 fca4 	bl	8008b12 <HAL_NVIC_EnableIRQ>
}
 80081ca:	bf00      	nop
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40023800 	.word	0x40023800
 80081dc:	40001000 	.word	0x40001000
 80081e0:	40001400 	.word	0x40001400
 80081e4:	40014000 	.word	0x40014000

080081e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b092      	sub	sp, #72	@ 0x48
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	60da      	str	r2, [r3, #12]
 80081fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008208:	d14a      	bne.n	80082a0 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	633b      	str	r3, [r7, #48]	@ 0x30
 800820e:	4b80      	ldr	r3, [pc, #512]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	4a7f      	ldr	r2, [pc, #508]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6413      	str	r3, [r2, #64]	@ 0x40
 800821a:	4b7d      	ldr	r3, [pc, #500]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	633b      	str	r3, [r7, #48]	@ 0x30
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800822a:	4b79      	ldr	r3, [pc, #484]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	4a78      	ldr	r2, [pc, #480]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6313      	str	r3, [r2, #48]	@ 0x30
 8008236:	4b76      	ldr	r3, [pc, #472]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008246:	4b72      	ldr	r3, [pc, #456]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	4a71      	ldr	r2, [pc, #452]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	6313      	str	r3, [r2, #48]	@ 0x30
 8008252:	4b6f      	ldr	r3, [pc, #444]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800825e:	2320      	movs	r3, #32
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008262:	2302      	movs	r3, #2
 8008264:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008266:	2301      	movs	r3, #1
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800826a:	2300      	movs	r3, #0
 800826c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800826e:	2301      	movs	r3, #1
 8008270:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008272:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008276:	4619      	mov	r1, r3
 8008278:	4866      	ldr	r0, [pc, #408]	@ (8008414 <HAL_TIM_Encoder_MspInit+0x22c>)
 800827a:	f001 fb4d 	bl	8009918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800827e:	2308      	movs	r3, #8
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008282:	2302      	movs	r3, #2
 8008284:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008286:	2301      	movs	r3, #1
 8008288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800828a:	2300      	movs	r3, #0
 800828c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800828e:	2301      	movs	r3, #1
 8008290:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008292:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008296:	4619      	mov	r1, r3
 8008298:	485f      	ldr	r0, [pc, #380]	@ (8008418 <HAL_TIM_Encoder_MspInit+0x230>)
 800829a:	f001 fb3d 	bl	8009918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800829e:	e0b3      	b.n	8008408 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM3)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a5d      	ldr	r2, [pc, #372]	@ (800841c <HAL_TIM_Encoder_MspInit+0x234>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d12c      	bne.n	8008304 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80082aa:	2300      	movs	r3, #0
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ae:	4b58      	ldr	r3, [pc, #352]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b2:	4a57      	ldr	r2, [pc, #348]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082b4:	f043 0302 	orr.w	r3, r3, #2
 80082b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80082ba:	4b55      	ldr	r3, [pc, #340]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c6:	2300      	movs	r3, #0
 80082c8:	623b      	str	r3, [r7, #32]
 80082ca:	4b51      	ldr	r3, [pc, #324]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	4a50      	ldr	r2, [pc, #320]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082d0:	f043 0301 	orr.w	r3, r3, #1
 80082d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80082d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	623b      	str	r3, [r7, #32]
 80082e0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80082e2:	23c0      	movs	r3, #192	@ 0xc0
 80082e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e6:	2302      	movs	r3, #2
 80082e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082ea:	2301      	movs	r3, #1
 80082ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ee:	2300      	movs	r3, #0
 80082f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80082f2:	2302      	movs	r3, #2
 80082f4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80082fa:	4619      	mov	r1, r3
 80082fc:	4845      	ldr	r0, [pc, #276]	@ (8008414 <HAL_TIM_Encoder_MspInit+0x22c>)
 80082fe:	f001 fb0b 	bl	8009918 <HAL_GPIO_Init>
}
 8008302:	e081      	b.n	8008408 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM4)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a45      	ldr	r2, [pc, #276]	@ (8008420 <HAL_TIM_Encoder_MspInit+0x238>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d14b      	bne.n	80083a6 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800830e:	2300      	movs	r3, #0
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	4b3f      	ldr	r3, [pc, #252]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008316:	4a3e      	ldr	r2, [pc, #248]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008318:	f043 0304 	orr.w	r3, r3, #4
 800831c:	6413      	str	r3, [r2, #64]	@ 0x40
 800831e:	4b3c      	ldr	r3, [pc, #240]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	4b38      	ldr	r3, [pc, #224]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	4a37      	ldr	r2, [pc, #220]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008334:	f043 0308 	orr.w	r3, r3, #8
 8008338:	6313      	str	r3, [r2, #48]	@ 0x30
 800833a:	4b35      	ldr	r3, [pc, #212]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	61bb      	str	r3, [r7, #24]
 8008344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	4b31      	ldr	r3, [pc, #196]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 800834c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834e:	4a30      	ldr	r2, [pc, #192]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008350:	f043 0302 	orr.w	r3, r3, #2
 8008354:	6313      	str	r3, [r2, #48]	@ 0x30
 8008356:	4b2e      	ldr	r3, [pc, #184]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008368:	2302      	movs	r3, #2
 800836a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800836c:	2301      	movs	r3, #1
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008370:	2300      	movs	r3, #0
 8008372:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008374:	2302      	movs	r3, #2
 8008376:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008378:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800837c:	4619      	mov	r1, r3
 800837e:	4829      	ldr	r0, [pc, #164]	@ (8008424 <HAL_TIM_Encoder_MspInit+0x23c>)
 8008380:	f001 faca 	bl	8009918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008384:	2380      	movs	r3, #128	@ 0x80
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008388:	2302      	movs	r3, #2
 800838a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800838c:	2301      	movs	r3, #1
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008390:	2300      	movs	r3, #0
 8008392:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008394:	2302      	movs	r3, #2
 8008396:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008398:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800839c:	4619      	mov	r1, r3
 800839e:	481e      	ldr	r0, [pc, #120]	@ (8008418 <HAL_TIM_Encoder_MspInit+0x230>)
 80083a0:	f001 faba 	bl	8009918 <HAL_GPIO_Init>
}
 80083a4:	e030      	b.n	8008408 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM5)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008428 <HAL_TIM_Encoder_MspInit+0x240>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d12b      	bne.n	8008408 <HAL_TIM_Encoder_MspInit+0x220>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	4b16      	ldr	r3, [pc, #88]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b8:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083ba:	f043 0308 	orr.w	r3, r3, #8
 80083be:	6413      	str	r3, [r2, #64]	@ 0x40
 80083c0:	4b13      	ldr	r3, [pc, #76]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083cc:	2300      	movs	r3, #0
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	6313      	str	r3, [r2, #48]	@ 0x30
 80083dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008410 <HAL_TIM_Encoder_MspInit+0x228>)
 80083de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80083e8:	2303      	movs	r3, #3
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ec:	2302      	movs	r3, #2
 80083ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083f0:	2301      	movs	r3, #1
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f4:	2300      	movs	r3, #0
 80083f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80083f8:	2302      	movs	r3, #2
 80083fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008400:	4619      	mov	r1, r3
 8008402:	4804      	ldr	r0, [pc, #16]	@ (8008414 <HAL_TIM_Encoder_MspInit+0x22c>)
 8008404:	f001 fa88 	bl	8009918 <HAL_GPIO_Init>
}
 8008408:	bf00      	nop
 800840a:	3748      	adds	r7, #72	@ 0x48
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40023800 	.word	0x40023800
 8008414:	40020000 	.word	0x40020000
 8008418:	40020400 	.word	0x40020400
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40020c00 	.word	0x40020c00
 8008428:	40000c00 	.word	0x40000c00

0800842c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	609a      	str	r2, [r3, #8]
 8008440:	60da      	str	r2, [r3, #12]
 8008442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a12      	ldr	r2, [pc, #72]	@ (8008494 <HAL_TIM_MspPostInit+0x68>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d11e      	bne.n	800848c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800844e:	2300      	movs	r3, #0
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	4b11      	ldr	r3, [pc, #68]	@ (8008498 <HAL_TIM_MspPostInit+0x6c>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	4a10      	ldr	r2, [pc, #64]	@ (8008498 <HAL_TIM_MspPostInit+0x6c>)
 8008458:	f043 0310 	orr.w	r3, r3, #16
 800845c:	6313      	str	r3, [r2, #48]	@ 0x30
 800845e:	4b0e      	ldr	r3, [pc, #56]	@ (8008498 <HAL_TIM_MspPostInit+0x6c>)
 8008460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	60bb      	str	r3, [r7, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800846a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800846e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008470:	2302      	movs	r3, #2
 8008472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008478:	2300      	movs	r3, #0
 800847a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800847c:	2301      	movs	r3, #1
 800847e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008480:	f107 030c 	add.w	r3, r7, #12
 8008484:	4619      	mov	r1, r3
 8008486:	4805      	ldr	r0, [pc, #20]	@ (800849c <HAL_TIM_MspPostInit+0x70>)
 8008488:	f001 fa46 	bl	8009918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800848c:	bf00      	nop
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40010000 	.word	0x40010000
 8008498:	40023800 	.word	0x40023800
 800849c:	40021000 	.word	0x40021000

080084a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	@ 0x28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	605a      	str	r2, [r3, #4]
 80084b2:	609a      	str	r2, [r3, #8]
 80084b4:	60da      	str	r2, [r3, #12]
 80084b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a4c      	ldr	r2, [pc, #304]	@ (80085f0 <HAL_UART_MspInit+0x150>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	f040 8091 	bne.w	80085e6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80084c4:	2300      	movs	r3, #0
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	4b4a      	ldr	r3, [pc, #296]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084cc:	4a49      	ldr	r2, [pc, #292]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80084d4:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	4b43      	ldr	r3, [pc, #268]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e8:	4a42      	ldr	r2, [pc, #264]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80084f0:	4b40      	ldr	r3, [pc, #256]	@ (80085f4 <HAL_UART_MspInit+0x154>)
 80084f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80084fc:	230c      	movs	r3, #12
 80084fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008500:	2302      	movs	r3, #2
 8008502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008508:	2303      	movs	r3, #3
 800850a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800850c:	2307      	movs	r3, #7
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	4619      	mov	r1, r3
 8008516:	4838      	ldr	r0, [pc, #224]	@ (80085f8 <HAL_UART_MspInit+0x158>)
 8008518:	f001 f9fe 	bl	8009918 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800851c:	4b37      	ldr	r3, [pc, #220]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 800851e:	4a38      	ldr	r2, [pc, #224]	@ (8008600 <HAL_UART_MspInit+0x160>)
 8008520:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008522:	4b36      	ldr	r3, [pc, #216]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008524:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008528:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800852a:	4b34      	ldr	r3, [pc, #208]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 800852c:	2200      	movs	r2, #0
 800852e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008530:	4b32      	ldr	r3, [pc, #200]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008532:	2200      	movs	r2, #0
 8008534:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008536:	4b31      	ldr	r3, [pc, #196]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800853c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800853e:	4b2f      	ldr	r3, [pc, #188]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008540:	2200      	movs	r2, #0
 8008542:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008544:	4b2d      	ldr	r3, [pc, #180]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008546:	2200      	movs	r2, #0
 8008548:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800854a:	4b2c      	ldr	r3, [pc, #176]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 800854c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008550:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008552:	4b2a      	ldr	r3, [pc, #168]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008554:	2200      	movs	r2, #0
 8008556:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008558:	4b28      	ldr	r3, [pc, #160]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 800855a:	2200      	movs	r2, #0
 800855c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800855e:	4827      	ldr	r0, [pc, #156]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008560:	f000 faf2 	bl	8008b48 <HAL_DMA_Init>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800856a:	f7f9 fcd1 	bl	8001f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a22      	ldr	r2, [pc, #136]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008572:	639a      	str	r2, [r3, #56]	@ 0x38
 8008574:	4a21      	ldr	r2, [pc, #132]	@ (80085fc <HAL_UART_MspInit+0x15c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800857a:	4b22      	ldr	r3, [pc, #136]	@ (8008604 <HAL_UART_MspInit+0x164>)
 800857c:	4a22      	ldr	r2, [pc, #136]	@ (8008608 <HAL_UART_MspInit+0x168>)
 800857e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8008580:	4b20      	ldr	r3, [pc, #128]	@ (8008604 <HAL_UART_MspInit+0x164>)
 8008582:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008586:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008588:	4b1e      	ldr	r3, [pc, #120]	@ (8008604 <HAL_UART_MspInit+0x164>)
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800858e:	4b1d      	ldr	r3, [pc, #116]	@ (8008604 <HAL_UART_MspInit+0x164>)
 8008590:	2200      	movs	r2, #0
 8008592:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008594:	4b1b      	ldr	r3, [pc, #108]	@ (8008604 <HAL_UART_MspInit+0x164>)
 8008596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800859a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800859c:	4b19      	ldr	r3, [pc, #100]	@ (8008604 <HAL_UART_MspInit+0x164>)
 800859e:	2200      	movs	r2, #0
 80085a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085a2:	4b18      	ldr	r3, [pc, #96]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80085a8:	4b16      	ldr	r3, [pc, #88]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80085ae:	4b15      	ldr	r3, [pc, #84]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085b4:	4b13      	ldr	r3, [pc, #76]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80085ba:	4812      	ldr	r0, [pc, #72]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085bc:	f000 fac4 	bl	8008b48 <HAL_DMA_Init>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80085c6:	f7f9 fca3 	bl	8001f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80085d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008604 <HAL_UART_MspInit+0x164>)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	2026      	movs	r0, #38	@ 0x26
 80085dc:	f000 fa7d 	bl	8008ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80085e0:	2026      	movs	r0, #38	@ 0x26
 80085e2:	f000 fa96 	bl	8008b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80085e6:	bf00      	nop
 80085e8:	3728      	adds	r7, #40	@ 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40004400 	.word	0x40004400
 80085f4:	40023800 	.word	0x40023800
 80085f8:	40020000 	.word	0x40020000
 80085fc:	20000384 	.word	0x20000384
 8008600:	40026088 	.word	0x40026088
 8008604:	200003e4 	.word	0x200003e4
 8008608:	400260a0 	.word	0x400260a0

0800860c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <NMI_Handler+0x4>

08008614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <HardFault_Handler+0x4>

0800861c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008620:	bf00      	nop
 8008622:	e7fd      	b.n	8008620 <MemManage_Handler+0x4>

08008624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008628:	bf00      	nop
 800862a:	e7fd      	b.n	8008628 <BusFault_Handler+0x4>

0800862c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <UsageFault_Handler+0x4>

08008634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008638:	bf00      	nop
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008642:	b480      	push	{r7}
 8008644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008662:	f000 f91b 	bl	800889c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008670:	4802      	ldr	r0, [pc, #8]	@ (800867c <DMA1_Stream5_IRQHandler+0x10>)
 8008672:	f000 fc01 	bl	8008e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008676:	bf00      	nop
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000384 	.word	0x20000384

08008680 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008684:	4802      	ldr	r0, [pc, #8]	@ (8008690 <DMA1_Stream6_IRQHandler+0x10>)
 8008686:	f000 fbf7 	bl	8008e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200003e4 	.word	0x200003e4

08008694 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008698:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800869a:	f004 fed3 	bl	800d444 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800869e:	4803      	ldr	r0, [pc, #12]	@ (80086ac <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80086a0:	f004 fed0 	bl	800d444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80086a4:	bf00      	nop
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20000100 	.word	0x20000100
 80086ac:	200002f8 	.word	0x200002f8

080086b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80086b4:	4802      	ldr	r0, [pc, #8]	@ (80086c0 <I2C1_EV_IRQHandler+0x10>)
 80086b6:	f001 ff49 	bl	800a54c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80086ba:	bf00      	nop
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200000ac 	.word	0x200000ac

080086c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80086c8:	4802      	ldr	r0, [pc, #8]	@ (80086d4 <I2C1_ER_IRQHandler+0x10>)
 80086ca:	f002 f892 	bl	800a7f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80086ce:	bf00      	nop
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200000ac 	.word	0x200000ac

080086d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80086dc:	4802      	ldr	r0, [pc, #8]	@ (80086e8 <USART2_IRQHandler+0x10>)
 80086de:	f005 fe59 	bl	800e394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000340 	.word	0x20000340

080086ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80086f0:	4802      	ldr	r0, [pc, #8]	@ (80086fc <TIM6_DAC_IRQHandler+0x10>)
 80086f2:	f004 fea7 	bl	800d444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80086f6:	bf00      	nop
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000268 	.word	0x20000268

08008700 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008704:	4802      	ldr	r0, [pc, #8]	@ (8008710 <TIM7_IRQHandler+0x10>)
 8008706:	f004 fe9d 	bl	800d444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200002b0 	.word	0x200002b0

08008714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800871c:	4a14      	ldr	r2, [pc, #80]	@ (8008770 <_sbrk+0x5c>)
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <_sbrk+0x60>)
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008728:	4b13      	ldr	r3, [pc, #76]	@ (8008778 <_sbrk+0x64>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008730:	4b11      	ldr	r3, [pc, #68]	@ (8008778 <_sbrk+0x64>)
 8008732:	4a12      	ldr	r2, [pc, #72]	@ (800877c <_sbrk+0x68>)
 8008734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008736:	4b10      	ldr	r3, [pc, #64]	@ (8008778 <_sbrk+0x64>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d207      	bcs.n	8008754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008744:	f008 fa4e 	bl	8010be4 <__errno>
 8008748:	4603      	mov	r3, r0
 800874a:	220c      	movs	r2, #12
 800874c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295
 8008752:	e009      	b.n	8008768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008754:	4b08      	ldr	r3, [pc, #32]	@ (8008778 <_sbrk+0x64>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <_sbrk+0x64>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	4a05      	ldr	r2, [pc, #20]	@ (8008778 <_sbrk+0x64>)
 8008764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20020000 	.word	0x20020000
 8008774:	00000400 	.word	0x00000400
 8008778:	200011b8 	.word	0x200011b8
 800877c:	20001328 	.word	0x20001328

08008780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008784:	4b06      	ldr	r3, [pc, #24]	@ (80087a0 <SystemInit+0x20>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800878a:	4a05      	ldr	r2, [pc, #20]	@ (80087a0 <SystemInit+0x20>)
 800878c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	e000ed00 	.word	0xe000ed00

080087a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80087a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80087dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80087a8:	480d      	ldr	r0, [pc, #52]	@ (80087e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80087aa:	490e      	ldr	r1, [pc, #56]	@ (80087e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80087ac:	4a0e      	ldr	r2, [pc, #56]	@ (80087e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80087ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087b0:	e002      	b.n	80087b8 <LoopCopyDataInit>

080087b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087b6:	3304      	adds	r3, #4

080087b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087bc:	d3f9      	bcc.n	80087b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087be:	4a0b      	ldr	r2, [pc, #44]	@ (80087ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80087c0:	4c0b      	ldr	r4, [pc, #44]	@ (80087f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80087c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087c4:	e001      	b.n	80087ca <LoopFillZerobss>

080087c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087c8:	3204      	adds	r2, #4

080087ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087cc:	d3fb      	bcc.n	80087c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80087ce:	f7ff ffd7 	bl	8008780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087d2:	f008 fa0d 	bl	8010bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087d6:	f7f8 fe0b 	bl	80013f0 <main>
  bx  lr    
 80087da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80087dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80087e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80087e8:	080115b8 	.word	0x080115b8
  ldr r2, =_sbss
 80087ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80087f0:	20001328 	.word	0x20001328

080087f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087f4:	e7fe      	b.n	80087f4 <ADC_IRQHandler>
	...

080087f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80087fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <HAL_Init+0x40>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0d      	ldr	r2, [pc, #52]	@ (8008838 <HAL_Init+0x40>)
 8008802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008808:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <HAL_Init+0x40>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a0a      	ldr	r2, [pc, #40]	@ (8008838 <HAL_Init+0x40>)
 800880e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008814:	4b08      	ldr	r3, [pc, #32]	@ (8008838 <HAL_Init+0x40>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a07      	ldr	r2, [pc, #28]	@ (8008838 <HAL_Init+0x40>)
 800881a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800881e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008820:	2003      	movs	r0, #3
 8008822:	f000 f94f 	bl	8008ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008826:	200f      	movs	r0, #15
 8008828:	f000 f808 	bl	800883c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800882c:	f7ff fbda 	bl	8007fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40023c00 	.word	0x40023c00

0800883c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008844:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <HAL_InitTick+0x54>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <HAL_InitTick+0x58>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	4619      	mov	r1, r3
 800884e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008852:	fbb3 f3f1 	udiv	r3, r3, r1
 8008856:	fbb2 f3f3 	udiv	r3, r2, r3
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f967 	bl	8008b2e <HAL_SYSTICK_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e00e      	b.n	8008888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d80a      	bhi.n	8008886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008870:	2200      	movs	r2, #0
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	f000 f92f 	bl	8008ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800887c:	4a06      	ldr	r2, [pc, #24]	@ (8008898 <HAL_InitTick+0x5c>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e000      	b.n	8008888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000020 	.word	0x20000020
 8008894:	20000028 	.word	0x20000028
 8008898:	20000024 	.word	0x20000024

0800889c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088a0:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <HAL_IncTick+0x20>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <HAL_IncTick+0x24>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4413      	add	r3, r2
 80088ac:	4a04      	ldr	r2, [pc, #16]	@ (80088c0 <HAL_IncTick+0x24>)
 80088ae:	6013      	str	r3, [r2, #0]
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000028 	.word	0x20000028
 80088c0:	200011bc 	.word	0x200011bc

080088c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  return uwTick;
 80088c8:	4b03      	ldr	r3, [pc, #12]	@ (80088d8 <HAL_GetTick+0x14>)
 80088ca:	681b      	ldr	r3, [r3, #0]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	200011bc 	.word	0x200011bc

080088dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088e4:	f7ff ffee 	bl	80088c4 <HAL_GetTick>
 80088e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d005      	beq.n	8008902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80088f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <HAL_Delay+0x44>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008902:	bf00      	nop
 8008904:	f7ff ffde 	bl	80088c4 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	429a      	cmp	r2, r3
 8008912:	d8f7      	bhi.n	8008904 <HAL_Delay+0x28>
  {
  }
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000028 	.word	0x20000028

08008924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008934:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <__NVIC_SetPriorityGrouping+0x44>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008940:	4013      	ands	r3, r2
 8008942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800894c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008956:	4a04      	ldr	r2, [pc, #16]	@ (8008968 <__NVIC_SetPriorityGrouping+0x44>)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	60d3      	str	r3, [r2, #12]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	e000ed00 	.word	0xe000ed00

0800896c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008970:	4b04      	ldr	r3, [pc, #16]	@ (8008984 <__NVIC_GetPriorityGrouping+0x18>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	f003 0307 	and.w	r3, r3, #7
}
 800897a:	4618      	mov	r0, r3
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	e000ed00 	.word	0xe000ed00

08008988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008996:	2b00      	cmp	r3, #0
 8008998:	db0b      	blt.n	80089b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	f003 021f 	and.w	r2, r3, #31
 80089a0:	4907      	ldr	r1, [pc, #28]	@ (80089c0 <__NVIC_EnableIRQ+0x38>)
 80089a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	2001      	movs	r0, #1
 80089aa:	fa00 f202 	lsl.w	r2, r0, r2
 80089ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000e100 	.word	0xe000e100

080089c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	db0a      	blt.n	80089ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	490c      	ldr	r1, [pc, #48]	@ (8008a10 <__NVIC_SetPriority+0x4c>)
 80089de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e2:	0112      	lsls	r2, r2, #4
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	440b      	add	r3, r1
 80089e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089ec:	e00a      	b.n	8008a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	4908      	ldr	r1, [pc, #32]	@ (8008a14 <__NVIC_SetPriority+0x50>)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	3b04      	subs	r3, #4
 80089fc:	0112      	lsls	r2, r2, #4
 80089fe:	b2d2      	uxtb	r2, r2
 8008a00:	440b      	add	r3, r1
 8008a02:	761a      	strb	r2, [r3, #24]
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	e000e100 	.word	0xe000e100
 8008a14:	e000ed00 	.word	0xe000ed00

08008a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b089      	sub	sp, #36	@ 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f1c3 0307 	rsb	r3, r3, #7
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	bf28      	it	cs
 8008a36:	2304      	movcs	r3, #4
 8008a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	2b06      	cmp	r3, #6
 8008a40:	d902      	bls.n	8008a48 <NVIC_EncodePriority+0x30>
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	3b03      	subs	r3, #3
 8008a46:	e000      	b.n	8008a4a <NVIC_EncodePriority+0x32>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43da      	mvns	r2, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	401a      	ands	r2, r3
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a60:	f04f 31ff 	mov.w	r1, #4294967295
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6a:	43d9      	mvns	r1, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a70:	4313      	orrs	r3, r2
         );
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3724      	adds	r7, #36	@ 0x24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a90:	d301      	bcc.n	8008a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a92:	2301      	movs	r3, #1
 8008a94:	e00f      	b.n	8008ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a96:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac0 <SysTick_Config+0x40>)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a9e:	210f      	movs	r1, #15
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	f7ff ff8e 	bl	80089c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <SysTick_Config+0x40>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008aae:	4b04      	ldr	r3, [pc, #16]	@ (8008ac0 <SysTick_Config+0x40>)
 8008ab0:	2207      	movs	r2, #7
 8008ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	e000e010 	.word	0xe000e010

08008ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff ff29 	bl	8008924 <__NVIC_SetPriorityGrouping>
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
 8008ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008aec:	f7ff ff3e 	bl	800896c <__NVIC_GetPriorityGrouping>
 8008af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	6978      	ldr	r0, [r7, #20]
 8008af8:	f7ff ff8e 	bl	8008a18 <NVIC_EncodePriority>
 8008afc:	4602      	mov	r2, r0
 8008afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff ff5d 	bl	80089c4 <__NVIC_SetPriority>
}
 8008b0a:	bf00      	nop
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	4603      	mov	r3, r0
 8008b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff ff31 	bl	8008988 <__NVIC_EnableIRQ>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ffa2 	bl	8008a80 <SysTick_Config>
 8008b3c:	4603      	mov	r3, r0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008b54:	f7ff feb6 	bl	80088c4 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e099      	b.n	8008c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0201 	bic.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b84:	e00f      	b.n	8008ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b86:	f7ff fe9d 	bl	80088c4 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b05      	cmp	r3, #5
 8008b92:	d908      	bls.n	8008ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e078      	b.n	8008c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e8      	bne.n	8008b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4b38      	ldr	r3, [pc, #224]	@ (8008ca0 <HAL_DMA_Init+0x158>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d107      	bne.n	8008c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0307 	bic.w	r3, r3, #7
 8008c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d117      	bne.n	8008c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00e      	beq.n	8008c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fb0f 	bl	8009270 <DMA_CheckFifoParam>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2240      	movs	r2, #64	@ 0x40
 8008c5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008c66:	2301      	movs	r3, #1
 8008c68:	e016      	b.n	8008c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fac6 	bl	8009204 <DMA_CalcBaseAndBitshift>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c80:	223f      	movs	r2, #63	@ 0x3f
 8008c82:	409a      	lsls	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	f010803f 	.word	0xf010803f

08008ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_DMA_Start_IT+0x26>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e040      	b.n	8008d4c <HAL_DMA_Start_IT+0xa8>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d12f      	bne.n	8008d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fa58 	bl	80091a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cfc:	223f      	movs	r2, #63	@ 0x3f
 8008cfe:	409a      	lsls	r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0216 	orr.w	r2, r2, #22
 8008d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d007      	beq.n	8008d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0208 	orr.w	r2, r2, #8
 8008d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	e005      	b.n	8008d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008d46:	2302      	movs	r3, #2
 8008d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008d62:	f7ff fdaf 	bl	80088c4 <HAL_GetTick>
 8008d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d008      	beq.n	8008d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2280      	movs	r2, #128	@ 0x80
 8008d78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e052      	b.n	8008e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0216 	bic.w	r2, r2, #22
 8008d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	695a      	ldr	r2, [r3, #20]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d103      	bne.n	8008db6 <HAL_DMA_Abort+0x62>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0208 	bic.w	r2, r2, #8
 8008dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0201 	bic.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008dd6:	e013      	b.n	8008e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008dd8:	f7ff fd74 	bl	80088c4 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d90c      	bls.n	8008e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2203      	movs	r2, #3
 8008df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e015      	b.n	8008e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e4      	bne.n	8008dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e12:	223f      	movs	r2, #63	@ 0x3f
 8008e14:	409a      	lsls	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d004      	beq.n	8008e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2280      	movs	r2, #128	@ 0x80
 8008e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e00c      	b.n	8008e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2205      	movs	r2, #5
 8008e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e84:	4b8e      	ldr	r3, [pc, #568]	@ (80090c0 <HAL_DMA_IRQHandler+0x248>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a8e      	ldr	r2, [pc, #568]	@ (80090c4 <HAL_DMA_IRQHandler+0x24c>)
 8008e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8e:	0a9b      	lsrs	r3, r3, #10
 8008e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	409a      	lsls	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01a      	beq.n	8008ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d013      	beq.n	8008ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0204 	bic.w	r2, r2, #4
 8008eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008edc:	f043 0201 	orr.w	r2, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ee8:	2201      	movs	r2, #1
 8008eea:	409a      	lsls	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d012      	beq.n	8008f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f06:	2201      	movs	r2, #1
 8008f08:	409a      	lsls	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	f043 0202 	orr.w	r2, r3, #2
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f1e:	2204      	movs	r2, #4
 8008f20:	409a      	lsls	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4013      	ands	r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d012      	beq.n	8008f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	f043 0204 	orr.w	r2, r3, #4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f54:	2210      	movs	r2, #16
 8008f56:	409a      	lsls	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d043      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03c      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f72:	2210      	movs	r2, #16
 8008f74:	409a      	lsls	r2, r3
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d018      	beq.n	8008fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d108      	bne.n	8008fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d024      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
 8008fa6:	e01f      	b.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01b      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
 8008fb8:	e016      	b.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d107      	bne.n	8008fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0208 	bic.w	r2, r2, #8
 8008fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fec:	2220      	movs	r2, #32
 8008fee:	409a      	lsls	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 808f 	beq.w	8009118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0310 	and.w	r3, r3, #16
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8087 	beq.w	8009118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800900e:	2220      	movs	r2, #32
 8009010:	409a      	lsls	r2, r3
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b05      	cmp	r3, #5
 8009020:	d136      	bne.n	8009090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0216 	bic.w	r2, r2, #22
 8009030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <HAL_DMA_IRQHandler+0x1da>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0208 	bic.w	r2, r2, #8
 8009060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009066:	223f      	movs	r2, #63	@ 0x3f
 8009068:	409a      	lsls	r2, r3
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009082:	2b00      	cmp	r3, #0
 8009084:	d07e      	beq.n	8009184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
        }
        return;
 800908e:	e079      	b.n	8009184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01d      	beq.n	80090da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10d      	bne.n	80090c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d031      	beq.n	8009118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
 80090bc:	e02c      	b.n	8009118 <HAL_DMA_IRQHandler+0x2a0>
 80090be:	bf00      	nop
 80090c0:	20000020 	.word	0x20000020
 80090c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d023      	beq.n	8009118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
 80090d8:	e01e      	b.n	8009118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10f      	bne.n	8009108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0210 	bic.w	r2, r2, #16
 80090f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911c:	2b00      	cmp	r3, #0
 800911e:	d032      	beq.n	8009186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d022      	beq.n	8009172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2205      	movs	r2, #5
 8009130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0201 	bic.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	3301      	adds	r3, #1
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	429a      	cmp	r2, r3
 800914e:	d307      	bcc.n	8009160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f2      	bne.n	8009144 <HAL_DMA_IRQHandler+0x2cc>
 800915e:	e000      	b.n	8009162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d005      	beq.n	8009186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
 8009182:	e000      	b.n	8009186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009184:	bf00      	nop
    }
  }
}
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800919a:	b2db      	uxtb	r3, r3
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b40      	cmp	r3, #64	@ 0x40
 80091d4:	d108      	bne.n	80091e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80091e6:	e007      	b.n	80091f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	60da      	str	r2, [r3, #12]
}
 80091f8:	bf00      	nop
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	3b10      	subs	r3, #16
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <DMA_CalcBaseAndBitshift+0x64>)
 8009216:	fba2 2303 	umull	r2, r3, r2, r3
 800921a:	091b      	lsrs	r3, r3, #4
 800921c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800921e:	4a13      	ldr	r2, [pc, #76]	@ (800926c <DMA_CalcBaseAndBitshift+0x68>)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d909      	bls.n	8009246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	659a      	str	r2, [r3, #88]	@ 0x58
 8009244:	e007      	b.n	8009256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800924e:	f023 0303 	bic.w	r3, r3, #3
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	aaaaaaab 	.word	0xaaaaaaab
 800926c:	08011388 	.word	0x08011388

08009270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11f      	bne.n	80092ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d856      	bhi.n	800933e <DMA_CheckFifoParam+0xce>
 8009290:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <DMA_CheckFifoParam+0x28>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092a9 	.word	0x080092a9
 800929c:	080092bb 	.word	0x080092bb
 80092a0:	080092a9 	.word	0x080092a9
 80092a4:	0800933f 	.word	0x0800933f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d046      	beq.n	8009342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092b8:	e043      	b.n	8009342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80092c2:	d140      	bne.n	8009346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092c8:	e03d      	b.n	8009346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d2:	d121      	bne.n	8009318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d837      	bhi.n	800934a <DMA_CheckFifoParam+0xda>
 80092da:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <DMA_CheckFifoParam+0x70>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	080092f1 	.word	0x080092f1
 80092e4:	080092f7 	.word	0x080092f7
 80092e8:	080092f1 	.word	0x080092f1
 80092ec:	08009309 	.word	0x08009309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
      break;
 80092f4:	e030      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d025      	beq.n	800934e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009306:	e022      	b.n	800934e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009310:	d11f      	bne.n	8009352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009316:	e01c      	b.n	8009352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d903      	bls.n	8009326 <DMA_CheckFifoParam+0xb6>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b03      	cmp	r3, #3
 8009322:	d003      	beq.n	800932c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009324:	e018      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e015      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00e      	beq.n	8009356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
      break;
 800933c:	e00b      	b.n	8009356 <DMA_CheckFifoParam+0xe6>
      break;
 800933e:	bf00      	nop
 8009340:	e00a      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;
 8009342:	bf00      	nop
 8009344:	e008      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;
 8009346:	bf00      	nop
 8009348:	e006      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;
 800934a:	bf00      	nop
 800934c:	e004      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;
 800934e:	bf00      	nop
 8009350:	e002      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;   
 8009352:	bf00      	nop
 8009354:	e000      	b.n	8009358 <DMA_CheckFifoParam+0xe8>
      break;
 8009356:	bf00      	nop
    }
  } 
  
  return status; 
 8009358:	7bfb      	ldrb	r3, [r7, #15]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop

08009368 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800937a:	4b23      	ldr	r3, [pc, #140]	@ (8009408 <HAL_FLASH_Program+0xa0>)
 800937c:	7e1b      	ldrb	r3, [r3, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_FLASH_Program+0x1e>
 8009382:	2302      	movs	r3, #2
 8009384:	e03b      	b.n	80093fe <HAL_FLASH_Program+0x96>
 8009386:	4b20      	ldr	r3, [pc, #128]	@ (8009408 <HAL_FLASH_Program+0xa0>)
 8009388:	2201      	movs	r2, #1
 800938a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800938c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009390:	f000 f870 	bl	8009474 <FLASH_WaitForLastOperation>
 8009394:	4603      	mov	r3, r0
 8009396:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d12b      	bne.n	80093f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80093a4:	783b      	ldrb	r3, [r7, #0]
 80093a6:	4619      	mov	r1, r3
 80093a8:	68b8      	ldr	r0, [r7, #8]
 80093aa:	f000 f91b 	bl	80095e4 <FLASH_Program_Byte>
 80093ae:	e016      	b.n	80093de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d105      	bne.n	80093c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80093b6:	883b      	ldrh	r3, [r7, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	68b8      	ldr	r0, [r7, #8]
 80093bc:	f000 f8ee 	bl	800959c <FLASH_Program_HalfWord>
 80093c0:	e00d      	b.n	80093de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d105      	bne.n	80093d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	4619      	mov	r1, r3
 80093cc:	68b8      	ldr	r0, [r7, #8]
 80093ce:	f000 f8c3 	bl	8009558 <FLASH_Program_Word>
 80093d2:	e004      	b.n	80093de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80093d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d8:	68b8      	ldr	r0, [r7, #8]
 80093da:	f000 f88b 	bl	80094f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093e2:	f000 f847 	bl	8009474 <FLASH_WaitForLastOperation>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80093ea:	4b08      	ldr	r3, [pc, #32]	@ (800940c <HAL_FLASH_Program+0xa4>)
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	4a07      	ldr	r2, [pc, #28]	@ (800940c <HAL_FLASH_Program+0xa4>)
 80093f0:	f023 0301 	bic.w	r3, r3, #1
 80093f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80093f6:	4b04      	ldr	r3, [pc, #16]	@ (8009408 <HAL_FLASH_Program+0xa0>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200011c0 	.word	0x200011c0
 800940c:	40023c00 	.word	0x40023c00

08009410 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800941a:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <HAL_FLASH_Unlock+0x38>)
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	da0b      	bge.n	800943a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009422:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <HAL_FLASH_Unlock+0x38>)
 8009424:	4a09      	ldr	r2, [pc, #36]	@ (800944c <HAL_FLASH_Unlock+0x3c>)
 8009426:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009428:	4b07      	ldr	r3, [pc, #28]	@ (8009448 <HAL_FLASH_Unlock+0x38>)
 800942a:	4a09      	ldr	r2, [pc, #36]	@ (8009450 <HAL_FLASH_Unlock+0x40>)
 800942c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800942e:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <HAL_FLASH_Unlock+0x38>)
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	da01      	bge.n	800943a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800943a:	79fb      	ldrb	r3, [r7, #7]
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	40023c00 	.word	0x40023c00
 800944c:	45670123 	.word	0x45670123
 8009450:	cdef89ab 	.word	0xcdef89ab

08009454 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <HAL_FLASH_Lock+0x1c>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	4a04      	ldr	r2, [pc, #16]	@ (8009470 <HAL_FLASH_Lock+0x1c>)
 800945e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009462:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40023c00 	.word	0x40023c00

08009474 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009480:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <FLASH_WaitForLastOperation+0x78>)
 8009482:	2200      	movs	r2, #0
 8009484:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009486:	f7ff fa1d 	bl	80088c4 <HAL_GetTick>
 800948a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800948c:	e010      	b.n	80094b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009494:	d00c      	beq.n	80094b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d007      	beq.n	80094ac <FLASH_WaitForLastOperation+0x38>
 800949c:	f7ff fa12 	bl	80088c4 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d201      	bcs.n	80094b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e019      	b.n	80094e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80094b0:	4b0f      	ldr	r3, [pc, #60]	@ (80094f0 <FLASH_WaitForLastOperation+0x7c>)
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e8      	bne.n	800948e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <FLASH_WaitForLastOperation+0x7c>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80094c8:	4b09      	ldr	r3, [pc, #36]	@ (80094f0 <FLASH_WaitForLastOperation+0x7c>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80094ce:	4b08      	ldr	r3, [pc, #32]	@ (80094f0 <FLASH_WaitForLastOperation+0x7c>)
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80094da:	f000 f8a5 	bl	8009628 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
  
}  
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200011c0 	.word	0x200011c0
 80094f0:	40023c00 	.word	0x40023c00

080094f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009500:	4b14      	ldr	r3, [pc, #80]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	4a13      	ldr	r2, [pc, #76]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 8009506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800950c:	4b11      	ldr	r3, [pc, #68]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	4a10      	ldr	r2, [pc, #64]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 8009512:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009518:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	4a0d      	ldr	r2, [pc, #52]	@ (8009554 <FLASH_Program_DoubleWord+0x60>)
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800952a:	f3bf 8f6f 	isb	sy
}
 800952e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	000a      	movs	r2, r1
 800953e:	2300      	movs	r3, #0
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	3104      	adds	r1, #4
 8009544:	4613      	mov	r3, r2
 8009546:	600b      	str	r3, [r1, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	40023c00 	.word	0x40023c00

08009558 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009562:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <FLASH_Program_Word+0x40>)
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	4a0c      	ldr	r2, [pc, #48]	@ (8009598 <FLASH_Program_Word+0x40>)
 8009568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800956c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800956e:	4b0a      	ldr	r3, [pc, #40]	@ (8009598 <FLASH_Program_Word+0x40>)
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	4a09      	ldr	r2, [pc, #36]	@ (8009598 <FLASH_Program_Word+0x40>)
 8009574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009578:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800957a:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <FLASH_Program_Word+0x40>)
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	4a06      	ldr	r2, [pc, #24]	@ (8009598 <FLASH_Program_Word+0x40>)
 8009580:	f043 0301 	orr.w	r3, r3, #1
 8009584:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	601a      	str	r2, [r3, #0]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	40023c00 	.word	0x40023c00

0800959c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80095a8:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4a0c      	ldr	r2, [pc, #48]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80095b4:	4b0a      	ldr	r3, [pc, #40]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4a09      	ldr	r2, [pc, #36]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	4a06      	ldr	r2, [pc, #24]	@ (80095e0 <FLASH_Program_HalfWord+0x44>)
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	887a      	ldrh	r2, [r7, #2]
 80095d0:	801a      	strh	r2, [r3, #0]
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40023c00 	.word	0x40023c00

080095e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80095f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009624 <FLASH_Program_Byte+0x40>)
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009624 <FLASH_Program_Byte+0x40>)
 80095f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80095fc:	4b09      	ldr	r3, [pc, #36]	@ (8009624 <FLASH_Program_Byte+0x40>)
 80095fe:	4a09      	ldr	r2, [pc, #36]	@ (8009624 <FLASH_Program_Byte+0x40>)
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009604:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <FLASH_Program_Byte+0x40>)
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	4a06      	ldr	r2, [pc, #24]	@ (8009624 <FLASH_Program_Byte+0x40>)
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	701a      	strb	r2, [r3, #0]
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40023c00 	.word	0x40023c00

08009628 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800962c:	4b27      	ldr	r3, [pc, #156]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009638:	4b25      	ldr	r3, [pc, #148]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	f043 0310 	orr.w	r3, r3, #16
 8009640:	4a23      	ldr	r2, [pc, #140]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 8009642:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009644:	4b21      	ldr	r3, [pc, #132]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 8009646:	2210      	movs	r2, #16
 8009648:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800964a:	4b20      	ldr	r3, [pc, #128]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d008      	beq.n	8009668 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009656:	4b1e      	ldr	r3, [pc, #120]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	f043 0308 	orr.w	r3, r3, #8
 800965e:	4a1c      	ldr	r2, [pc, #112]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 8009660:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009662:	4b1a      	ldr	r3, [pc, #104]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 8009664:	2220      	movs	r2, #32
 8009666:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009668:	4b18      	ldr	r3, [pc, #96]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009674:	4b16      	ldr	r3, [pc, #88]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	f043 0304 	orr.w	r3, r3, #4
 800967c:	4a14      	ldr	r2, [pc, #80]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 800967e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009680:	4b12      	ldr	r3, [pc, #72]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 8009682:	2240      	movs	r2, #64	@ 0x40
 8009684:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009686:	4b11      	ldr	r3, [pc, #68]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968e:	2b00      	cmp	r3, #0
 8009690:	d008      	beq.n	80096a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f043 0302 	orr.w	r3, r3, #2
 800969a:	4a0d      	ldr	r2, [pc, #52]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 800969c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800969e:	4b0b      	ldr	r3, [pc, #44]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 80096a0:	2280      	movs	r2, #128	@ 0x80
 80096a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80096a4:	4b09      	ldr	r3, [pc, #36]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d008      	beq.n	80096c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80096b0:	4b07      	ldr	r3, [pc, #28]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f043 0320 	orr.w	r3, r3, #32
 80096b8:	4a05      	ldr	r2, [pc, #20]	@ (80096d0 <FLASH_SetErrorCode+0xa8>)
 80096ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80096bc:	4b03      	ldr	r3, [pc, #12]	@ (80096cc <FLASH_SetErrorCode+0xa4>)
 80096be:	2202      	movs	r2, #2
 80096c0:	60da      	str	r2, [r3, #12]
  }
}
 80096c2:	bf00      	nop
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40023c00 	.word	0x40023c00
 80096d0:	200011c0 	.word	0x200011c0

080096d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80096e6:	4b31      	ldr	r3, [pc, #196]	@ (80097ac <HAL_FLASHEx_Erase+0xd8>)
 80096e8:	7e1b      	ldrb	r3, [r3, #24]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_FLASHEx_Erase+0x1e>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e058      	b.n	80097a4 <HAL_FLASHEx_Erase+0xd0>
 80096f2:	4b2e      	ldr	r3, [pc, #184]	@ (80097ac <HAL_FLASHEx_Erase+0xd8>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80096f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80096fc:	f7ff feba 	bl	8009474 <FLASH_WaitForLastOperation>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d148      	bne.n	800979c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	f04f 32ff 	mov.w	r2, #4294967295
 8009710:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d115      	bne.n	8009746 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f000 f844 	bl	80097b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800972c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009730:	f7ff fea0 	bl	8009474 <FLASH_WaitForLastOperation>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009738:	4b1d      	ldr	r3, [pc, #116]	@ (80097b0 <HAL_FLASHEx_Erase+0xdc>)
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	4a1c      	ldr	r2, [pc, #112]	@ (80097b0 <HAL_FLASHEx_Erase+0xdc>)
 800973e:	f023 0304 	bic.w	r3, r3, #4
 8009742:	6113      	str	r3, [r2, #16]
 8009744:	e028      	b.n	8009798 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	60bb      	str	r3, [r7, #8]
 800974c:	e01c      	b.n	8009788 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	4619      	mov	r1, r3
 8009756:	68b8      	ldr	r0, [r7, #8]
 8009758:	f000 f850 	bl	80097fc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800975c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009760:	f7ff fe88 	bl	8009474 <FLASH_WaitForLastOperation>
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009768:	4b11      	ldr	r3, [pc, #68]	@ (80097b0 <HAL_FLASHEx_Erase+0xdc>)
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	4a10      	ldr	r2, [pc, #64]	@ (80097b0 <HAL_FLASHEx_Erase+0xdc>)
 800976e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8009772:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	601a      	str	r2, [r3, #0]
          break;
 8009780:	e00a      	b.n	8009798 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3301      	adds	r3, #1
 8009786:	60bb      	str	r3, [r7, #8]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68da      	ldr	r2, [r3, #12]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	4413      	add	r3, r2
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	d3da      	bcc.n	800974e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009798:	f000 f878 	bl	800988c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800979c:	4b03      	ldr	r3, [pc, #12]	@ (80097ac <HAL_FLASHEx_Erase+0xd8>)
 800979e:	2200      	movs	r2, #0
 80097a0:	761a      	strb	r2, [r3, #24]

  return status;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200011c0 	.word	0x200011c0
 80097b0:	40023c00 	.word	0x40023c00

080097b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80097c0:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	4a0c      	ldr	r2, [pc, #48]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	4a09      	ldr	r2, [pc, #36]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097d2:	f043 0304 	orr.w	r3, r3, #4
 80097d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80097d8:	4b07      	ldr	r3, [pc, #28]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	4313      	orrs	r3, r2
 80097e2:	4a05      	ldr	r2, [pc, #20]	@ (80097f8 <FLASH_MassErase+0x44>)
 80097e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097e8:	6113      	str	r3, [r2, #16]
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	40023c00 	.word	0x40023c00

080097fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	e010      	b.n	800983a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d103      	bne.n	8009826 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800981e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e009      	b.n	800983a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d103      	bne.n	8009834 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800982c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	e002      	b.n	800983a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009834:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009838:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800983a:	4b13      	ldr	r3, [pc, #76]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	4a12      	ldr	r2, [pc, #72]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009844:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009846:	4b10      	ldr	r3, [pc, #64]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	490f      	ldr	r1, [pc, #60]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	4a0c      	ldr	r2, [pc, #48]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009858:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800985c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800985e:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	4313      	orrs	r3, r2
 8009868:	4a07      	ldr	r2, [pc, #28]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 800986a:	f043 0302 	orr.w	r3, r3, #2
 800986e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009870:	4b05      	ldr	r3, [pc, #20]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4a04      	ldr	r2, [pc, #16]	@ (8009888 <FLASH_Erase_Sector+0x8c>)
 8009876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800987a:	6113      	str	r3, [r2, #16]
}
 800987c:	bf00      	nop
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	40023c00 	.word	0x40023c00

0800988c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009890:	4b20      	ldr	r3, [pc, #128]	@ (8009914 <FLASH_FlushCaches+0x88>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800989c:	4b1d      	ldr	r3, [pc, #116]	@ (8009914 <FLASH_FlushCaches+0x88>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098a2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098a6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80098a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a19      	ldr	r2, [pc, #100]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	4b17      	ldr	r3, [pc, #92]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a16      	ldr	r2, [pc, #88]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098be:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098c0:	4b14      	ldr	r3, [pc, #80]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a13      	ldr	r2, [pc, #76]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80098ca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80098cc:	4b11      	ldr	r3, [pc, #68]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d017      	beq.n	8009908 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80098d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098e2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80098e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	4b08      	ldr	r3, [pc, #32]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a07      	ldr	r2, [pc, #28]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098fa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <FLASH_FlushCaches+0x88>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a04      	ldr	r2, [pc, #16]	@ (8009914 <FLASH_FlushCaches+0x88>)
 8009902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009906:	6013      	str	r3, [r2, #0]
  }
}
 8009908:	bf00      	nop
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40023c00 	.word	0x40023c00

08009918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	@ 0x24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800992a:	2300      	movs	r3, #0
 800992c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800992e:	2300      	movs	r3, #0
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	e16b      	b.n	8009c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009934:	2201      	movs	r2, #1
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4013      	ands	r3, r2
 8009946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	429a      	cmp	r2, r3
 800994e:	f040 815a 	bne.w	8009c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b01      	cmp	r3, #1
 800995c:	d005      	beq.n	800996a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009966:	2b02      	cmp	r3, #2
 8009968:	d130      	bne.n	80099cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	2203      	movs	r2, #3
 8009976:	fa02 f303 	lsl.w	r3, r2, r3
 800997a:	43db      	mvns	r3, r3
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	4013      	ands	r3, r2
 8009980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	fa02 f303 	lsl.w	r3, r2, r3
 800998e:	69ba      	ldr	r2, [r7, #24]
 8009990:	4313      	orrs	r3, r2
 8009992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099a0:	2201      	movs	r2, #1
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	43db      	mvns	r3, r3
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	4013      	ands	r3, r2
 80099ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	091b      	lsrs	r3, r3, #4
 80099b6:	f003 0201 	and.w	r2, r3, #1
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	69ba      	ldr	r2, [r7, #24]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d017      	beq.n	8009a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	2203      	movs	r2, #3
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	43db      	mvns	r3, r3
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	4013      	ands	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d123      	bne.n	8009a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	08da      	lsrs	r2, r3, #3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3208      	adds	r2, #8
 8009a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	220f      	movs	r2, #15
 8009a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a30:	43db      	mvns	r3, r3
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	4013      	ands	r3, r2
 8009a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	fa02 f303 	lsl.w	r3, r2, r3
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	08da      	lsrs	r2, r3, #3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3208      	adds	r2, #8
 8009a56:	69b9      	ldr	r1, [r7, #24]
 8009a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	2203      	movs	r2, #3
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	43db      	mvns	r3, r3
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	4013      	ands	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f003 0203 	and.w	r2, r3, #3
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 80b4 	beq.w	8009c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	4b60      	ldr	r3, [pc, #384]	@ (8009c24 <HAL_GPIO_Init+0x30c>)
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8009c24 <HAL_GPIO_Init+0x30c>)
 8009aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8009aae:	4b5d      	ldr	r3, [pc, #372]	@ (8009c24 <HAL_GPIO_Init+0x30c>)
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009aba:	4a5b      	ldr	r2, [pc, #364]	@ (8009c28 <HAL_GPIO_Init+0x310>)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	089b      	lsrs	r3, r3, #2
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	220f      	movs	r2, #15
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	43db      	mvns	r3, r3
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	4013      	ands	r3, r2
 8009adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a52      	ldr	r2, [pc, #328]	@ (8009c2c <HAL_GPIO_Init+0x314>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d02b      	beq.n	8009b3e <HAL_GPIO_Init+0x226>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a51      	ldr	r2, [pc, #324]	@ (8009c30 <HAL_GPIO_Init+0x318>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d025      	beq.n	8009b3a <HAL_GPIO_Init+0x222>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a50      	ldr	r2, [pc, #320]	@ (8009c34 <HAL_GPIO_Init+0x31c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01f      	beq.n	8009b36 <HAL_GPIO_Init+0x21e>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a4f      	ldr	r2, [pc, #316]	@ (8009c38 <HAL_GPIO_Init+0x320>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d019      	beq.n	8009b32 <HAL_GPIO_Init+0x21a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a4e      	ldr	r2, [pc, #312]	@ (8009c3c <HAL_GPIO_Init+0x324>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <HAL_GPIO_Init+0x216>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a4d      	ldr	r2, [pc, #308]	@ (8009c40 <HAL_GPIO_Init+0x328>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00d      	beq.n	8009b2a <HAL_GPIO_Init+0x212>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a4c      	ldr	r2, [pc, #304]	@ (8009c44 <HAL_GPIO_Init+0x32c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <HAL_GPIO_Init+0x20e>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a4b      	ldr	r2, [pc, #300]	@ (8009c48 <HAL_GPIO_Init+0x330>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d101      	bne.n	8009b22 <HAL_GPIO_Init+0x20a>
 8009b1e:	2307      	movs	r3, #7
 8009b20:	e00e      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b22:	2308      	movs	r3, #8
 8009b24:	e00c      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b26:	2306      	movs	r3, #6
 8009b28:	e00a      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b2a:	2305      	movs	r3, #5
 8009b2c:	e008      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b2e:	2304      	movs	r3, #4
 8009b30:	e006      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b32:	2303      	movs	r3, #3
 8009b34:	e004      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e002      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <HAL_GPIO_Init+0x228>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	f002 0203 	and.w	r2, r2, #3
 8009b46:	0092      	lsls	r2, r2, #2
 8009b48:	4093      	lsls	r3, r2
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b50:	4935      	ldr	r1, [pc, #212]	@ (8009c28 <HAL_GPIO_Init+0x310>)
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	3302      	adds	r3, #2
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	43db      	mvns	r3, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b82:	4a32      	ldr	r2, [pc, #200]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b88:	4b30      	ldr	r3, [pc, #192]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4013      	ands	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009bac:	4a27      	ldr	r2, [pc, #156]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009bb2:	4b26      	ldr	r3, [pc, #152]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	43db      	mvns	r3, r3
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	43db      	mvns	r3, r3
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	4013      	ands	r3, r2
 8009bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c00:	4a12      	ldr	r2, [pc, #72]	@ (8009c4c <HAL_GPIO_Init+0x334>)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	2b0f      	cmp	r3, #15
 8009c10:	f67f ae90 	bls.w	8009934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3724      	adds	r7, #36	@ 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40023800 	.word	0x40023800
 8009c28:	40013800 	.word	0x40013800
 8009c2c:	40020000 	.word	0x40020000
 8009c30:	40020400 	.word	0x40020400
 8009c34:	40020800 	.word	0x40020800
 8009c38:	40020c00 	.word	0x40020c00
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	40021400 	.word	0x40021400
 8009c44:	40021800 	.word	0x40021800
 8009c48:	40021c00 	.word	0x40021c00
 8009c4c:	40013c00 	.word	0x40013c00

08009c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	807b      	strh	r3, [r7, #2]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009c60:	787b      	ldrb	r3, [r7, #1]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c66:	887a      	ldrh	r2, [r7, #2]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009c6c:	e003      	b.n	8009c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009c6e:	887b      	ldrh	r3, [r7, #2]
 8009c70:	041a      	lsls	r2, r3, #16
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	619a      	str	r2, [r3, #24]
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e12b      	b.n	8009eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7fe f9c2 	bl	8008034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2224      	movs	r2, #36	@ 0x24
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 0201 	bic.w	r2, r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ce8:	f003 f86e 	bl	800cdc8 <HAL_RCC_GetPCLK1Freq>
 8009cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4a81      	ldr	r2, [pc, #516]	@ (8009ef8 <HAL_I2C_Init+0x274>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d807      	bhi.n	8009d08 <HAL_I2C_Init+0x84>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a80      	ldr	r2, [pc, #512]	@ (8009efc <HAL_I2C_Init+0x278>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	bf94      	ite	ls
 8009d00:	2301      	movls	r3, #1
 8009d02:	2300      	movhi	r3, #0
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	e006      	b.n	8009d16 <HAL_I2C_Init+0x92>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8009f00 <HAL_I2C_Init+0x27c>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bf94      	ite	ls
 8009d10:	2301      	movls	r3, #1
 8009d12:	2300      	movhi	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e0e7      	b.n	8009eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4a78      	ldr	r2, [pc, #480]	@ (8009f04 <HAL_I2C_Init+0x280>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	0c9b      	lsrs	r3, r3, #18
 8009d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8009ef8 <HAL_I2C_Init+0x274>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d802      	bhi.n	8009d58 <HAL_I2C_Init+0xd4>
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	3301      	adds	r3, #1
 8009d56:	e009      	b.n	8009d6c <HAL_I2C_Init+0xe8>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009d5e:	fb02 f303 	mul.w	r3, r2, r3
 8009d62:	4a69      	ldr	r2, [pc, #420]	@ (8009f08 <HAL_I2C_Init+0x284>)
 8009d64:	fba2 2303 	umull	r2, r3, r2, r3
 8009d68:	099b      	lsrs	r3, r3, #6
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009d7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	495c      	ldr	r1, [pc, #368]	@ (8009ef8 <HAL_I2C_Init+0x274>)
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	d819      	bhi.n	8009dc0 <HAL_I2C_Init+0x13c>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	1e59      	subs	r1, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009da0:	400b      	ands	r3, r1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <HAL_I2C_Init+0x138>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	1e59      	subs	r1, r3, #1
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8009db4:	3301      	adds	r3, #1
 8009db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dba:	e051      	b.n	8009e60 <HAL_I2C_Init+0x1dc>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	e04f      	b.n	8009e60 <HAL_I2C_Init+0x1dc>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d111      	bne.n	8009dec <HAL_I2C_Init+0x168>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	1e58      	subs	r0, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6859      	ldr	r1, [r3, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	440b      	add	r3, r1
 8009dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf0c      	ite	eq
 8009de4:	2301      	moveq	r3, #1
 8009de6:	2300      	movne	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	e012      	b.n	8009e12 <HAL_I2C_Init+0x18e>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	1e58      	subs	r0, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6859      	ldr	r1, [r3, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	0099      	lsls	r1, r3, #2
 8009dfc:	440b      	add	r3, r1
 8009dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e02:	3301      	adds	r3, #1
 8009e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2301      	moveq	r3, #1
 8009e0e:	2300      	movne	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <HAL_I2C_Init+0x196>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e022      	b.n	8009e60 <HAL_I2C_Init+0x1dc>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10e      	bne.n	8009e40 <HAL_I2C_Init+0x1bc>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1e58      	subs	r0, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	440b      	add	r3, r1
 8009e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e34:	3301      	adds	r3, #1
 8009e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e3e:	e00f      	b.n	8009e60 <HAL_I2C_Init+0x1dc>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	1e58      	subs	r0, r3, #1
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6859      	ldr	r1, [r3, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	0099      	lsls	r1, r3, #2
 8009e50:	440b      	add	r3, r1
 8009e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e56:	3301      	adds	r3, #1
 8009e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	6809      	ldr	r1, [r1, #0]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69da      	ldr	r2, [r3, #28]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	6911      	ldr	r1, [r2, #16]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	68d2      	ldr	r2, [r2, #12]
 8009e9a:	4311      	orrs	r1, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	000186a0 	.word	0x000186a0
 8009efc:	001e847f 	.word	0x001e847f
 8009f00:	003d08ff 	.word	0x003d08ff
 8009f04:	431bde83 	.word	0x431bde83
 8009f08:	10624dd3 	.word	0x10624dd3

08009f0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	4608      	mov	r0, r1
 8009f16:	4611      	mov	r1, r2
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	817b      	strh	r3, [r7, #10]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	813b      	strh	r3, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f26:	f7fe fccd 	bl	80088c4 <HAL_GetTick>
 8009f2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	f040 80d9 	bne.w	800a0ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	2319      	movs	r3, #25
 8009f40:	2201      	movs	r2, #1
 8009f42:	496d      	ldr	r1, [pc, #436]	@ (800a0f8 <HAL_I2C_Mem_Write+0x1ec>)
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f002 f8e5 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
 8009f52:	e0cc      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_I2C_Mem_Write+0x56>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e0c5      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d007      	beq.n	8009f88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2221      	movs	r2, #33	@ 0x21
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2240      	movs	r2, #64	@ 0x40
 8009fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4a4d      	ldr	r2, [pc, #308]	@ (800a0fc <HAL_I2C_Mem_Write+0x1f0>)
 8009fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fca:	88f8      	ldrh	r0, [r7, #6]
 8009fcc:	893a      	ldrh	r2, [r7, #8]
 8009fce:	8979      	ldrh	r1, [r7, #10]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	4603      	mov	r3, r0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f001 fe74 	bl	800bcc8 <I2C_RequestMemoryWrite>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d052      	beq.n	800a08c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e081      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f002 f966 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00d      	beq.n	800a016 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d107      	bne.n	800a012 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e06b      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01a:	781a      	ldrb	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d11b      	bne.n	800a08c <HAL_I2C_Mem_Write+0x180>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d017      	beq.n	800a08c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a060:	781a      	ldrb	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b29a      	uxth	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1aa      	bne.n	8009fea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f002 f952 	bl	800c342 <I2C_WaitOnBTFFlagUntilTimeout>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00d      	beq.n	800a0c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d107      	bne.n	800a0bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e016      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e000      	b.n	800a0ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	00100002 	.word	0x00100002
 800a0fc:	ffff0000 	.word	0xffff0000

0800a100 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08c      	sub	sp, #48	@ 0x30
 800a104:	af02      	add	r7, sp, #8
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	461a      	mov	r2, r3
 800a10e:	4603      	mov	r3, r0
 800a110:	817b      	strh	r3, [r7, #10]
 800a112:	460b      	mov	r3, r1
 800a114:	813b      	strh	r3, [r7, #8]
 800a116:	4613      	mov	r3, r2
 800a118:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a11a:	f7fe fbd3 	bl	80088c4 <HAL_GetTick>
 800a11e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b20      	cmp	r3, #32
 800a12a:	f040 8208 	bne.w	800a53e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	2319      	movs	r3, #25
 800a134:	2201      	movs	r2, #1
 800a136:	497b      	ldr	r1, [pc, #492]	@ (800a324 <HAL_I2C_Mem_Read+0x224>)
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f001 ffeb 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a144:	2302      	movs	r3, #2
 800a146:	e1fb      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d101      	bne.n	800a156 <HAL_I2C_Mem_Read+0x56>
 800a152:	2302      	movs	r3, #2
 800a154:	e1f4      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d007      	beq.n	800a17c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f042 0201 	orr.w	r2, r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a18a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2222      	movs	r2, #34	@ 0x22
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2240      	movs	r2, #64	@ 0x40
 800a198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a1ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4a5b      	ldr	r2, [pc, #364]	@ (800a328 <HAL_I2C_Mem_Read+0x228>)
 800a1bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1be:	88f8      	ldrh	r0, [r7, #6]
 800a1c0:	893a      	ldrh	r2, [r7, #8]
 800a1c2:	8979      	ldrh	r1, [r7, #10]
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f001 fe10 	bl	800bdf4 <I2C_RequestMemoryRead>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e1b0      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d113      	bne.n	800a20e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	623b      	str	r3, [r7, #32]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	623b      	str	r3, [r7, #32]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	623b      	str	r3, [r7, #32]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	e184      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a212:	2b01      	cmp	r3, #1
 800a214:	d11b      	bne.n	800a24e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	61fb      	str	r3, [r7, #28]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	e164      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a252:	2b02      	cmp	r3, #2
 800a254:	d11b      	bne.n	800a28e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a264:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a274:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a276:	2300      	movs	r3, #0
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	e144      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a2a4:	e138      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	f200 80f1 	bhi.w	800a492 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d123      	bne.n	800a300 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f002 f8b3 	bl	800c428 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e139      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d6:	b2d2      	uxtb	r2, r2
 800a2d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a2fe:	e10b      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a304:	2b02      	cmp	r3, #2
 800a306:	d14e      	bne.n	800a3a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30e:	2200      	movs	r2, #0
 800a310:	4906      	ldr	r1, [pc, #24]	@ (800a32c <HAL_I2C_Mem_Read+0x22c>)
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f001 fefe 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d008      	beq.n	800a330 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e10e      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
 800a322:	bf00      	nop
 800a324:	00100002 	.word	0x00100002
 800a328:	ffff0000 	.word	0xffff0000
 800a32c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a33e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	691a      	ldr	r2, [r3, #16]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a35c:	3b01      	subs	r3, #1
 800a35e:	b29a      	uxth	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a368:	b29b      	uxth	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691a      	ldr	r2, [r3, #16]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a3a4:	e0b8      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4966      	ldr	r1, [pc, #408]	@ (800a548 <HAL_I2C_Mem_Read+0x448>)
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f001 feaf 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e0bf      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3da:	b2d2      	uxtb	r2, r2
 800a3dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	2200      	movs	r2, #0
 800a40a:	494f      	ldr	r1, [pc, #316]	@ (800a548 <HAL_I2C_Mem_Read+0x448>)
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f001 fe81 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e091      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a42a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a436:	b2d2      	uxtb	r2, r2
 800a438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691a      	ldr	r2, [r3, #16]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a486:	b29b      	uxth	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a490:	e042      	b.n	800a518 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a494:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f001 ffc6 	bl	800c428 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e04c      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	b2d2      	uxtb	r2, r2
 800a4b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	d118      	bne.n	800a518 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	b2d2      	uxtb	r2, r2
 800a4f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a502:	3b01      	subs	r3, #1
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a50e:	b29b      	uxth	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	b29a      	uxth	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f47f aec2 	bne.w	800a2a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e000      	b.n	800a540 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a53e:	2302      	movs	r3, #2
  }
}
 800a540:	4618      	mov	r0, r3
 800a542:	3728      	adds	r7, #40	@ 0x28
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	00010004 	.word	0x00010004

0800a54c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a564:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a56c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a574:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	2b10      	cmp	r3, #16
 800a57a:	d003      	beq.n	800a584 <HAL_I2C_EV_IRQHandler+0x38>
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	2b40      	cmp	r3, #64	@ 0x40
 800a580:	f040 80b1 	bne.w	800a6e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10d      	bne.n	800a5ba <HAL_I2C_EV_IRQHandler+0x6e>
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a5a4:	d003      	beq.n	800a5ae <HAL_I2C_EV_IRQHandler+0x62>
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a5ac:	d101      	bne.n	800a5b2 <HAL_I2C_EV_IRQHandler+0x66>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <HAL_I2C_EV_IRQHandler+0x68>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	f000 8114 	beq.w	800a7e2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00b      	beq.n	800a5dc <HAL_I2C_EV_IRQHandler+0x90>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d006      	beq.n	800a5dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 ffaf 	bl	800c532 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fd5e 	bl	800b096 <I2C_Master_SB>
 800a5da:	e083      	b.n	800a6e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d008      	beq.n	800a5f8 <HAL_I2C_EV_IRQHandler+0xac>
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fdd6 	bl	800b1a2 <I2C_Master_ADD10>
 800a5f6:	e075      	b.n	800a6e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f003 0302 	and.w	r3, r3, #2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d008      	beq.n	800a614 <HAL_I2C_EV_IRQHandler+0xc8>
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fdf2 	bl	800b1f6 <I2C_Master_ADDR>
 800a612:	e067      	b.n	800a6e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d036      	beq.n	800a68c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a62c:	f000 80db 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00d      	beq.n	800a656 <HAL_I2C_EV_IRQHandler+0x10a>
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <HAL_I2C_EV_IRQHandler+0x10a>
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d103      	bne.n	800a656 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f9d6 	bl	800aa00 <I2C_MasterTransmit_TXE>
 800a654:	e046      	b.n	800a6e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 80c2 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 80bc 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b21      	cmp	r3, #33	@ 0x21
 800a672:	d103      	bne.n	800a67c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fa5f 	bl	800ab38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a67a:	e0b4      	b.n	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	2b40      	cmp	r3, #64	@ 0x40
 800a680:	f040 80b1 	bne.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 facd 	bl	800ac24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a68a:	e0ac      	b.n	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a69a:	f000 80a4 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00d      	beq.n	800a6c4 <HAL_I2C_EV_IRQHandler+0x178>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d008      	beq.n	800a6c4 <HAL_I2C_EV_IRQHandler+0x178>
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fb45 	bl	800ad4c <I2C_MasterReceive_RXNE>
 800a6c2:	e00f      	b.n	800a6e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 808b 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 8085 	beq.w	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fbf0 	bl	800aec2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6e2:	e080      	b.n	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
 800a6e4:	e07f      	b.n	800a7e6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	61fb      	str	r3, [r7, #28]
 800a6f6:	e007      	b.n	800a708 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d011      	beq.n	800a736 <HAL_I2C_EV_IRQHandler+0x1ea>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00c      	beq.n	800a736 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a72c:	69b9      	ldr	r1, [r7, #24]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 ffb0 	bl	800b694 <I2C_Slave_ADDR>
 800a734:	e05a      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <HAL_I2C_EV_IRQHandler+0x206>
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 ffea 	bl	800b724 <I2C_Slave_STOPF>
 800a750:	e04c      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	2b21      	cmp	r3, #33	@ 0x21
 800a756:	d002      	beq.n	800a75e <HAL_I2C_EV_IRQHandler+0x212>
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b29      	cmp	r3, #41	@ 0x29
 800a75c:	d120      	bne.n	800a7a0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00d      	beq.n	800a784 <HAL_I2C_EV_IRQHandler+0x238>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <HAL_I2C_EV_IRQHandler+0x238>
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fecb 	bl	800b518 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a782:	e032      	b.n	800a7ea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d02d      	beq.n	800a7ea <HAL_I2C_EV_IRQHandler+0x29e>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a794:	2b00      	cmp	r3, #0
 800a796:	d028      	beq.n	800a7ea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fefa 	bl	800b592 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a79e:	e024      	b.n	800a7ea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <HAL_I2C_EV_IRQHandler+0x27a>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <HAL_I2C_EV_IRQHandler+0x27a>
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 ff08 	bl	800b5d4 <I2C_SlaveReceive_RXNE>
 800a7c4:	e012      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00d      	beq.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 ff38 	bl	800b650 <I2C_SlaveReceive_BTF>
 800a7e0:	e004      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a7e2:	bf00      	nop
 800a7e4:	e002      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7e6:	bf00      	nop
 800a7e8:	e000      	b.n	800a7ec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a7ec:	3720      	adds	r7, #32
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b08a      	sub	sp, #40	@ 0x28
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a814:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00d      	beq.n	800a83c <HAL_I2C_ER_IRQHandler+0x4a>
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a826:	2b00      	cmp	r3, #0
 800a828:	d008      	beq.n	800a83c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a83a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00d      	beq.n	800a862 <HAL_I2C_ER_IRQHandler+0x70>
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d008      	beq.n	800a862 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a852:	f043 0302 	orr.w	r3, r3, #2
 800a856:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a860:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d03e      	beq.n	800a8ea <HAL_I2C_ER_IRQHandler+0xf8>
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a872:	2b00      	cmp	r3, #0
 800a874:	d039      	beq.n	800a8ea <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a876:	7efb      	ldrb	r3, [r7, #27]
 800a878:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a87e:	b29b      	uxth	r3, r3
 800a880:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a888:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a88e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a890:	7ebb      	ldrb	r3, [r7, #26]
 800a892:	2b20      	cmp	r3, #32
 800a894:	d112      	bne.n	800a8bc <HAL_I2C_ER_IRQHandler+0xca>
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10f      	bne.n	800a8bc <HAL_I2C_ER_IRQHandler+0xca>
 800a89c:	7cfb      	ldrb	r3, [r7, #19]
 800a89e:	2b21      	cmp	r3, #33	@ 0x21
 800a8a0:	d008      	beq.n	800a8b4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a8a2:	7cfb      	ldrb	r3, [r7, #19]
 800a8a4:	2b29      	cmp	r3, #41	@ 0x29
 800a8a6:	d005      	beq.n	800a8b4 <HAL_I2C_ER_IRQHandler+0xc2>
 800a8a8:	7cfb      	ldrb	r3, [r7, #19]
 800a8aa:	2b28      	cmp	r3, #40	@ 0x28
 800a8ac:	d106      	bne.n	800a8bc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b21      	cmp	r3, #33	@ 0x21
 800a8b2:	d103      	bne.n	800a8bc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f865 	bl	800b984 <I2C_Slave_AF>
 800a8ba:	e016      	b.n	800a8ea <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a8c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c8:	f043 0304 	orr.w	r3, r3, #4
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a8ce:	7efb      	ldrb	r3, [r7, #27]
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d002      	beq.n	800a8da <HAL_I2C_ER_IRQHandler+0xe8>
 800a8d4:	7efb      	ldrb	r3, [r7, #27]
 800a8d6:	2b40      	cmp	r3, #64	@ 0x40
 800a8d8:	d107      	bne.n	800a8ea <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00d      	beq.n	800a910 <HAL_I2C_ER_IRQHandler+0x11e>
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	f043 0308 	orr.w	r3, r3, #8
 800a904:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a90e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a912:	2b00      	cmp	r3, #0
 800a914:	d008      	beq.n	800a928 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	431a      	orrs	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 f89e 	bl	800ba64 <I2C_ITError>
  }
}
 800a928:	bf00      	nop
 800a92a:	3728      	adds	r7, #40	@ 0x28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	70fb      	strb	r3, [r7, #3]
 800a98c:	4613      	mov	r3, r2
 800a98e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d150      	bne.n	800aac8 <I2C_MasterTransmit_TXE+0xc8>
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	2b21      	cmp	r3, #33	@ 0x21
 800aa2a:	d14d      	bne.n	800aac8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d01d      	beq.n	800aa6e <I2C_MasterTransmit_TXE+0x6e>
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d01a      	beq.n	800aa6e <I2C_MasterTransmit_TXE+0x6e>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa3e:	d016      	beq.n	800aa6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2211      	movs	r2, #17
 800aa54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ff62 	bl	800a930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa6c:	e060      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b40      	cmp	r3, #64	@ 0x40
 800aaa6:	d107      	bne.n	800aab8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff ff7d 	bl	800a9b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aab6:	e03b      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff ff35 	bl	800a930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aac6:	e033      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
 800aaca:	2b21      	cmp	r3, #33	@ 0x21
 800aacc:	d005      	beq.n	800aada <I2C_MasterTransmit_TXE+0xda>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b40      	cmp	r3, #64	@ 0x40
 800aad2:	d12d      	bne.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b22      	cmp	r3, #34	@ 0x22
 800aad8:	d12a      	bne.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aade:	b29b      	uxth	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d108      	bne.n	800aaf6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aaf2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800aaf4:	e01c      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b40      	cmp	r3, #64	@ 0x40
 800ab00:	d103      	bne.n	800ab0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f88e 	bl	800ac24 <I2C_MemoryTransmit_TXE_BTF>
}
 800ab08:	e012      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0e:	781a      	ldrb	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ab2e:	e7ff      	b.n	800ab30 <I2C_MasterTransmit_TXE+0x130>
 800ab30:	bf00      	nop
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b21      	cmp	r3, #33	@ 0x21
 800ab50:	d164      	bne.n	800ac1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d012      	beq.n	800ab82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ab80:	e04c      	b.n	800ac1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d01d      	beq.n	800abc4 <I2C_MasterTransmit_BTF+0x8c>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d01a      	beq.n	800abc4 <I2C_MasterTransmit_BTF+0x8c>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ab94:	d016      	beq.n	800abc4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aba4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2211      	movs	r2, #17
 800abaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff feb7 	bl	800a930 <HAL_I2C_MasterTxCpltCallback>
}
 800abc2:	e02b      	b.n	800ac1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800abd2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abe2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b40      	cmp	r3, #64	@ 0x40
 800abfc:	d107      	bne.n	800ac0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff fed2 	bl	800a9b0 <HAL_I2C_MemTxCpltCallback>
}
 800ac0c:	e006      	b.n	800ac1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff fe8a 	bl	800a930 <HAL_I2C_MasterTxCpltCallback>
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d11d      	bne.n	800ac78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d10b      	bne.n	800ac5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac54:	1c9a      	adds	r2, r3, #2
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800ac5a:	e073      	b.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	121b      	asrs	r3, r3, #8
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ac76:	e065      	b.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d10b      	bne.n	800ac98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ac96:	e055      	b.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d151      	bne.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b22      	cmp	r3, #34	@ 0x22
 800aca4:	d10d      	bne.n	800acc2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acb4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800acc0:	e040      	b.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d015      	beq.n	800acf8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	2b21      	cmp	r3, #33	@ 0x21
 800acd0:	d112      	bne.n	800acf8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800acf6:	e025      	b.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d120      	bne.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	2b21      	cmp	r3, #33	@ 0x21
 800ad06:	d11d      	bne.n	800ad44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ad16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fe36 	bl	800a9b0 <HAL_I2C_MemTxCpltCallback>
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b22      	cmp	r3, #34	@ 0x22
 800ad5e:	f040 80ac 	bne.w	800aeba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d921      	bls.n	800adb4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691a      	ldr	r2, [r3, #16]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	b2d2      	uxtb	r2, r2
 800ad7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	f040 808c 	bne.w	800aeba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adb0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800adb2:	e082      	b.n	800aeba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d075      	beq.n	800aea8 <I2C_MasterReceive_RXNE+0x15c>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d002      	beq.n	800adc8 <I2C_MasterReceive_RXNE+0x7c>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d16f      	bne.n	800aea8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 fafb 	bl	800c3c4 <I2C_WaitOnSTOPRequestThroughIT>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d142      	bne.n	800ae5a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ade2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800adf2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2220      	movs	r2, #32
 800ae1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b40      	cmp	r3, #64	@ 0x40
 800ae2c:	d10a      	bne.n	800ae44 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fdc1 	bl	800a9c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae42:	e03a      	b.n	800aeba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2212      	movs	r2, #18
 800ae50:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff fd76 	bl	800a944 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae58:	e02f      	b.n	800aeba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ae68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	691a      	ldr	r2, [r3, #16]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae74:	b2d2      	uxtb	r2, r2
 800ae76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fd99 	bl	800a9d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aea6:	e008      	b.n	800aeba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeb6:	605a      	str	r2, [r3, #4]
}
 800aeb8:	e7ff      	b.n	800aeba <I2C_MasterReceive_RXNE+0x16e>
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d11b      	bne.n	800af12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aee8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef4:	b2d2      	uxtb	r2, r2
 800aef6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af06:	b29b      	uxth	r3, r3
 800af08:	3b01      	subs	r3, #1
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800af10:	e0bd      	b.n	800b08e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af16:	b29b      	uxth	r3, r3
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d129      	bne.n	800af70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b04      	cmp	r3, #4
 800af30:	d00a      	beq.n	800af48 <I2C_MasterReceive_BTF+0x86>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d007      	beq.n	800af48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	691a      	ldr	r2, [r3, #16]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af64:	b29b      	uxth	r3, r3
 800af66:	3b01      	subs	r3, #1
 800af68:	b29a      	uxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800af6e:	e08e      	b.n	800b08e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d176      	bne.n	800b068 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d002      	beq.n	800af86 <I2C_MasterReceive_BTF+0xc4>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b10      	cmp	r3, #16
 800af84:	d108      	bne.n	800af98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	e019      	b.n	800afcc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	d002      	beq.n	800afa4 <I2C_MasterReceive_BTF+0xe2>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d108      	bne.n	800afb6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e00a      	b.n	800afcc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b10      	cmp	r3, #16
 800afba:	d007      	beq.n	800afcc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	691a      	ldr	r2, [r3, #16]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afe8:	b29b      	uxth	r3, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	691a      	ldr	r2, [r3, #16]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800affc:	b2d2      	uxtb	r2, r2
 800affe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b00e:	b29b      	uxth	r3, r3
 800b010:	3b01      	subs	r3, #1
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b026:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b40      	cmp	r3, #64	@ 0x40
 800b03a:	d10a      	bne.n	800b052 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fcba 	bl	800a9c4 <HAL_I2C_MemRxCpltCallback>
}
 800b050:	e01d      	b.n	800b08e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2212      	movs	r2, #18
 800b05e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff fc6f 	bl	800a944 <HAL_I2C_MasterRxCpltCallback>
}
 800b066:	e012      	b.n	800b08e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b072:	b2d2      	uxtb	r2, r2
 800b074:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b084:	b29b      	uxth	r3, r3
 800b086:	3b01      	subs	r3, #1
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b096:	b480      	push	{r7}
 800b098:	b083      	sub	sp, #12
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b40      	cmp	r3, #64	@ 0x40
 800b0a8:	d117      	bne.n	800b0da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d109      	bne.n	800b0c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b0c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b0c4:	e067      	b.n	800b196 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f043 0301 	orr.w	r3, r3, #1
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	611a      	str	r2, [r3, #16]
}
 800b0d8:	e05d      	b.n	800b196 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0e2:	d133      	bne.n	800b14c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b21      	cmp	r3, #33	@ 0x21
 800b0ee:	d109      	bne.n	800b104 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b100:	611a      	str	r2, [r3, #16]
 800b102:	e008      	b.n	800b116 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d004      	beq.n	800b128 <I2C_Master_SB+0x92>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d108      	bne.n	800b13a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d032      	beq.n	800b196 <I2C_Master_SB+0x100>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d02d      	beq.n	800b196 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b148:	605a      	str	r2, [r3, #4]
}
 800b14a:	e024      	b.n	800b196 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10e      	bne.n	800b172 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b158:	b29b      	uxth	r3, r3
 800b15a:	11db      	asrs	r3, r3, #7
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0306 	and.w	r3, r3, #6
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f063 030f 	orn	r3, r3, #15
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	611a      	str	r2, [r3, #16]
}
 800b170:	e011      	b.n	800b196 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b176:	2b01      	cmp	r3, #1
 800b178:	d10d      	bne.n	800b196 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b17e:	b29b      	uxth	r3, r3
 800b180:	11db      	asrs	r3, r3, #7
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0306 	and.w	r3, r3, #6
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	f063 030e 	orn	r3, r3, #14
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	611a      	str	r2, [r3, #16]
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d004      	beq.n	800b1c8 <I2C_Master_ADD10+0x26>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d108      	bne.n	800b1da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00c      	beq.n	800b1ea <I2C_Master_ADD10+0x48>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d007      	beq.n	800b1ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1e8:	605a      	str	r2, [r3, #4]
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b091      	sub	sp, #68	@ 0x44
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b204:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b212:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b22      	cmp	r3, #34	@ 0x22
 800b21e:	f040 8169 	bne.w	800b4f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10f      	bne.n	800b24a <I2C_Master_ADDR+0x54>
 800b22a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b22e:	2b40      	cmp	r3, #64	@ 0x40
 800b230:	d10b      	bne.n	800b24a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b232:	2300      	movs	r3, #0
 800b234:	633b      	str	r3, [r7, #48]	@ 0x30
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	633b      	str	r3, [r7, #48]	@ 0x30
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	e160      	b.n	800b50c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d11d      	bne.n	800b28e <I2C_Master_ADDR+0x98>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b25a:	d118      	bne.n	800b28e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b25c:	2300      	movs	r3, #0
 800b25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b280:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	651a      	str	r2, [r3, #80]	@ 0x50
 800b28c:	e13e      	b.n	800b50c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b292:	b29b      	uxth	r3, r3
 800b294:	2b00      	cmp	r3, #0
 800b296:	d113      	bne.n	800b2c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b298:	2300      	movs	r3, #0
 800b29a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e115      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	f040 808a 	bne.w	800b3e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b2d2:	d137      	bne.n	800b344 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2f2:	d113      	bne.n	800b31c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b302:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b304:	2300      	movs	r3, #0
 800b306:	627b      	str	r3, [r7, #36]	@ 0x24
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	627b      	str	r3, [r7, #36]	@ 0x24
 800b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31a:	e0e7      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b31c:	2300      	movs	r3, #0
 800b31e:	623b      	str	r3, [r7, #32]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	623b      	str	r3, [r7, #32]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	623b      	str	r3, [r7, #32]
 800b330:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	e0d3      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	2b08      	cmp	r3, #8
 800b348:	d02e      	beq.n	800b3a8 <I2C_Master_ADDR+0x1b2>
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	d02b      	beq.n	800b3a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b352:	2b12      	cmp	r3, #18
 800b354:	d102      	bne.n	800b35c <I2C_Master_ADDR+0x166>
 800b356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d125      	bne.n	800b3a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d00e      	beq.n	800b380 <I2C_Master_ADDR+0x18a>
 800b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b364:	2b02      	cmp	r3, #2
 800b366:	d00b      	beq.n	800b380 <I2C_Master_ADDR+0x18a>
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	2b10      	cmp	r3, #16
 800b36c:	d008      	beq.n	800b380 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e007      	b.n	800b390 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b38e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b390:	2300      	movs	r3, #0
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	61fb      	str	r3, [r7, #28]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	e0a1      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	61bb      	str	r3, [r7, #24]
 800b3cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e085      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d14d      	bne.n	800b486 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d016      	beq.n	800b41e <I2C_Master_ADDR+0x228>
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d013      	beq.n	800b41e <I2C_Master_ADDR+0x228>
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	2b10      	cmp	r3, #16
 800b3fa:	d010      	beq.n	800b41e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b40a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	e007      	b.n	800b42e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b42c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b43c:	d117      	bne.n	800b46e <I2C_Master_ADDR+0x278>
 800b43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b444:	d00b      	beq.n	800b45e <I2C_Master_ADDR+0x268>
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d008      	beq.n	800b45e <I2C_Master_ADDR+0x268>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d005      	beq.n	800b45e <I2C_Master_ADDR+0x268>
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	2b10      	cmp	r3, #16
 800b456:	d002      	beq.n	800b45e <I2C_Master_ADDR+0x268>
 800b458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	d107      	bne.n	800b46e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b46c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	617b      	str	r3, [r7, #20]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	e032      	b.n	800b4ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b494:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4a4:	d117      	bne.n	800b4d6 <I2C_Master_ADDR+0x2e0>
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b4ac:	d00b      	beq.n	800b4c6 <I2C_Master_ADDR+0x2d0>
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d008      	beq.n	800b4c6 <I2C_Master_ADDR+0x2d0>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	d005      	beq.n	800b4c6 <I2C_Master_ADDR+0x2d0>
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	d002      	beq.n	800b4c6 <I2C_Master_ADDR+0x2d0>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	d107      	bne.n	800b4d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	613b      	str	r3, [r7, #16]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b4f2:	e00b      	b.n	800b50c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	68fb      	ldr	r3, [r7, #12]
}
 800b50a:	e7ff      	b.n	800b50c <I2C_Master_ADDR+0x316>
 800b50c:	bf00      	nop
 800b50e:	3744      	adds	r7, #68	@ 0x44
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b526:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d02b      	beq.n	800b58a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	3b01      	subs	r3, #1
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d114      	bne.n	800b58a <I2C_SlaveTransmit_TXE+0x72>
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	2b29      	cmp	r3, #41	@ 0x29
 800b564:	d111      	bne.n	800b58a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b574:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2221      	movs	r2, #33	@ 0x21
 800b57a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2228      	movs	r2, #40	@ 0x28
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff f9e7 	bl	800a958 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b58a:	bf00      	nop
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d011      	beq.n	800b5c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a8:	781a      	ldrb	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d02c      	beq.n	800b648 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	3b01      	subs	r3, #1
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b618:	b29b      	uxth	r3, r3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d114      	bne.n	800b648 <I2C_SlaveReceive_RXNE+0x74>
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	2b2a      	cmp	r3, #42	@ 0x2a
 800b622:	d111      	bne.n	800b648 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b632:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2222      	movs	r2, #34	@ 0x22
 800b638:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2228      	movs	r2, #40	@ 0x28
 800b63e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff f992 	bl	800a96c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b648:	bf00      	nop
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d012      	beq.n	800b688 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b67e:	b29b      	uxth	r3, r3
 800b680:	3b01      	subs	r3, #1
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b6ae:	2b28      	cmp	r3, #40	@ 0x28
 800b6b0:	d125      	bne.n	800b6fe <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	81bb      	strh	r3, [r7, #12]
 800b6e0:	e002      	b.n	800b6e8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b6f0:	89ba      	ldrh	r2, [r7, #12]
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff f942 	bl	800a980 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b6fc:	e00e      	b.n	800b71c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6fe:	2300      	movs	r3, #0
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	60bb      	str	r3, [r7, #8]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	60bb      	str	r3, [r7, #8]
 800b712:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b71c:	bf00      	nop
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b732:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b742:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b744:	2300      	movs	r3, #0
 800b746:	60bb      	str	r3, [r7, #8]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	60bb      	str	r3, [r7, #8]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f042 0201 	orr.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b770:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b77c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b780:	d172      	bne.n	800b868 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	2b22      	cmp	r3, #34	@ 0x22
 800b786:	d002      	beq.n	800b78e <I2C_Slave_STOPF+0x6a>
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b78c:	d135      	bne.n	800b7fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	b29a      	uxth	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d005      	beq.n	800b7b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7aa:	f043 0204 	orr.w	r2, r3, #4
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b7c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd fce0 	bl	800918c <HAL_DMA_GetState>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d049      	beq.n	800b866 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d6:	4a69      	ldr	r2, [pc, #420]	@ (800b97c <I2C_Slave_STOPF+0x258>)
 800b7d8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fd fb28 	bl	8008e34 <HAL_DMA_Abort_IT>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d03d      	beq.n	800b866 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7f8:	e035      	b.n	800b866 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	b29a      	uxth	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d005      	beq.n	800b81e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b816:	f043 0204 	orr.w	r2, r3, #4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b82c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b832:	4618      	mov	r0, r3
 800b834:	f7fd fcaa 	bl	800918c <HAL_DMA_GetState>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d014      	beq.n	800b868 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b842:	4a4e      	ldr	r2, [pc, #312]	@ (800b97c <I2C_Slave_STOPF+0x258>)
 800b844:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd faf2 	bl	8008e34 <HAL_DMA_Abort_IT>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b860:	4610      	mov	r0, r2
 800b862:	4798      	blx	r3
 800b864:	e000      	b.n	800b868 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b866:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d03e      	beq.n	800b8f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d112      	bne.n	800b8a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691a      	ldr	r2, [r3, #16]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b0:	2b40      	cmp	r3, #64	@ 0x40
 800b8b2:	d112      	bne.n	800b8da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8be:	b2d2      	uxtb	r2, r2
 800b8c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e8:	f043 0204 	orr.w	r2, r3, #4
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f8b3 	bl	800ba64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b8fe:	e039      	b.n	800b974 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b2a      	cmp	r3, #42	@ 0x2a
 800b904:	d109      	bne.n	800b91a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2228      	movs	r2, #40	@ 0x28
 800b910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff f829 	bl	800a96c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b28      	cmp	r3, #40	@ 0x28
 800b924:	d111      	bne.n	800b94a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a15      	ldr	r2, [pc, #84]	@ (800b980 <I2C_Slave_STOPF+0x25c>)
 800b92a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff f82a 	bl	800a99c <HAL_I2C_ListenCpltCallback>
}
 800b948:	e014      	b.n	800b974 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94e:	2b22      	cmp	r3, #34	@ 0x22
 800b950:	d002      	beq.n	800b958 <I2C_Slave_STOPF+0x234>
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	2b22      	cmp	r3, #34	@ 0x22
 800b956:	d10d      	bne.n	800b974 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2220      	movs	r2, #32
 800b962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fe fffc 	bl	800a96c <HAL_I2C_SlaveRxCpltCallback>
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	0800bfc5 	.word	0x0800bfc5
 800b980:	ffff0000 	.word	0xffff0000

0800b984 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b992:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b08      	cmp	r3, #8
 800b99e:	d002      	beq.n	800b9a6 <I2C_Slave_AF+0x22>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	d129      	bne.n	800b9fa <I2C_Slave_AF+0x76>
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	2b28      	cmp	r3, #40	@ 0x28
 800b9aa:	d126      	bne.n	800b9fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a2c      	ldr	r2, [pc, #176]	@ (800ba60 <I2C_Slave_AF+0xdc>)
 800b9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	685a      	ldr	r2, [r3, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b9c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b9ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7fe ffd2 	bl	800a99c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b9f8:	e02e      	b.n	800ba58 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	2b21      	cmp	r3, #33	@ 0x21
 800b9fe:	d126      	bne.n	800ba4e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a17      	ldr	r2, [pc, #92]	@ (800ba60 <I2C_Slave_AF+0xdc>)
 800ba04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2221      	movs	r2, #33	@ 0x21
 800ba0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ba2a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba34:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba44:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7fe ff86 	bl	800a958 <HAL_I2C_SlaveTxCpltCallback>
}
 800ba4c:	e004      	b.n	800ba58 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba56:	615a      	str	r2, [r3, #20]
}
 800ba58:	bf00      	nop
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	ffff0000 	.word	0xffff0000

0800ba64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b10      	cmp	r3, #16
 800ba80:	d002      	beq.n	800ba88 <I2C_ITError+0x24>
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b40      	cmp	r3, #64	@ 0x40
 800ba86:	d10a      	bne.n	800ba9e <I2C_ITError+0x3a>
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	2b22      	cmp	r3, #34	@ 0x22
 800ba8c:	d107      	bne.n	800ba9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800baa4:	2b28      	cmp	r3, #40	@ 0x28
 800baa6:	d107      	bne.n	800bab8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2228      	movs	r2, #40	@ 0x28
 800bab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bab6:	e015      	b.n	800bae4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bac2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bac6:	d00a      	beq.n	800bade <I2C_ITError+0x7a>
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	2b60      	cmp	r3, #96	@ 0x60
 800bacc:	d007      	beq.n	800bade <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800baee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baf2:	d162      	bne.n	800bbba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d020      	beq.n	800bb54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb16:	4a6a      	ldr	r2, [pc, #424]	@ (800bcc0 <I2C_ITError+0x25c>)
 800bb18:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fd f988 	bl	8008e34 <HAL_DMA_Abort_IT>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 8089 	beq.w	800bc3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0201 	bic.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2220      	movs	r2, #32
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4798      	blx	r3
 800bb52:	e074      	b.n	800bc3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb58:	4a59      	ldr	r2, [pc, #356]	@ (800bcc0 <I2C_ITError+0x25c>)
 800bb5a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fd f967 	bl	8008e34 <HAL_DMA_Abort_IT>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d068      	beq.n	800bc3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb76:	2b40      	cmp	r3, #64	@ 0x40
 800bb78:	d10b      	bne.n	800bb92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb84:	b2d2      	uxtb	r2, r2
 800bb86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0201 	bic.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4798      	blx	r3
 800bbb8:	e041      	b.n	800bc3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b60      	cmp	r3, #96	@ 0x60
 800bbc4:	d125      	bne.n	800bc12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbde:	2b40      	cmp	r3, #64	@ 0x40
 800bbe0:	d10b      	bne.n	800bbfa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691a      	ldr	r2, [r3, #16]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f022 0201 	bic.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe feee 	bl	800a9ec <HAL_I2C_AbortCpltCallback>
 800bc10:	e015      	b.n	800bc3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc1c:	2b40      	cmp	r3, #64	@ 0x40
 800bc1e:	d10b      	bne.n	800bc38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691a      	ldr	r2, [r3, #16]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7fe fecd 	bl	800a9d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10e      	bne.n	800bc6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d109      	bne.n	800bc6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d104      	bne.n	800bc6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d007      	beq.n	800bc7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bc7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d113      	bne.n	800bcb8 <I2C_ITError+0x254>
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	2b28      	cmp	r3, #40	@ 0x28
 800bc94:	d110      	bne.n	800bcb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a0a      	ldr	r2, [pc, #40]	@ (800bcc4 <I2C_ITError+0x260>)
 800bc9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fe fe72 	bl	800a99c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	0800bfc5 	.word	0x0800bfc5
 800bcc4:	ffff0000 	.word	0xffff0000

0800bcc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	817b      	strh	r3, [r7, #10]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	813b      	strh	r3, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bcf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 fa08 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00d      	beq.n	800bd26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd18:	d103      	bne.n	800bd22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e05f      	b.n	800bde6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd26:	897b      	ldrh	r3, [r7, #10]
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bd34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	6a3a      	ldr	r2, [r7, #32]
 800bd3a:	492d      	ldr	r1, [pc, #180]	@ (800bdf0 <I2C_RequestMemoryWrite+0x128>)
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f000 fa40 	bl	800c1c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e04c      	b.n	800bde6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	617b      	str	r3, [r7, #20]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd64:	6a39      	ldr	r1, [r7, #32]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 faaa 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00d      	beq.n	800bd8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	d107      	bne.n	800bd8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e02b      	b.n	800bde6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d105      	bne.n	800bda0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bd94:	893b      	ldrh	r3, [r7, #8]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	611a      	str	r2, [r3, #16]
 800bd9e:	e021      	b.n	800bde4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bda0:	893b      	ldrh	r3, [r7, #8]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdb0:	6a39      	ldr	r1, [r7, #32]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fa84 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00d      	beq.n	800bdda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d107      	bne.n	800bdd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e005      	b.n	800bde6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bdda:	893b      	ldrh	r3, [r7, #8]
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	00010002 	.word	0x00010002

0800bdf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	461a      	mov	r2, r3
 800be02:	4603      	mov	r3, r0
 800be04:	817b      	strh	r3, [r7, #10]
 800be06:	460b      	mov	r3, r1
 800be08:	813b      	strh	r3, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	2200      	movs	r2, #0
 800be36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f96a 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00d      	beq.n	800be62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be54:	d103      	bne.n	800be5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e0aa      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be62:	897b      	ldrh	r3, [r7, #10]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	461a      	mov	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	6a3a      	ldr	r2, [r7, #32]
 800be76:	4952      	ldr	r1, [pc, #328]	@ (800bfc0 <I2C_RequestMemoryRead+0x1cc>)
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f000 f9a2 	bl	800c1c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e097      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	617b      	str	r3, [r7, #20]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bea0:	6a39      	ldr	r1, [r7, #32]
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 fa0c 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00d      	beq.n	800beca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d107      	bne.n	800bec6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e076      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800beca:	88fb      	ldrh	r3, [r7, #6]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d105      	bne.n	800bedc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bed0:	893b      	ldrh	r3, [r7, #8]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	611a      	str	r2, [r3, #16]
 800beda:	e021      	b.n	800bf20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bedc:	893b      	ldrh	r3, [r7, #8]
 800bede:	0a1b      	lsrs	r3, r3, #8
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800beea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beec:	6a39      	ldr	r1, [r7, #32]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f9e6 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00d      	beq.n	800bf16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d107      	bne.n	800bf12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e050      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf16:	893b      	ldrh	r3, [r7, #8]
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf22:	6a39      	ldr	r1, [r7, #32]
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f9cb 	bl	800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00d      	beq.n	800bf4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d107      	bne.n	800bf48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e035      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 f8d3 	bl	800c114 <I2C_WaitOnFlagUntilTimeout>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00d      	beq.n	800bf90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf82:	d103      	bne.n	800bf8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e013      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bf90:	897b      	ldrh	r3, [r7, #10]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	6a3a      	ldr	r2, [r7, #32]
 800bfa4:	4906      	ldr	r1, [pc, #24]	@ (800bfc0 <I2C_RequestMemoryRead+0x1cc>)
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 f90b 	bl	800c1c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	00010002 	.word	0x00010002

0800bfc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bfde:	4b4b      	ldr	r3, [pc, #300]	@ (800c10c <I2C_DMAAbort+0x148>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	08db      	lsrs	r3, r3, #3
 800bfe4:	4a4a      	ldr	r2, [pc, #296]	@ (800c110 <I2C_DMAAbort+0x14c>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	0a1a      	lsrs	r2, r3, #8
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	00da      	lsls	r2, r3, #3
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	f043 0220 	orr.w	r2, r3, #32
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c00a:	e00a      	b.n	800c022 <I2C_DMAAbort+0x5e>
    }
    count--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3b01      	subs	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c020:	d0ea      	beq.n	800bff8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02e:	2200      	movs	r2, #0
 800c030:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03e:	2200      	movs	r2, #0
 800c040:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c050:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2200      	movs	r2, #0
 800c056:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d003      	beq.n	800c068 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c064:	2200      	movs	r2, #0
 800c066:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c074:	2200      	movs	r2, #0
 800c076:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f022 0201 	bic.w	r2, r2, #1
 800c086:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b60      	cmp	r3, #96	@ 0x60
 800c092:	d10e      	bne.n	800c0b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2220      	movs	r2, #32
 800c098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c0aa:	6978      	ldr	r0, [r7, #20]
 800c0ac:	f7fe fc9e 	bl	800a9ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c0b0:	e027      	b.n	800c102 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c0b2:	7cfb      	ldrb	r3, [r7, #19]
 800c0b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c0b8:	2b28      	cmp	r3, #40	@ 0x28
 800c0ba:	d117      	bne.n	800c0ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0201 	orr.w	r2, r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c0da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2228      	movs	r2, #40	@ 0x28
 800c0e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c0ea:	e007      	b.n	800c0fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	f7fe fc6b 	bl	800a9d8 <HAL_I2C_ErrorCallback>
}
 800c102:	bf00      	nop
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000020 	.word	0x20000020
 800c110:	14f8b589 	.word	0x14f8b589

0800c114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	4613      	mov	r3, r2
 800c122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c124:	e025      	b.n	800c172 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12c:	d021      	beq.n	800c172 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c12e:	f7fc fbc9 	bl	80088c4 <HAL_GetTick>
 800c132:	4602      	mov	r2, r0
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d302      	bcc.n	800c144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d116      	bne.n	800c172 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c15e:	f043 0220 	orr.w	r2, r3, #32
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e023      	b.n	800c1ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	0c1b      	lsrs	r3, r3, #16
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d10d      	bne.n	800c198 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	43da      	mvns	r2, r3
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	4013      	ands	r3, r2
 800c188:	b29b      	uxth	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bf0c      	ite	eq
 800c18e:	2301      	moveq	r3, #1
 800c190:	2300      	movne	r3, #0
 800c192:	b2db      	uxtb	r3, r3
 800c194:	461a      	mov	r2, r3
 800c196:	e00c      	b.n	800c1b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	43da      	mvns	r2, r3
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	4013      	ands	r3, r2
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf0c      	ite	eq
 800c1aa:	2301      	moveq	r3, #1
 800c1ac:	2300      	movne	r3, #0
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d0b6      	beq.n	800c126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	607a      	str	r2, [r7, #4]
 800c1ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1d0:	e051      	b.n	800c276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1e0:	d123      	bne.n	800c22a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2220      	movs	r2, #32
 800c206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c216:	f043 0204 	orr.w	r2, r3, #4
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e046      	b.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c230:	d021      	beq.n	800c276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c232:	f7fc fb47 	bl	80088c4 <HAL_GetTick>
 800c236:	4602      	mov	r2, r0
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d302      	bcc.n	800c248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d116      	bne.n	800c276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2220      	movs	r2, #32
 800c252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c262:	f043 0220 	orr.w	r2, r3, #32
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e020      	b.n	800c2b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	0c1b      	lsrs	r3, r3, #16
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d10c      	bne.n	800c29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	43da      	mvns	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	4013      	ands	r3, r2
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bf14      	ite	ne
 800c292:	2301      	movne	r3, #1
 800c294:	2300      	moveq	r3, #0
 800c296:	b2db      	uxtb	r3, r3
 800c298:	e00b      	b.n	800c2b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	43da      	mvns	r2, r3
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bf14      	ite	ne
 800c2ac:	2301      	movne	r3, #1
 800c2ae:	2300      	moveq	r3, #0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d18d      	bne.n	800c1d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c2cc:	e02d      	b.n	800c32a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 f900 	bl	800c4d4 <I2C_IsAcknowledgeFailed>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e02d      	b.n	800c33a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e4:	d021      	beq.n	800c32a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2e6:	f7fc faed 	bl	80088c4 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d302      	bcc.n	800c2fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d116      	bne.n	800c32a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2220      	movs	r2, #32
 800c306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c316:	f043 0220 	orr.w	r2, r3, #32
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2200      	movs	r2, #0
 800c322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e007      	b.n	800c33a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c334:	2b80      	cmp	r3, #128	@ 0x80
 800c336:	d1ca      	bne.n	800c2ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	60b9      	str	r1, [r7, #8]
 800c34c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c34e:	e02d      	b.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 f8bf 	bl	800c4d4 <I2C_IsAcknowledgeFailed>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e02d      	b.n	800c3bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c366:	d021      	beq.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c368:	f7fc faac 	bl	80088c4 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d116      	bne.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2220      	movs	r2, #32
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c398:	f043 0220 	orr.w	r2, r3, #32
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e007      	b.n	800c3bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	d1ca      	bne.n	800c350 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c3d0:	4b13      	ldr	r3, [pc, #76]	@ (800c420 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	08db      	lsrs	r3, r3, #3
 800c3d6:	4a13      	ldr	r2, [pc, #76]	@ (800c424 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3dc:	0a1a      	lsrs	r2, r3, #8
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d107      	bne.n	800c402 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f6:	f043 0220 	orr.w	r2, r3, #32
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e008      	b.n	800c414 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c40c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c410:	d0e9      	beq.n	800c3e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20000020 	.word	0x20000020
 800c424:	14f8b589 	.word	0x14f8b589

0800c428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c434:	e042      	b.n	800c4bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	f003 0310 	and.w	r3, r3, #16
 800c440:	2b10      	cmp	r3, #16
 800c442:	d119      	bne.n	800c478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f06f 0210 	mvn.w	r2, #16
 800c44c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2220      	movs	r2, #32
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e029      	b.n	800c4cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c478:	f7fc fa24 	bl	80088c4 <HAL_GetTick>
 800c47c:	4602      	mov	r2, r0
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	429a      	cmp	r2, r3
 800c486:	d302      	bcc.n	800c48e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d116      	bne.n	800c4bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2220      	movs	r2, #32
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a8:	f043 0220 	orr.w	r2, r3, #32
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e007      	b.n	800c4cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4c6:	2b40      	cmp	r3, #64	@ 0x40
 800c4c8:	d1b5      	bne.n	800c436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ea:	d11b      	bne.n	800c524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c4f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c510:	f043 0204 	orr.w	r2, r3, #4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c542:	d103      	bne.n	800c54c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c54a:	e007      	b.n	800c55c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c554:	d102      	bne.n	800c55c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2208      	movs	r2, #8
 800c55a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e267      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d075      	beq.n	800c672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c586:	4b88      	ldr	r3, [pc, #544]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 030c 	and.w	r3, r3, #12
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d00c      	beq.n	800c5ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c592:	4b85      	ldr	r3, [pc, #532]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c59a:	2b08      	cmp	r3, #8
 800c59c:	d112      	bne.n	800c5c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c59e:	4b82      	ldr	r3, [pc, #520]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5aa:	d10b      	bne.n	800c5c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5ac:	4b7e      	ldr	r3, [pc, #504]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d05b      	beq.n	800c670 <HAL_RCC_OscConfig+0x108>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d157      	bne.n	800c670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e242      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5cc:	d106      	bne.n	800c5dc <HAL_RCC_OscConfig+0x74>
 800c5ce:	4b76      	ldr	r3, [pc, #472]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a75      	ldr	r2, [pc, #468]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	e01d      	b.n	800c618 <HAL_RCC_OscConfig+0xb0>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5e4:	d10c      	bne.n	800c600 <HAL_RCC_OscConfig+0x98>
 800c5e6:	4b70      	ldr	r3, [pc, #448]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a6f      	ldr	r2, [pc, #444]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	4b6d      	ldr	r3, [pc, #436]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a6c      	ldr	r2, [pc, #432]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c5f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	e00b      	b.n	800c618 <HAL_RCC_OscConfig+0xb0>
 800c600:	4b69      	ldr	r3, [pc, #420]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a68      	ldr	r2, [pc, #416]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c60a:	6013      	str	r3, [r2, #0]
 800c60c:	4b66      	ldr	r3, [pc, #408]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a65      	ldr	r2, [pc, #404]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d013      	beq.n	800c648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c620:	f7fc f950 	bl	80088c4 <HAL_GetTick>
 800c624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c626:	e008      	b.n	800c63a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c628:	f7fc f94c 	bl	80088c4 <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b64      	cmp	r3, #100	@ 0x64
 800c634:	d901      	bls.n	800c63a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e207      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c63a:	4b5b      	ldr	r3, [pc, #364]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0f0      	beq.n	800c628 <HAL_RCC_OscConfig+0xc0>
 800c646:	e014      	b.n	800c672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c648:	f7fc f93c 	bl	80088c4 <HAL_GetTick>
 800c64c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c64e:	e008      	b.n	800c662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c650:	f7fc f938 	bl	80088c4 <HAL_GetTick>
 800c654:	4602      	mov	r2, r0
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	2b64      	cmp	r3, #100	@ 0x64
 800c65c:	d901      	bls.n	800c662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c65e:	2303      	movs	r3, #3
 800c660:	e1f3      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c662:	4b51      	ldr	r3, [pc, #324]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1f0      	bne.n	800c650 <HAL_RCC_OscConfig+0xe8>
 800c66e:	e000      	b.n	800c672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d063      	beq.n	800c746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c67e:	4b4a      	ldr	r3, [pc, #296]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f003 030c 	and.w	r3, r3, #12
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00b      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c68a:	4b47      	ldr	r3, [pc, #284]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c692:	2b08      	cmp	r3, #8
 800c694:	d11c      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c696:	4b44      	ldr	r3, [pc, #272]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d116      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6a2:	4b41      	ldr	r3, [pc, #260]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0302 	and.w	r3, r3, #2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d005      	beq.n	800c6ba <HAL_RCC_OscConfig+0x152>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d001      	beq.n	800c6ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e1c7      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6ba:	4b3b      	ldr	r3, [pc, #236]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	4937      	ldr	r1, [pc, #220]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6ce:	e03a      	b.n	800c746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d020      	beq.n	800c71a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6d8:	4b34      	ldr	r3, [pc, #208]	@ (800c7ac <HAL_RCC_OscConfig+0x244>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6de:	f7fc f8f1 	bl	80088c4 <HAL_GetTick>
 800c6e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6e4:	e008      	b.n	800c6f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c6e6:	f7fc f8ed 	bl	80088c4 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d901      	bls.n	800c6f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e1a8      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0f0      	beq.n	800c6e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c704:	4b28      	ldr	r3, [pc, #160]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	4925      	ldr	r1, [pc, #148]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c714:	4313      	orrs	r3, r2
 800c716:	600b      	str	r3, [r1, #0]
 800c718:	e015      	b.n	800c746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c71a:	4b24      	ldr	r3, [pc, #144]	@ (800c7ac <HAL_RCC_OscConfig+0x244>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c720:	f7fc f8d0 	bl	80088c4 <HAL_GetTick>
 800c724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c726:	e008      	b.n	800c73a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c728:	f7fc f8cc 	bl	80088c4 <HAL_GetTick>
 800c72c:	4602      	mov	r2, r0
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	1ad3      	subs	r3, r2, r3
 800c732:	2b02      	cmp	r3, #2
 800c734:	d901      	bls.n	800c73a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c736:	2303      	movs	r3, #3
 800c738:	e187      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c73a:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 0302 	and.w	r3, r3, #2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1f0      	bne.n	800c728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 0308 	and.w	r3, r3, #8
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d036      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d016      	beq.n	800c788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c75a:	4b15      	ldr	r3, [pc, #84]	@ (800c7b0 <HAL_RCC_OscConfig+0x248>)
 800c75c:	2201      	movs	r2, #1
 800c75e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c760:	f7fc f8b0 	bl	80088c4 <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c766:	e008      	b.n	800c77a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c768:	f7fc f8ac 	bl	80088c4 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b02      	cmp	r3, #2
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e167      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c77a:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a8 <HAL_RCC_OscConfig+0x240>)
 800c77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d0f0      	beq.n	800c768 <HAL_RCC_OscConfig+0x200>
 800c786:	e01b      	b.n	800c7c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c788:	4b09      	ldr	r3, [pc, #36]	@ (800c7b0 <HAL_RCC_OscConfig+0x248>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c78e:	f7fc f899 	bl	80088c4 <HAL_GetTick>
 800c792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c794:	e00e      	b.n	800c7b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c796:	f7fc f895 	bl	80088c4 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d907      	bls.n	800c7b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e150      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
 800c7a8:	40023800 	.word	0x40023800
 800c7ac:	42470000 	.word	0x42470000
 800c7b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7b4:	4b88      	ldr	r3, [pc, #544]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c7b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1ea      	bne.n	800c796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0304 	and.w	r3, r3, #4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 8097 	beq.w	800c8fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7d2:	4b81      	ldr	r3, [pc, #516]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10f      	bne.n	800c7fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	4b7d      	ldr	r3, [pc, #500]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e6:	4a7c      	ldr	r2, [pc, #496]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c7e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800c7ee:	4b7a      	ldr	r3, [pc, #488]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7f6:	60bb      	str	r3, [r7, #8]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7fe:	4b77      	ldr	r3, [pc, #476]	@ (800c9dc <HAL_RCC_OscConfig+0x474>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c806:	2b00      	cmp	r3, #0
 800c808:	d118      	bne.n	800c83c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c80a:	4b74      	ldr	r3, [pc, #464]	@ (800c9dc <HAL_RCC_OscConfig+0x474>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a73      	ldr	r2, [pc, #460]	@ (800c9dc <HAL_RCC_OscConfig+0x474>)
 800c810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c816:	f7fc f855 	bl	80088c4 <HAL_GetTick>
 800c81a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c81c:	e008      	b.n	800c830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c81e:	f7fc f851 	bl	80088c4 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d901      	bls.n	800c830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e10c      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c830:	4b6a      	ldr	r3, [pc, #424]	@ (800c9dc <HAL_RCC_OscConfig+0x474>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0f0      	beq.n	800c81e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d106      	bne.n	800c852 <HAL_RCC_OscConfig+0x2ea>
 800c844:	4b64      	ldr	r3, [pc, #400]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c848:	4a63      	ldr	r2, [pc, #396]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c84a:	f043 0301 	orr.w	r3, r3, #1
 800c84e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c850:	e01c      	b.n	800c88c <HAL_RCC_OscConfig+0x324>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	2b05      	cmp	r3, #5
 800c858:	d10c      	bne.n	800c874 <HAL_RCC_OscConfig+0x30c>
 800c85a:	4b5f      	ldr	r3, [pc, #380]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c85c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c85e:	4a5e      	ldr	r2, [pc, #376]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c860:	f043 0304 	orr.w	r3, r3, #4
 800c864:	6713      	str	r3, [r2, #112]	@ 0x70
 800c866:	4b5c      	ldr	r3, [pc, #368]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c86a:	4a5b      	ldr	r2, [pc, #364]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c86c:	f043 0301 	orr.w	r3, r3, #1
 800c870:	6713      	str	r3, [r2, #112]	@ 0x70
 800c872:	e00b      	b.n	800c88c <HAL_RCC_OscConfig+0x324>
 800c874:	4b58      	ldr	r3, [pc, #352]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c878:	4a57      	ldr	r2, [pc, #348]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c87a:	f023 0301 	bic.w	r3, r3, #1
 800c87e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c880:	4b55      	ldr	r3, [pc, #340]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c884:	4a54      	ldr	r2, [pc, #336]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c886:	f023 0304 	bic.w	r3, r3, #4
 800c88a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d015      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c894:	f7fc f816 	bl	80088c4 <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c89a:	e00a      	b.n	800c8b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c89c:	f7fc f812 	bl	80088c4 <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d901      	bls.n	800c8b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e0cb      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8b2:	4b49      	ldr	r3, [pc, #292]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c8b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0ee      	beq.n	800c89c <HAL_RCC_OscConfig+0x334>
 800c8be:	e014      	b.n	800c8ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8c0:	f7fc f800 	bl	80088c4 <HAL_GetTick>
 800c8c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8c6:	e00a      	b.n	800c8de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8c8:	f7fb fffc 	bl	80088c4 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d901      	bls.n	800c8de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e0b5      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8de:	4b3e      	ldr	r3, [pc, #248]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1ee      	bne.n	800c8c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d105      	bne.n	800c8fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8f0:	4b39      	ldr	r3, [pc, #228]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c8f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f4:	4a38      	ldr	r2, [pc, #224]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c8f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 80a1 	beq.w	800ca48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c906:	4b34      	ldr	r3, [pc, #208]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f003 030c 	and.w	r3, r3, #12
 800c90e:	2b08      	cmp	r3, #8
 800c910:	d05c      	beq.n	800c9cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d141      	bne.n	800c99e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c91a:	4b31      	ldr	r3, [pc, #196]	@ (800c9e0 <HAL_RCC_OscConfig+0x478>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c920:	f7fb ffd0 	bl	80088c4 <HAL_GetTick>
 800c924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c926:	e008      	b.n	800c93a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c928:	f7fb ffcc 	bl	80088c4 <HAL_GetTick>
 800c92c:	4602      	mov	r2, r0
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	2b02      	cmp	r3, #2
 800c934:	d901      	bls.n	800c93a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c936:	2303      	movs	r3, #3
 800c938:	e087      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c93a:	4b27      	ldr	r3, [pc, #156]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f0      	bne.n	800c928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	69da      	ldr	r2, [r3, #28]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	431a      	orrs	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c954:	019b      	lsls	r3, r3, #6
 800c956:	431a      	orrs	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c95c:	085b      	lsrs	r3, r3, #1
 800c95e:	3b01      	subs	r3, #1
 800c960:	041b      	lsls	r3, r3, #16
 800c962:	431a      	orrs	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c968:	061b      	lsls	r3, r3, #24
 800c96a:	491b      	ldr	r1, [pc, #108]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c970:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <HAL_RCC_OscConfig+0x478>)
 800c972:	2201      	movs	r2, #1
 800c974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c976:	f7fb ffa5 	bl	80088c4 <HAL_GetTick>
 800c97a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c97c:	e008      	b.n	800c990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c97e:	f7fb ffa1 	bl	80088c4 <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d901      	bls.n	800c990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e05c      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c990:	4b11      	ldr	r3, [pc, #68]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0f0      	beq.n	800c97e <HAL_RCC_OscConfig+0x416>
 800c99c:	e054      	b.n	800ca48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <HAL_RCC_OscConfig+0x478>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9a4:	f7fb ff8e 	bl	80088c4 <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9aa:	e008      	b.n	800c9be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9ac:	f7fb ff8a 	bl	80088c4 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d901      	bls.n	800c9be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e045      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9be:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <HAL_RCC_OscConfig+0x470>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f0      	bne.n	800c9ac <HAL_RCC_OscConfig+0x444>
 800c9ca:	e03d      	b.n	800ca48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d107      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e038      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	40007000 	.word	0x40007000
 800c9e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c9e4:	4b1b      	ldr	r3, [pc, #108]	@ (800ca54 <HAL_RCC_OscConfig+0x4ec>)
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	699b      	ldr	r3, [r3, #24]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d028      	beq.n	800ca44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d121      	bne.n	800ca44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d11a      	bne.n	800ca44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ca14:	4013      	ands	r3, r2
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ca1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d111      	bne.n	800ca44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca2a:	085b      	lsrs	r3, r3, #1
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d107      	bne.n	800ca44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d001      	beq.n	800ca48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e000      	b.n	800ca4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	40023800 	.word	0x40023800

0800ca58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e0cc      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ca6c:	4b68      	ldr	r3, [pc, #416]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0307 	and.w	r3, r3, #7
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d90c      	bls.n	800ca94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca7a:	4b65      	ldr	r3, [pc, #404]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca82:	4b63      	ldr	r3, [pc, #396]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d001      	beq.n	800ca94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e0b8      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0302 	and.w	r3, r3, #2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d020      	beq.n	800cae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800caac:	4b59      	ldr	r3, [pc, #356]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	4a58      	ldr	r2, [pc, #352]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cab2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800cab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0308 	and.w	r3, r3, #8
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cac4:	4b53      	ldr	r3, [pc, #332]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	4a52      	ldr	r2, [pc, #328]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800caca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800cace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cad0:	4b50      	ldr	r3, [pc, #320]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	494d      	ldr	r1, [pc, #308]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d044      	beq.n	800cb78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d107      	bne.n	800cb06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800caf6:	4b47      	ldr	r3, [pc, #284]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d119      	bne.n	800cb36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e07f      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d003      	beq.n	800cb16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb12:	2b03      	cmp	r3, #3
 800cb14:	d107      	bne.n	800cb26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb16:	4b3f      	ldr	r3, [pc, #252]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d109      	bne.n	800cb36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e06f      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb26:	4b3b      	ldr	r3, [pc, #236]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e067      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb36:	4b37      	ldr	r3, [pc, #220]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f023 0203 	bic.w	r2, r3, #3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	4934      	ldr	r1, [pc, #208]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cb48:	f7fb febc 	bl	80088c4 <HAL_GetTick>
 800cb4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb4e:	e00a      	b.n	800cb66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb50:	f7fb feb8 	bl	80088c4 <HAL_GetTick>
 800cb54:	4602      	mov	r2, r0
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e04f      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb66:	4b2b      	ldr	r3, [pc, #172]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	f003 020c 	and.w	r2, r3, #12
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d1eb      	bne.n	800cb50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cb78:	4b25      	ldr	r3, [pc, #148]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d20c      	bcs.n	800cba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb86:	4b22      	ldr	r3, [pc, #136]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	b2d2      	uxtb	r2, r2
 800cb8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb8e:	4b20      	ldr	r3, [pc, #128]	@ (800cc10 <HAL_RCC_ClockConfig+0x1b8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d001      	beq.n	800cba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e032      	b.n	800cc06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0304 	and.w	r3, r3, #4
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cbac:	4b19      	ldr	r3, [pc, #100]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	4916      	ldr	r1, [pc, #88]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cbca:	4b12      	ldr	r3, [pc, #72]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	490e      	ldr	r1, [pc, #56]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cbde:	f000 f821 	bl	800cc24 <HAL_RCC_GetSysClockFreq>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800cc14 <HAL_RCC_ClockConfig+0x1bc>)
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	091b      	lsrs	r3, r3, #4
 800cbea:	f003 030f 	and.w	r3, r3, #15
 800cbee:	490a      	ldr	r1, [pc, #40]	@ (800cc18 <HAL_RCC_ClockConfig+0x1c0>)
 800cbf0:	5ccb      	ldrb	r3, [r1, r3]
 800cbf2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf6:	4a09      	ldr	r2, [pc, #36]	@ (800cc1c <HAL_RCC_ClockConfig+0x1c4>)
 800cbf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cbfa:	4b09      	ldr	r3, [pc, #36]	@ (800cc20 <HAL_RCC_ClockConfig+0x1c8>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fb fe1c 	bl	800883c <HAL_InitTick>

  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	40023c00 	.word	0x40023c00
 800cc14:	40023800 	.word	0x40023800
 800cc18:	08011370 	.word	0x08011370
 800cc1c:	20000020 	.word	0x20000020
 800cc20:	20000024 	.word	0x20000024

0800cc24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc28:	b090      	sub	sp, #64	@ 0x40
 800cc2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc34:	2300      	movs	r3, #0
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc3c:	4b59      	ldr	r3, [pc, #356]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	f003 030c 	and.w	r3, r3, #12
 800cc44:	2b08      	cmp	r3, #8
 800cc46:	d00d      	beq.n	800cc64 <HAL_RCC_GetSysClockFreq+0x40>
 800cc48:	2b08      	cmp	r3, #8
 800cc4a:	f200 80a1 	bhi.w	800cd90 <HAL_RCC_GetSysClockFreq+0x16c>
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <HAL_RCC_GetSysClockFreq+0x34>
 800cc52:	2b04      	cmp	r3, #4
 800cc54:	d003      	beq.n	800cc5e <HAL_RCC_GetSysClockFreq+0x3a>
 800cc56:	e09b      	b.n	800cd90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc58:	4b53      	ldr	r3, [pc, #332]	@ (800cda8 <HAL_RCC_GetSysClockFreq+0x184>)
 800cc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800cc5c:	e09b      	b.n	800cd96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc5e:	4b53      	ldr	r3, [pc, #332]	@ (800cdac <HAL_RCC_GetSysClockFreq+0x188>)
 800cc60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cc62:	e098      	b.n	800cd96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cc64:	4b4f      	ldr	r3, [pc, #316]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cc6e:	4b4d      	ldr	r3, [pc, #308]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d028      	beq.n	800cccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc7a:	4b4a      	ldr	r3, [pc, #296]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	099b      	lsrs	r3, r3, #6
 800cc80:	2200      	movs	r2, #0
 800cc82:	623b      	str	r3, [r7, #32]
 800cc84:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	4b47      	ldr	r3, [pc, #284]	@ (800cdac <HAL_RCC_GetSysClockFreq+0x188>)
 800cc90:	fb03 f201 	mul.w	r2, r3, r1
 800cc94:	2300      	movs	r3, #0
 800cc96:	fb00 f303 	mul.w	r3, r0, r3
 800cc9a:	4413      	add	r3, r2
 800cc9c:	4a43      	ldr	r2, [pc, #268]	@ (800cdac <HAL_RCC_GetSysClockFreq+0x188>)
 800cc9e:	fba0 1202 	umull	r1, r2, r0, r2
 800cca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cca4:	460a      	mov	r2, r1
 800cca6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccaa:	4413      	add	r3, r2
 800ccac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	61fa      	str	r2, [r7, #28]
 800ccb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ccbe:	f7f3 ff6f 	bl	8000ba0 <__aeabi_uldivmod>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccca:	e053      	b.n	800cd74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cccc:	4b35      	ldr	r3, [pc, #212]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	099b      	lsrs	r3, r3, #6
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	613b      	str	r3, [r7, #16]
 800ccd6:	617a      	str	r2, [r7, #20]
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ccde:	f04f 0b00 	mov.w	fp, #0
 800cce2:	4652      	mov	r2, sl
 800cce4:	465b      	mov	r3, fp
 800cce6:	f04f 0000 	mov.w	r0, #0
 800ccea:	f04f 0100 	mov.w	r1, #0
 800ccee:	0159      	lsls	r1, r3, #5
 800ccf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ccf4:	0150      	lsls	r0, r2, #5
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	ebb2 080a 	subs.w	r8, r2, sl
 800ccfe:	eb63 090b 	sbc.w	r9, r3, fp
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	f04f 0300 	mov.w	r3, #0
 800cd0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800cd0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800cd12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800cd16:	ebb2 0408 	subs.w	r4, r2, r8
 800cd1a:	eb63 0509 	sbc.w	r5, r3, r9
 800cd1e:	f04f 0200 	mov.w	r2, #0
 800cd22:	f04f 0300 	mov.w	r3, #0
 800cd26:	00eb      	lsls	r3, r5, #3
 800cd28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd2c:	00e2      	lsls	r2, r4, #3
 800cd2e:	4614      	mov	r4, r2
 800cd30:	461d      	mov	r5, r3
 800cd32:	eb14 030a 	adds.w	r3, r4, sl
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	eb45 030b 	adc.w	r3, r5, fp
 800cd3c:	607b      	str	r3, [r7, #4]
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	f04f 0300 	mov.w	r3, #0
 800cd46:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	028b      	lsls	r3, r1, #10
 800cd4e:	4621      	mov	r1, r4
 800cd50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cd54:	4621      	mov	r1, r4
 800cd56:	028a      	lsls	r2, r1, #10
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5e:	2200      	movs	r2, #0
 800cd60:	60bb      	str	r3, [r7, #8]
 800cd62:	60fa      	str	r2, [r7, #12]
 800cd64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd68:	f7f3 ff1a 	bl	8000ba0 <__aeabi_uldivmod>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4613      	mov	r3, r2
 800cd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cd74:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	0c1b      	lsrs	r3, r3, #16
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	3301      	adds	r3, #1
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800cd84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cd8e:	e002      	b.n	800cd96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd90:	4b05      	ldr	r3, [pc, #20]	@ (800cda8 <HAL_RCC_GetSysClockFreq+0x184>)
 800cd92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cd94:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3740      	adds	r7, #64	@ 0x40
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cda2:	bf00      	nop
 800cda4:	40023800 	.word	0x40023800
 800cda8:	00f42400 	.word	0x00f42400
 800cdac:	017d7840 	.word	0x017d7840

0800cdb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cdb4:	4b03      	ldr	r3, [pc, #12]	@ (800cdc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	20000020 	.word	0x20000020

0800cdc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cdcc:	f7ff fff0 	bl	800cdb0 <HAL_RCC_GetHCLKFreq>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	4b05      	ldr	r3, [pc, #20]	@ (800cde8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	0a9b      	lsrs	r3, r3, #10
 800cdd8:	f003 0307 	and.w	r3, r3, #7
 800cddc:	4903      	ldr	r1, [pc, #12]	@ (800cdec <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdde:	5ccb      	ldrb	r3, [r1, r3]
 800cde0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	40023800 	.word	0x40023800
 800cdec:	08011380 	.word	0x08011380

0800cdf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cdf4:	f7ff ffdc 	bl	800cdb0 <HAL_RCC_GetHCLKFreq>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	4b05      	ldr	r3, [pc, #20]	@ (800ce10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	0b5b      	lsrs	r3, r3, #13
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	4903      	ldr	r1, [pc, #12]	@ (800ce14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce06:	5ccb      	ldrb	r3, [r1, r3]
 800ce08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	40023800 	.word	0x40023800
 800ce14:	08011380 	.word	0x08011380

0800ce18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	e041      	b.n	800ceae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7fb f950 	bl	80080e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2202      	movs	r2, #2
 800ce48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3304      	adds	r3, #4
 800ce54:	4619      	mov	r1, r3
 800ce56:	4610      	mov	r0, r2
 800ce58:	f000 fdae 	bl	800d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
	...

0800ceb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d001      	beq.n	800ced0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	e04e      	b.n	800cf6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2202      	movs	r2, #2
 800ced4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	68da      	ldr	r2, [r3, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f042 0201 	orr.w	r2, r2, #1
 800cee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a23      	ldr	r2, [pc, #140]	@ (800cf7c <HAL_TIM_Base_Start_IT+0xc4>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d022      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cefa:	d01d      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a1f      	ldr	r2, [pc, #124]	@ (800cf80 <HAL_TIM_Base_Start_IT+0xc8>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d018      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a1e      	ldr	r2, [pc, #120]	@ (800cf84 <HAL_TIM_Base_Start_IT+0xcc>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d013      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1c      	ldr	r2, [pc, #112]	@ (800cf88 <HAL_TIM_Base_Start_IT+0xd0>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d00e      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a1b      	ldr	r2, [pc, #108]	@ (800cf8c <HAL_TIM_Base_Start_IT+0xd4>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d009      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a19      	ldr	r2, [pc, #100]	@ (800cf90 <HAL_TIM_Base_Start_IT+0xd8>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d004      	beq.n	800cf38 <HAL_TIM_Base_Start_IT+0x80>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a18      	ldr	r2, [pc, #96]	@ (800cf94 <HAL_TIM_Base_Start_IT+0xdc>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d111      	bne.n	800cf5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	f003 0307 	and.w	r3, r3, #7
 800cf42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2b06      	cmp	r3, #6
 800cf48:	d010      	beq.n	800cf6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f042 0201 	orr.w	r2, r2, #1
 800cf58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf5a:	e007      	b.n	800cf6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f042 0201 	orr.w	r2, r2, #1
 800cf6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	40010000 	.word	0x40010000
 800cf80:	40000400 	.word	0x40000400
 800cf84:	40000800 	.word	0x40000800
 800cf88:	40000c00 	.word	0x40000c00
 800cf8c:	40010400 	.word	0x40010400
 800cf90:	40014000 	.word	0x40014000
 800cf94:	40001800 	.word	0x40001800

0800cf98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d101      	bne.n	800cfaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e041      	b.n	800d02e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f839 	bl	800d036 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	f000 fcee 	bl	800d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
	...

0800d04c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <HAL_TIM_PWM_Start+0x24>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b01      	cmp	r3, #1
 800d066:	bf14      	ite	ne
 800d068:	2301      	movne	r3, #1
 800d06a:	2300      	moveq	r3, #0
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	e022      	b.n	800d0b6 <HAL_TIM_PWM_Start+0x6a>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b04      	cmp	r3, #4
 800d074:	d109      	bne.n	800d08a <HAL_TIM_PWM_Start+0x3e>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b01      	cmp	r3, #1
 800d080:	bf14      	ite	ne
 800d082:	2301      	movne	r3, #1
 800d084:	2300      	moveq	r3, #0
 800d086:	b2db      	uxtb	r3, r3
 800d088:	e015      	b.n	800d0b6 <HAL_TIM_PWM_Start+0x6a>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b08      	cmp	r3, #8
 800d08e:	d109      	bne.n	800d0a4 <HAL_TIM_PWM_Start+0x58>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b01      	cmp	r3, #1
 800d09a:	bf14      	ite	ne
 800d09c:	2301      	movne	r3, #1
 800d09e:	2300      	moveq	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	e008      	b.n	800d0b6 <HAL_TIM_PWM_Start+0x6a>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	bf14      	ite	ne
 800d0b0:	2301      	movne	r3, #1
 800d0b2:	2300      	moveq	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e07c      	b.n	800d1b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <HAL_TIM_PWM_Start+0x82>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0cc:	e013      	b.n	800d0f6 <HAL_TIM_PWM_Start+0xaa>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d104      	bne.n	800d0de <HAL_TIM_PWM_Start+0x92>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0dc:	e00b      	b.n	800d0f6 <HAL_TIM_PWM_Start+0xaa>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d104      	bne.n	800d0ee <HAL_TIM_PWM_Start+0xa2>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0ec:	e003      	b.n	800d0f6 <HAL_TIM_PWM_Start+0xaa>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 ff44 	bl	800df8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a2d      	ldr	r2, [pc, #180]	@ (800d1c0 <HAL_TIM_PWM_Start+0x174>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d004      	beq.n	800d118 <HAL_TIM_PWM_Start+0xcc>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a2c      	ldr	r2, [pc, #176]	@ (800d1c4 <HAL_TIM_PWM_Start+0x178>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d101      	bne.n	800d11c <HAL_TIM_PWM_Start+0xd0>
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <HAL_TIM_PWM_Start+0xd2>
 800d11c:	2300      	movs	r3, #0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d007      	beq.n	800d132 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d130:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a22      	ldr	r2, [pc, #136]	@ (800d1c0 <HAL_TIM_PWM_Start+0x174>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d022      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d144:	d01d      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a1f      	ldr	r2, [pc, #124]	@ (800d1c8 <HAL_TIM_PWM_Start+0x17c>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d018      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a1d      	ldr	r2, [pc, #116]	@ (800d1cc <HAL_TIM_PWM_Start+0x180>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d013      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a1c      	ldr	r2, [pc, #112]	@ (800d1d0 <HAL_TIM_PWM_Start+0x184>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d00e      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a16      	ldr	r2, [pc, #88]	@ (800d1c4 <HAL_TIM_PWM_Start+0x178>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d009      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a18      	ldr	r2, [pc, #96]	@ (800d1d4 <HAL_TIM_PWM_Start+0x188>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d004      	beq.n	800d182 <HAL_TIM_PWM_Start+0x136>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a16      	ldr	r2, [pc, #88]	@ (800d1d8 <HAL_TIM_PWM_Start+0x18c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d111      	bne.n	800d1a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b06      	cmp	r3, #6
 800d192:	d010      	beq.n	800d1b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a4:	e007      	b.n	800d1b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f042 0201 	orr.w	r2, r2, #1
 800d1b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	40010000 	.word	0x40010000
 800d1c4:	40010400 	.word	0x40010400
 800d1c8:	40000400 	.word	0x40000400
 800d1cc:	40000800 	.word	0x40000800
 800d1d0:	40000c00 	.word	0x40000c00
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40001800 	.word	0x40001800

0800d1dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e097      	b.n	800d320 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d106      	bne.n	800d20a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7fa ffef 	bl	80081e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	6812      	ldr	r2, [r2, #0]
 800d21c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d220:	f023 0307 	bic.w	r3, r3, #7
 800d224:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4619      	mov	r1, r3
 800d230:	4610      	mov	r0, r2
 800d232:	f000 fbc1 	bl	800d9b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6a1b      	ldr	r3, [r3, #32]
 800d24c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	4313      	orrs	r3, r2
 800d256:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d25e:	f023 0303 	bic.w	r3, r3, #3
 800d262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	4313      	orrs	r3, r2
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	4313      	orrs	r3, r2
 800d274:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d27c:	f023 030c 	bic.w	r3, r3, #12
 800d280:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d28c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	69db      	ldr	r3, [r3, #28]
 800d296:	021b      	lsls	r3, r3, #8
 800d298:	4313      	orrs	r3, r2
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	4313      	orrs	r3, r2
 800d29e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	011a      	lsls	r2, r3, #4
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	031b      	lsls	r3, r3, #12
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d2ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d2c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d338:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d340:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d348:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d350:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d110      	bne.n	800d37a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d102      	bne.n	800d364 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d35e:	7b7b      	ldrb	r3, [r7, #13]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d001      	beq.n	800d368 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d364:	2301      	movs	r3, #1
 800d366:	e069      	b.n	800d43c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2202      	movs	r2, #2
 800d36c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2202      	movs	r2, #2
 800d374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d378:	e031      	b.n	800d3de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	d110      	bne.n	800d3a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d380:	7bbb      	ldrb	r3, [r7, #14]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d102      	bne.n	800d38c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d386:	7b3b      	ldrb	r3, [r7, #12]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d001      	beq.n	800d390 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e055      	b.n	800d43c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2202      	movs	r2, #2
 800d394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d3a0:	e01d      	b.n	800d3de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d108      	bne.n	800d3ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d105      	bne.n	800d3ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d3ae:	7b7b      	ldrb	r3, [r7, #13]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d102      	bne.n	800d3ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d3b4:	7b3b      	ldrb	r3, [r7, #12]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d001      	beq.n	800d3be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e03e      	b.n	800d43c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2202      	movs	r2, #2
 800d3da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <HAL_TIM_Encoder_Start+0xc4>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d008      	beq.n	800d3fc <HAL_TIM_Encoder_Start+0xd4>
 800d3ea:	e00f      	b.n	800d40c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 fdc9 	bl	800df8c <TIM_CCxChannelCmd>
      break;
 800d3fa:	e016      	b.n	800d42a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2201      	movs	r2, #1
 800d402:	2104      	movs	r1, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fdc1 	bl	800df8c <TIM_CCxChannelCmd>
      break;
 800d40a:	e00e      	b.n	800d42a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2201      	movs	r2, #1
 800d412:	2100      	movs	r1, #0
 800d414:	4618      	mov	r0, r3
 800d416:	f000 fdb9 	bl	800df8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2201      	movs	r2, #1
 800d420:	2104      	movs	r1, #4
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fdb2 	bl	800df8c <TIM_CCxChannelCmd>
      break;
 800d428:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f042 0201 	orr.w	r2, r2, #1
 800d438:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b02      	cmp	r3, #2
 800d458:	d122      	bne.n	800d4a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f003 0302 	and.w	r3, r3, #2
 800d464:	2b02      	cmp	r3, #2
 800d466:	d11b      	bne.n	800d4a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f06f 0202 	mvn.w	r2, #2
 800d470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	f003 0303 	and.w	r3, r3, #3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fa77 	bl	800d97a <HAL_TIM_IC_CaptureCallback>
 800d48c:	e005      	b.n	800d49a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fa69 	bl	800d966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fa7a 	bl	800d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d122      	bne.n	800d4f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	f003 0304 	and.w	r3, r3, #4
 800d4b8:	2b04      	cmp	r3, #4
 800d4ba:	d11b      	bne.n	800d4f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f06f 0204 	mvn.w	r2, #4
 800d4c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fa4d 	bl	800d97a <HAL_TIM_IC_CaptureCallback>
 800d4e0:	e005      	b.n	800d4ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fa3f 	bl	800d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fa50 	bl	800d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	f003 0308 	and.w	r3, r3, #8
 800d4fe:	2b08      	cmp	r3, #8
 800d500:	d122      	bne.n	800d548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b08      	cmp	r3, #8
 800d50e:	d11b      	bne.n	800d548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f06f 0208 	mvn.w	r2, #8
 800d518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2204      	movs	r2, #4
 800d51e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	f003 0303 	and.w	r3, r3, #3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fa23 	bl	800d97a <HAL_TIM_IC_CaptureCallback>
 800d534:	e005      	b.n	800d542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fa15 	bl	800d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fa26 	bl	800d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	f003 0310 	and.w	r3, r3, #16
 800d552:	2b10      	cmp	r3, #16
 800d554:	d122      	bne.n	800d59c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	f003 0310 	and.w	r3, r3, #16
 800d560:	2b10      	cmp	r3, #16
 800d562:	d11b      	bne.n	800d59c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f06f 0210 	mvn.w	r2, #16
 800d56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2208      	movs	r2, #8
 800d572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	69db      	ldr	r3, [r3, #28]
 800d57a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f9f9 	bl	800d97a <HAL_TIM_IC_CaptureCallback>
 800d588:	e005      	b.n	800d596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 f9eb 	bl	800d966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f9fc 	bl	800d98e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d10e      	bne.n	800d5c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d107      	bne.n	800d5c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f06f 0201 	mvn.w	r2, #1
 800d5c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7f3 fe4e 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5d2:	2b80      	cmp	r3, #128	@ 0x80
 800d5d4:	d10e      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5e0:	2b80      	cmp	r3, #128	@ 0x80
 800d5e2:	d107      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fdca 	bl	800e188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5fe:	2b40      	cmp	r3, #64	@ 0x40
 800d600:	d10e      	bne.n	800d620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d60c:	2b40      	cmp	r3, #64	@ 0x40
 800d60e:	d107      	bne.n	800d620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f9c1 	bl	800d9a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	f003 0320 	and.w	r3, r3, #32
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	d10e      	bne.n	800d64c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b20      	cmp	r3, #32
 800d63a:	d107      	bne.n	800d64c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f06f 0220 	mvn.w	r2, #32
 800d644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fd94 	bl	800e174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d101      	bne.n	800d672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d66e:	2302      	movs	r3, #2
 800d670:	e0ae      	b.n	800d7d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b0c      	cmp	r3, #12
 800d67e:	f200 809f 	bhi.w	800d7c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d682:	a201      	add	r2, pc, #4	@ (adr r2, 800d688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d688:	0800d6bd 	.word	0x0800d6bd
 800d68c:	0800d7c1 	.word	0x0800d7c1
 800d690:	0800d7c1 	.word	0x0800d7c1
 800d694:	0800d7c1 	.word	0x0800d7c1
 800d698:	0800d6fd 	.word	0x0800d6fd
 800d69c:	0800d7c1 	.word	0x0800d7c1
 800d6a0:	0800d7c1 	.word	0x0800d7c1
 800d6a4:	0800d7c1 	.word	0x0800d7c1
 800d6a8:	0800d73f 	.word	0x0800d73f
 800d6ac:	0800d7c1 	.word	0x0800d7c1
 800d6b0:	0800d7c1 	.word	0x0800d7c1
 800d6b4:	0800d7c1 	.word	0x0800d7c1
 800d6b8:	0800d77f 	.word	0x0800d77f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68b9      	ldr	r1, [r7, #8]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fa18 	bl	800daf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	699a      	ldr	r2, [r3, #24]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 0208 	orr.w	r2, r2, #8
 800d6d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	699a      	ldr	r2, [r3, #24]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f022 0204 	bic.w	r2, r2, #4
 800d6e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6999      	ldr	r1, [r3, #24]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	691a      	ldr	r2, [r3, #16]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	430a      	orrs	r2, r1
 800d6f8:	619a      	str	r2, [r3, #24]
      break;
 800d6fa:	e064      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fa68 	bl	800dbd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	699a      	ldr	r2, [r3, #24]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	699a      	ldr	r2, [r3, #24]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6999      	ldr	r1, [r3, #24]
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	021a      	lsls	r2, r3, #8
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	430a      	orrs	r2, r1
 800d73a:	619a      	str	r2, [r3, #24]
      break;
 800d73c:	e043      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 fabd 	bl	800dcc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	69da      	ldr	r2, [r3, #28]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f042 0208 	orr.w	r2, r2, #8
 800d758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	69da      	ldr	r2, [r3, #28]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 0204 	bic.w	r2, r2, #4
 800d768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	69d9      	ldr	r1, [r3, #28]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	430a      	orrs	r2, r1
 800d77a:	61da      	str	r2, [r3, #28]
      break;
 800d77c:	e023      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fb11 	bl	800ddac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	69da      	ldr	r2, [r3, #28]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	69da      	ldr	r2, [r3, #28]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	69d9      	ldr	r1, [r3, #28]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	021a      	lsls	r2, r3, #8
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	430a      	orrs	r2, r1
 800d7bc:	61da      	str	r2, [r3, #28]
      break;
 800d7be:	e002      	b.n	800d7c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d101      	bne.n	800d7f4 <HAL_TIM_ConfigClockSource+0x1c>
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	e0b4      	b.n	800d95e <HAL_TIM_ConfigClockSource+0x186>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d81a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d82c:	d03e      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0xd4>
 800d82e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d832:	f200 8087 	bhi.w	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d83a:	f000 8086 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x172>
 800d83e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d842:	d87f      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d844:	2b70      	cmp	r3, #112	@ 0x70
 800d846:	d01a      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0xa6>
 800d848:	2b70      	cmp	r3, #112	@ 0x70
 800d84a:	d87b      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d84c:	2b60      	cmp	r3, #96	@ 0x60
 800d84e:	d050      	beq.n	800d8f2 <HAL_TIM_ConfigClockSource+0x11a>
 800d850:	2b60      	cmp	r3, #96	@ 0x60
 800d852:	d877      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d854:	2b50      	cmp	r3, #80	@ 0x50
 800d856:	d03c      	beq.n	800d8d2 <HAL_TIM_ConfigClockSource+0xfa>
 800d858:	2b50      	cmp	r3, #80	@ 0x50
 800d85a:	d873      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d85c:	2b40      	cmp	r3, #64	@ 0x40
 800d85e:	d058      	beq.n	800d912 <HAL_TIM_ConfigClockSource+0x13a>
 800d860:	2b40      	cmp	r3, #64	@ 0x40
 800d862:	d86f      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d864:	2b30      	cmp	r3, #48	@ 0x30
 800d866:	d064      	beq.n	800d932 <HAL_TIM_ConfigClockSource+0x15a>
 800d868:	2b30      	cmp	r3, #48	@ 0x30
 800d86a:	d86b      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d86c:	2b20      	cmp	r3, #32
 800d86e:	d060      	beq.n	800d932 <HAL_TIM_ConfigClockSource+0x15a>
 800d870:	2b20      	cmp	r3, #32
 800d872:	d867      	bhi.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
 800d874:	2b00      	cmp	r3, #0
 800d876:	d05c      	beq.n	800d932 <HAL_TIM_ConfigClockSource+0x15a>
 800d878:	2b10      	cmp	r3, #16
 800d87a:	d05a      	beq.n	800d932 <HAL_TIM_ConfigClockSource+0x15a>
 800d87c:	e062      	b.n	800d944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6818      	ldr	r0, [r3, #0]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	6899      	ldr	r1, [r3, #8]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f000 fb5d 	bl	800df4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d8a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	609a      	str	r2, [r3, #8]
      break;
 800d8aa:	e04f      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6818      	ldr	r0, [r3, #0]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	6899      	ldr	r1, [r3, #8]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	f000 fb46 	bl	800df4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d8ce:	609a      	str	r2, [r3, #8]
      break;
 800d8d0:	e03c      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6818      	ldr	r0, [r3, #0]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	6859      	ldr	r1, [r3, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	f000 faba 	bl	800de58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2150      	movs	r1, #80	@ 0x50
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fb13 	bl	800df16 <TIM_ITRx_SetConfig>
      break;
 800d8f0:	e02c      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6818      	ldr	r0, [r3, #0]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	6859      	ldr	r1, [r3, #4]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f000 fad9 	bl	800deb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2160      	movs	r1, #96	@ 0x60
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 fb03 	bl	800df16 <TIM_ITRx_SetConfig>
      break;
 800d910:	e01c      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6818      	ldr	r0, [r3, #0]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	6859      	ldr	r1, [r3, #4]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	461a      	mov	r2, r3
 800d920:	f000 fa9a 	bl	800de58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2140      	movs	r1, #64	@ 0x40
 800d92a:	4618      	mov	r0, r3
 800d92c:	f000 faf3 	bl	800df16 <TIM_ITRx_SetConfig>
      break;
 800d930:	e00c      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4619      	mov	r1, r3
 800d93c:	4610      	mov	r0, r2
 800d93e:	f000 faea 	bl	800df16 <TIM_ITRx_SetConfig>
      break;
 800d942:	e003      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	73fb      	strb	r3, [r7, #15]
      break;
 800d948:	e000      	b.n	800d94c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d94a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d966:	b480      	push	{r7}
 800d968:	b083      	sub	sp, #12
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d96e:	bf00      	nop
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b083      	sub	sp, #12
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d982:	bf00      	nop
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr

0800d98e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d98e:	b480      	push	{r7}
 800d990:	b083      	sub	sp, #12
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
	...

0800d9b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a40      	ldr	r2, [pc, #256]	@ (800dacc <TIM_Base_SetConfig+0x114>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d013      	beq.n	800d9f8 <TIM_Base_SetConfig+0x40>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9d6:	d00f      	beq.n	800d9f8 <TIM_Base_SetConfig+0x40>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a3d      	ldr	r2, [pc, #244]	@ (800dad0 <TIM_Base_SetConfig+0x118>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d00b      	beq.n	800d9f8 <TIM_Base_SetConfig+0x40>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a3c      	ldr	r2, [pc, #240]	@ (800dad4 <TIM_Base_SetConfig+0x11c>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d007      	beq.n	800d9f8 <TIM_Base_SetConfig+0x40>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a3b      	ldr	r2, [pc, #236]	@ (800dad8 <TIM_Base_SetConfig+0x120>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d003      	beq.n	800d9f8 <TIM_Base_SetConfig+0x40>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a3a      	ldr	r2, [pc, #232]	@ (800dadc <TIM_Base_SetConfig+0x124>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d108      	bne.n	800da0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	4313      	orrs	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a2f      	ldr	r2, [pc, #188]	@ (800dacc <TIM_Base_SetConfig+0x114>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d02b      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da18:	d027      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a2c      	ldr	r2, [pc, #176]	@ (800dad0 <TIM_Base_SetConfig+0x118>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d023      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a2b      	ldr	r2, [pc, #172]	@ (800dad4 <TIM_Base_SetConfig+0x11c>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d01f      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a2a      	ldr	r2, [pc, #168]	@ (800dad8 <TIM_Base_SetConfig+0x120>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d01b      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a29      	ldr	r2, [pc, #164]	@ (800dadc <TIM_Base_SetConfig+0x124>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d017      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a28      	ldr	r2, [pc, #160]	@ (800dae0 <TIM_Base_SetConfig+0x128>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d013      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a27      	ldr	r2, [pc, #156]	@ (800dae4 <TIM_Base_SetConfig+0x12c>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d00f      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a26      	ldr	r2, [pc, #152]	@ (800dae8 <TIM_Base_SetConfig+0x130>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d00b      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a25      	ldr	r2, [pc, #148]	@ (800daec <TIM_Base_SetConfig+0x134>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d007      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a24      	ldr	r2, [pc, #144]	@ (800daf0 <TIM_Base_SetConfig+0x138>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d003      	beq.n	800da6a <TIM_Base_SetConfig+0xb2>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a23      	ldr	r2, [pc, #140]	@ (800daf4 <TIM_Base_SetConfig+0x13c>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d108      	bne.n	800da7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	4313      	orrs	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	689a      	ldr	r2, [r3, #8]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4a0a      	ldr	r2, [pc, #40]	@ (800dacc <TIM_Base_SetConfig+0x114>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d003      	beq.n	800dab0 <TIM_Base_SetConfig+0xf8>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a0c      	ldr	r2, [pc, #48]	@ (800dadc <TIM_Base_SetConfig+0x124>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d103      	bne.n	800dab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	691a      	ldr	r2, [r3, #16]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	615a      	str	r2, [r3, #20]
}
 800dabe:	bf00      	nop
 800dac0:	3714      	adds	r7, #20
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	40010000 	.word	0x40010000
 800dad0:	40000400 	.word	0x40000400
 800dad4:	40000800 	.word	0x40000800
 800dad8:	40000c00 	.word	0x40000c00
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40014000 	.word	0x40014000
 800dae4:	40014400 	.word	0x40014400
 800dae8:	40014800 	.word	0x40014800
 800daec:	40001800 	.word	0x40001800
 800daf0:	40001c00 	.word	0x40001c00
 800daf4:	40002000 	.word	0x40002000

0800daf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a1b      	ldr	r3, [r3, #32]
 800db06:	f023 0201 	bic.w	r2, r3, #1
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 0303 	bic.w	r3, r3, #3
 800db2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f023 0302 	bic.w	r3, r3, #2
 800db40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	4313      	orrs	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a20      	ldr	r2, [pc, #128]	@ (800dbd0 <TIM_OC1_SetConfig+0xd8>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_OC1_SetConfig+0x64>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a1f      	ldr	r2, [pc, #124]	@ (800dbd4 <TIM_OC1_SetConfig+0xdc>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d10c      	bne.n	800db76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f023 0308 	bic.w	r3, r3, #8
 800db62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	697a      	ldr	r2, [r7, #20]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f023 0304 	bic.w	r3, r3, #4
 800db74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a15      	ldr	r2, [pc, #84]	@ (800dbd0 <TIM_OC1_SetConfig+0xd8>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d003      	beq.n	800db86 <TIM_OC1_SetConfig+0x8e>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a14      	ldr	r2, [pc, #80]	@ (800dbd4 <TIM_OC1_SetConfig+0xdc>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d111      	bne.n	800dbaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	685a      	ldr	r2, [r3, #4]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	621a      	str	r2, [r3, #32]
}
 800dbc4:	bf00      	nop
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	40010000 	.word	0x40010000
 800dbd4:	40010400 	.word	0x40010400

0800dbd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	f023 0210 	bic.w	r2, r3, #16
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	021b      	lsls	r3, r3, #8
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f023 0320 	bic.w	r3, r3, #32
 800dc22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	011b      	lsls	r3, r3, #4
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a22      	ldr	r2, [pc, #136]	@ (800dcbc <TIM_OC2_SetConfig+0xe4>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d003      	beq.n	800dc40 <TIM_OC2_SetConfig+0x68>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a21      	ldr	r2, [pc, #132]	@ (800dcc0 <TIM_OC2_SetConfig+0xe8>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d10d      	bne.n	800dc5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	011b      	lsls	r3, r3, #4
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a17      	ldr	r2, [pc, #92]	@ (800dcbc <TIM_OC2_SetConfig+0xe4>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d003      	beq.n	800dc6c <TIM_OC2_SetConfig+0x94>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a16      	ldr	r2, [pc, #88]	@ (800dcc0 <TIM_OC2_SetConfig+0xe8>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d113      	bne.n	800dc94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	699b      	ldr	r3, [r3, #24]
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	621a      	str	r2, [r3, #32]
}
 800dcae:	bf00      	nop
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	40010000 	.word	0x40010000
 800dcc0:	40010400 	.word	0x40010400

0800dcc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	69db      	ldr	r3, [r3, #28]
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0303 	bic.w	r3, r3, #3
 800dcfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a21      	ldr	r2, [pc, #132]	@ (800dda4 <TIM_OC3_SetConfig+0xe0>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d003      	beq.n	800dd2a <TIM_OC3_SetConfig+0x66>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a20      	ldr	r2, [pc, #128]	@ (800dda8 <TIM_OC3_SetConfig+0xe4>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d10d      	bne.n	800dd46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	021b      	lsls	r3, r3, #8
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a16      	ldr	r2, [pc, #88]	@ (800dda4 <TIM_OC3_SetConfig+0xe0>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d003      	beq.n	800dd56 <TIM_OC3_SetConfig+0x92>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a15      	ldr	r2, [pc, #84]	@ (800dda8 <TIM_OC3_SetConfig+0xe4>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d113      	bne.n	800dd7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	011b      	lsls	r3, r3, #4
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	011b      	lsls	r3, r3, #4
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	621a      	str	r2, [r3, #32]
}
 800dd98:	bf00      	nop
 800dd9a:	371c      	adds	r7, #28
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40010400 	.word	0x40010400

0800ddac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a1b      	ldr	r3, [r3, #32]
 800ddba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dde2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ddf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	031b      	lsls	r3, r3, #12
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	4313      	orrs	r3, r2
 800de02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a12      	ldr	r2, [pc, #72]	@ (800de50 <TIM_OC4_SetConfig+0xa4>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d003      	beq.n	800de14 <TIM_OC4_SetConfig+0x68>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a11      	ldr	r2, [pc, #68]	@ (800de54 <TIM_OC4_SetConfig+0xa8>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d109      	bne.n	800de28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	019b      	lsls	r3, r3, #6
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	4313      	orrs	r3, r2
 800de26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	697a      	ldr	r2, [r7, #20]
 800de2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	693a      	ldr	r2, [r7, #16]
 800de40:	621a      	str	r2, [r3, #32]
}
 800de42:	bf00      	nop
 800de44:	371c      	adds	r7, #28
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	40010000 	.word	0x40010000
 800de54:	40010400 	.word	0x40010400

0800de58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de58:	b480      	push	{r7}
 800de5a:	b087      	sub	sp, #28
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	f023 0201 	bic.w	r2, r3, #1
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	011b      	lsls	r3, r3, #4
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f023 030a 	bic.w	r3, r3, #10
 800de94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	621a      	str	r2, [r3, #32]
}
 800deaa:	bf00      	nop
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800deb6:	b480      	push	{r7}
 800deb8:	b087      	sub	sp, #28
 800deba:	af00      	add	r7, sp, #0
 800debc:	60f8      	str	r0, [r7, #12]
 800debe:	60b9      	str	r1, [r7, #8]
 800dec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	f023 0210 	bic.w	r2, r3, #16
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6a1b      	ldr	r3, [r3, #32]
 800ded8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	031b      	lsls	r3, r3, #12
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	4313      	orrs	r3, r2
 800deea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800def2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	693a      	ldr	r2, [r7, #16]
 800defa:	4313      	orrs	r3, r2
 800defc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	697a      	ldr	r2, [r7, #20]
 800df02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	621a      	str	r2, [r3, #32]
}
 800df0a:	bf00      	nop
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df16:	b480      	push	{r7}
 800df18:	b085      	sub	sp, #20
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	4313      	orrs	r3, r2
 800df34:	f043 0307 	orr.w	r3, r3, #7
 800df38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	609a      	str	r2, [r3, #8]
}
 800df40:	bf00      	nop
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	021a      	lsls	r2, r3, #8
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	431a      	orrs	r2, r3
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4313      	orrs	r3, r2
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4313      	orrs	r3, r2
 800df78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	697a      	ldr	r2, [r7, #20]
 800df7e:	609a      	str	r2, [r3, #8]
}
 800df80:	bf00      	nop
 800df82:	371c      	adds	r7, #28
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	f003 031f 	and.w	r3, r3, #31
 800df9e:	2201      	movs	r2, #1
 800dfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6a1a      	ldr	r2, [r3, #32]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	43db      	mvns	r3, r3
 800dfae:	401a      	ands	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6a1a      	ldr	r2, [r3, #32]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	f003 031f 	and.w	r3, r3, #31
 800dfbe:	6879      	ldr	r1, [r7, #4]
 800dfc0:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	621a      	str	r2, [r3, #32]
}
 800dfca:	bf00      	nop
 800dfcc:	371c      	adds	r7, #28
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d101      	bne.n	800dff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dfec:	2302      	movs	r3, #2
 800dfee:	e05a      	b.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4313      	orrs	r3, r2
 800e020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	68fa      	ldr	r2, [r7, #12]
 800e028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a21      	ldr	r2, [pc, #132]	@ (800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d022      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e03c:	d01d      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a1d      	ldr	r2, [pc, #116]	@ (800e0b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d018      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a1b      	ldr	r2, [pc, #108]	@ (800e0bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d013      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a1a      	ldr	r2, [pc, #104]	@ (800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d00e      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a18      	ldr	r2, [pc, #96]	@ (800e0c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d009      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a17      	ldr	r2, [pc, #92]	@ (800e0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d004      	beq.n	800e07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a15      	ldr	r2, [pc, #84]	@ (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d10c      	bne.n	800e094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	4313      	orrs	r3, r2
 800e08a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	40010000 	.word	0x40010000
 800e0b8:	40000400 	.word	0x40000400
 800e0bc:	40000800 	.word	0x40000800
 800e0c0:	40000c00 	.word	0x40000c00
 800e0c4:	40010400 	.word	0x40010400
 800e0c8:	40014000 	.word	0x40014000
 800e0cc:	40001800 	.word	0x40001800

0800e0d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d101      	bne.n	800e0ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	e03d      	b.n	800e168 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	4313      	orrs	r3, r2
 800e11c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4313      	orrs	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	4313      	orrs	r3, r2
 800e138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	4313      	orrs	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	4313      	orrs	r3, r2
 800e154:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e166:	2300      	movs	r3, #0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e03f      	b.n	800e22e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d106      	bne.n	800e1c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7fa f96c 	bl	80084a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2224      	movs	r2, #36	@ 0x24
 800e1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68da      	ldr	r2, [r3, #12]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e1de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 ff43 	bl	800f06c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	691a      	ldr	r2, [r3, #16]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e1f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	695a      	ldr	r2, [r3, #20]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	68da      	ldr	r2, [r3, #12]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2220      	movs	r2, #32
 800e220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2220      	movs	r2, #32
 800e228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
	...

0800e238 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08c      	sub	sp, #48	@ 0x30
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	4613      	mov	r3, r2
 800e244:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b20      	cmp	r3, #32
 800e250:	d165      	bne.n	800e31e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <HAL_UART_Transmit_DMA+0x26>
 800e258:	88fb      	ldrh	r3, [r7, #6]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e25e:	2301      	movs	r3, #1
 800e260:	e05e      	b.n	800e320 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d101      	bne.n	800e270 <HAL_UART_Transmit_DMA+0x38>
 800e26c:	2302      	movs	r3, #2
 800e26e:	e057      	b.n	800e320 <HAL_UART_Transmit_DMA+0xe8>
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2201      	movs	r2, #1
 800e274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	88fa      	ldrh	r2, [r7, #6]
 800e282:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	88fa      	ldrh	r2, [r7, #6]
 800e288:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2221      	movs	r2, #33	@ 0x21
 800e294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e29c:	4a22      	ldr	r2, [pc, #136]	@ (800e328 <HAL_UART_Transmit_DMA+0xf0>)
 800e29e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2a4:	4a21      	ldr	r2, [pc, #132]	@ (800e32c <HAL_UART_Transmit_DMA+0xf4>)
 800e2a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2ac:	4a20      	ldr	r2, [pc, #128]	@ (800e330 <HAL_UART_Transmit_DMA+0xf8>)
 800e2ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e2b8:	f107 0308 	add.w	r3, r7, #8
 800e2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800e2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c4:	6819      	ldr	r1, [r3, #0]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	88fb      	ldrh	r3, [r7, #6]
 800e2d0:	f7fa fce8 	bl	8008ca4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e2dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3314      	adds	r3, #20
 800e2ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	e853 3f00 	ldrex	r3, [r3]
 800e2f4:	617b      	str	r3, [r7, #20]
   return(result);
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3314      	adds	r3, #20
 800e304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e306:	627a      	str	r2, [r7, #36]	@ 0x24
 800e308:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30a:	6a39      	ldr	r1, [r7, #32]
 800e30c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e30e:	e841 2300 	strex	r3, r2, [r1]
 800e312:	61fb      	str	r3, [r7, #28]
   return(result);
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1e5      	bne.n	800e2e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	e000      	b.n	800e320 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800e31e:	2302      	movs	r3, #2
  }
}
 800e320:	4618      	mov	r0, r3
 800e322:	3730      	adds	r7, #48	@ 0x30
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	0800e905 	.word	0x0800e905
 800e32c:	0800e99f 	.word	0x0800e99f
 800e330:	0800eb17 	.word	0x0800eb17

0800e334 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	4613      	mov	r3, r2
 800e340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b20      	cmp	r3, #32
 800e34c:	d11d      	bne.n	800e38a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <HAL_UART_Receive_DMA+0x26>
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e016      	b.n	800e38c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e364:	2b01      	cmp	r3, #1
 800e366:	d101      	bne.n	800e36c <HAL_UART_Receive_DMA+0x38>
 800e368:	2302      	movs	r3, #2
 800e36a:	e00f      	b.n	800e38c <HAL_UART_Receive_DMA+0x58>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e37a:	88fb      	ldrh	r3, [r7, #6]
 800e37c:	461a      	mov	r2, r3
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 fc13 	bl	800ebac <UART_Start_Receive_DMA>
 800e386:	4603      	mov	r3, r0
 800e388:	e000      	b.n	800e38c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e38a:	2302      	movs	r3, #2
  }
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b0ba      	sub	sp, #232	@ 0xe8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3ca:	f003 030f 	and.w	r3, r3, #15
 800e3ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e3d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10f      	bne.n	800e3fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3de:	f003 0320 	and.w	r3, r3, #32
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d009      	beq.n	800e3fa <HAL_UART_IRQHandler+0x66>
 800e3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d003      	beq.n	800e3fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fd7f 	bl	800eef6 <UART_Receive_IT>
      return;
 800e3f8:	e256      	b.n	800e8a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e3fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 80de 	beq.w	800e5c0 <HAL_UART_IRQHandler+0x22c>
 800e404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e408:	f003 0301 	and.w	r3, r3, #1
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d106      	bne.n	800e41e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e414:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 80d1 	beq.w	800e5c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e422:	f003 0301 	and.w	r3, r3, #1
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00b      	beq.n	800e442 <HAL_UART_IRQHandler+0xae>
 800e42a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e43a:	f043 0201 	orr.w	r2, r3, #1
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e446:	f003 0304 	and.w	r3, r3, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00b      	beq.n	800e466 <HAL_UART_IRQHandler+0xd2>
 800e44e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	2b00      	cmp	r3, #0
 800e458:	d005      	beq.n	800e466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e45e:	f043 0202 	orr.w	r2, r3, #2
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00b      	beq.n	800e48a <HAL_UART_IRQHandler+0xf6>
 800e472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d005      	beq.n	800e48a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e482:	f043 0204 	orr.w	r2, r3, #4
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e48e:	f003 0308 	and.w	r3, r3, #8
 800e492:	2b00      	cmp	r3, #0
 800e494:	d011      	beq.n	800e4ba <HAL_UART_IRQHandler+0x126>
 800e496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e49a:	f003 0320 	and.w	r3, r3, #32
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d105      	bne.n	800e4ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d005      	beq.n	800e4ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b2:	f043 0208 	orr.w	r2, r3, #8
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f000 81ed 	beq.w	800e89e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4c8:	f003 0320 	and.w	r3, r3, #32
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d008      	beq.n	800e4e2 <HAL_UART_IRQHandler+0x14e>
 800e4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4d4:	f003 0320 	and.w	r3, r3, #32
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fd0a 	bl	800eef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ec:	2b40      	cmp	r3, #64	@ 0x40
 800e4ee:	bf0c      	ite	eq
 800e4f0:	2301      	moveq	r3, #1
 800e4f2:	2300      	movne	r3, #0
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4fe:	f003 0308 	and.w	r3, r3, #8
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <HAL_UART_IRQHandler+0x17a>
 800e506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d04f      	beq.n	800e5ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fc12 	bl	800ed38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e51e:	2b40      	cmp	r3, #64	@ 0x40
 800e520:	d141      	bne.n	800e5a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3314      	adds	r3, #20
 800e528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e530:	e853 3f00 	ldrex	r3, [r3]
 800e534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e53c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3314      	adds	r3, #20
 800e54a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e54e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e55a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e55e:	e841 2300 	strex	r3, r2, [r1]
 800e562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1d9      	bne.n	800e522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e572:	2b00      	cmp	r3, #0
 800e574:	d013      	beq.n	800e59e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e57a:	4a7d      	ldr	r2, [pc, #500]	@ (800e770 <HAL_UART_IRQHandler+0x3dc>)
 800e57c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e582:	4618      	mov	r0, r3
 800e584:	f7fa fc56 	bl	8008e34 <HAL_DMA_Abort_IT>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d016      	beq.n	800e5bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e598:	4610      	mov	r0, r2
 800e59a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e59c:	e00e      	b.n	800e5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f99a 	bl	800e8d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a4:	e00a      	b.n	800e5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f996 	bl	800e8d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5ac:	e006      	b.n	800e5bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f992 	bl	800e8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800e5ba:	e170      	b.n	800e89e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5bc:	bf00      	nop
    return;
 800e5be:	e16e      	b.n	800e89e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	f040 814a 	bne.w	800e85e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5ce:	f003 0310 	and.w	r3, r3, #16
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 8143 	beq.w	800e85e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 813c 	beq.w	800e85e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60bb      	str	r3, [r7, #8]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	60bb      	str	r3, [r7, #8]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	60bb      	str	r3, [r7, #8]
 800e5fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	695b      	ldr	r3, [r3, #20]
 800e602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e606:	2b40      	cmp	r3, #64	@ 0x40
 800e608:	f040 80b4 	bne.w	800e774 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f000 8140 	beq.w	800e8a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e62a:	429a      	cmp	r2, r3
 800e62c:	f080 8139 	bcs.w	800e8a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e636:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e63c:	69db      	ldr	r3, [r3, #28]
 800e63e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e642:	f000 8088 	beq.w	800e756 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	330c      	adds	r3, #12
 800e64c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e654:	e853 3f00 	ldrex	r3, [r3]
 800e658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e65c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	330c      	adds	r3, #12
 800e66e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e67e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e682:	e841 2300 	strex	r3, r2, [r1]
 800e686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e68a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1d9      	bne.n	800e646 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3314      	adds	r3, #20
 800e698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e69c:	e853 3f00 	ldrex	r3, [r3]
 800e6a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e6a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6a4:	f023 0301 	bic.w	r3, r3, #1
 800e6a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3314      	adds	r3, #20
 800e6b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e6b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e6ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e6be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e6c2:	e841 2300 	strex	r3, r2, [r1]
 800e6c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e6c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1e1      	bne.n	800e692 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3314      	adds	r3, #20
 800e6d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e6de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3314      	adds	r3, #20
 800e6ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e6f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e6f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e6f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e6fa:	e841 2300 	strex	r3, r2, [r1]
 800e6fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1e3      	bne.n	800e6ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2220      	movs	r2, #32
 800e70a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	330c      	adds	r3, #12
 800e71a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e71e:	e853 3f00 	ldrex	r3, [r3]
 800e722:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e726:	f023 0310 	bic.w	r3, r3, #16
 800e72a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	330c      	adds	r3, #12
 800e734:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e738:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e73a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e73e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e740:	e841 2300 	strex	r3, r2, [r1]
 800e744:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1e3      	bne.n	800e714 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e750:	4618      	mov	r0, r3
 800e752:	f7fa faff 	bl	8008d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e75e:	b29b      	uxth	r3, r3
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	b29b      	uxth	r3, r3
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f8c0 	bl	800e8ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e76c:	e099      	b.n	800e8a2 <HAL_UART_IRQHandler+0x50e>
 800e76e:	bf00      	nop
 800e770:	0800edff 	.word	0x0800edff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e788:	b29b      	uxth	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f000 808b 	beq.w	800e8a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e794:	2b00      	cmp	r3, #0
 800e796:	f000 8086 	beq.w	800e8a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	330c      	adds	r3, #12
 800e7a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a4:	e853 3f00 	ldrex	r3, [r3]
 800e7a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	330c      	adds	r3, #12
 800e7ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e7be:	647a      	str	r2, [r7, #68]	@ 0x44
 800e7c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7c6:	e841 2300 	strex	r3, r2, [r1]
 800e7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1e3      	bne.n	800e79a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3314      	adds	r3, #20
 800e7d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7dc:	e853 3f00 	ldrex	r3, [r3]
 800e7e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	f023 0301 	bic.w	r3, r3, #1
 800e7e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3314      	adds	r3, #20
 800e7f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e7f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7fe:	e841 2300 	strex	r3, r2, [r1]
 800e802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1e3      	bne.n	800e7d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2220      	movs	r2, #32
 800e80e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	330c      	adds	r3, #12
 800e81e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	e853 3f00 	ldrex	r3, [r3]
 800e826:	60fb      	str	r3, [r7, #12]
   return(result);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f023 0310 	bic.w	r3, r3, #16
 800e82e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	330c      	adds	r3, #12
 800e838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e83c:	61fa      	str	r2, [r7, #28]
 800e83e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e840:	69b9      	ldr	r1, [r7, #24]
 800e842:	69fa      	ldr	r2, [r7, #28]
 800e844:	e841 2300 	strex	r3, r2, [r1]
 800e848:	617b      	str	r3, [r7, #20]
   return(result);
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e3      	bne.n	800e818 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f848 	bl	800e8ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e85c:	e023      	b.n	800e8a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e866:	2b00      	cmp	r3, #0
 800e868:	d009      	beq.n	800e87e <HAL_UART_IRQHandler+0x4ea>
 800e86a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e86e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fad5 	bl	800ee26 <UART_Transmit_IT>
    return;
 800e87c:	e014      	b.n	800e8a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00e      	beq.n	800e8a8 <HAL_UART_IRQHandler+0x514>
 800e88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e892:	2b00      	cmp	r3, #0
 800e894:	d008      	beq.n	800e8a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 fb15 	bl	800eec6 <UART_EndTransmit_IT>
    return;
 800e89c:	e004      	b.n	800e8a8 <HAL_UART_IRQHandler+0x514>
    return;
 800e89e:	bf00      	nop
 800e8a0:	e002      	b.n	800e8a8 <HAL_UART_IRQHandler+0x514>
      return;
 800e8a2:	bf00      	nop
 800e8a4:	e000      	b.n	800e8a8 <HAL_UART_IRQHandler+0x514>
      return;
 800e8a6:	bf00      	nop
  }
}
 800e8a8:	37e8      	adds	r7, #232	@ 0xe8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop

0800e8b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b090      	sub	sp, #64	@ 0x40
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d137      	bne.n	800e990 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e922:	2200      	movs	r2, #0
 800e924:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3314      	adds	r3, #20
 800e92c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	623b      	str	r3, [r7, #32]
   return(result);
 800e936:	6a3b      	ldr	r3, [r7, #32]
 800e938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e93c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3314      	adds	r3, #20
 800e944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e946:	633a      	str	r2, [r7, #48]	@ 0x30
 800e948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e94c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e5      	bne.n	800e926 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	330c      	adds	r3, #12
 800e960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	e853 3f00 	ldrex	r3, [r3]
 800e968:	60fb      	str	r3, [r7, #12]
   return(result);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e970:	637b      	str	r3, [r7, #52]	@ 0x34
 800e972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	330c      	adds	r3, #12
 800e978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e97a:	61fa      	str	r2, [r7, #28]
 800e97c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	69b9      	ldr	r1, [r7, #24]
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	617b      	str	r3, [r7, #20]
   return(result);
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e5      	bne.n	800e95a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e98e:	e002      	b.n	800e996 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e990:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e992:	f7f7 fb0d 	bl	8005fb0 <HAL_UART_TxCpltCallback>
}
 800e996:	bf00      	nop
 800e998:	3740      	adds	r7, #64	@ 0x40
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b084      	sub	sp, #16
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff ff7f 	bl	800e8b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9b2:	bf00      	nop
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b09c      	sub	sp, #112	@ 0x70
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d172      	bne.n	800eabc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9d8:	2200      	movs	r2, #0
 800e9da:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	330c      	adds	r3, #12
 800e9e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9e6:	e853 3f00 	ldrex	r3, [r3]
 800e9ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	330c      	adds	r3, #12
 800e9fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e9fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e9fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea04:	e841 2300 	strex	r3, r2, [r1]
 800ea08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1e5      	bne.n	800e9dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3314      	adds	r3, #20
 800ea16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea1a:	e853 3f00 	ldrex	r3, [r3]
 800ea1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea22:	f023 0301 	bic.w	r3, r3, #1
 800ea26:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3314      	adds	r3, #20
 800ea2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea30:	647a      	str	r2, [r7, #68]	@ 0x44
 800ea32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ea36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea38:	e841 2300 	strex	r3, r2, [r1]
 800ea3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ea3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1e5      	bne.n	800ea10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3314      	adds	r3, #20
 800ea4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4e:	e853 3f00 	ldrex	r3, [r3]
 800ea52:	623b      	str	r3, [r7, #32]
   return(result);
 800ea54:	6a3b      	ldr	r3, [r7, #32]
 800ea56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea5a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3314      	adds	r3, #20
 800ea62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ea64:	633a      	str	r2, [r7, #48]	@ 0x30
 800ea66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea6c:	e841 2300 	strex	r3, r2, [r1]
 800ea70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e5      	bne.n	800ea44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d119      	bne.n	800eabc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	330c      	adds	r3, #12
 800ea8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	e853 3f00 	ldrex	r3, [r3]
 800ea96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f023 0310 	bic.w	r3, r3, #16
 800ea9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eaa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	330c      	adds	r3, #12
 800eaa6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eaa8:	61fa      	str	r2, [r7, #28]
 800eaaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaac:	69b9      	ldr	r1, [r7, #24]
 800eaae:	69fa      	ldr	r2, [r7, #28]
 800eab0:	e841 2300 	strex	r3, r2, [r1]
 800eab4:	617b      	str	r3, [r7, #20]
   return(result);
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e5      	bne.n	800ea88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eabc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eabe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d106      	bne.n	800ead2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eac6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eac8:	4619      	mov	r1, r3
 800eaca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eacc:	f7ff ff0e 	bl	800e8ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ead0:	e002      	b.n	800ead8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ead2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ead4:	f7f7 fa7e 	bl	8005fd4 <HAL_UART_RxCpltCallback>
}
 800ead8:	bf00      	nop
 800eada:	3770      	adds	r7, #112	@ 0x70
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d108      	bne.n	800eb08 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eafa:	085b      	lsrs	r3, r3, #1
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	4619      	mov	r1, r3
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff fef3 	bl	800e8ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb06:	e002      	b.n	800eb0e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f7ff fedb 	bl	800e8c4 <HAL_UART_RxHalfCpltCallback>
}
 800eb0e:	bf00      	nop
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb32:	2b80      	cmp	r3, #128	@ 0x80
 800eb34:	bf0c      	ite	eq
 800eb36:	2301      	moveq	r3, #1
 800eb38:	2300      	movne	r3, #0
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b21      	cmp	r3, #33	@ 0x21
 800eb48:	d108      	bne.n	800eb5c <UART_DMAError+0x46>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d005      	beq.n	800eb5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2200      	movs	r2, #0
 800eb54:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800eb56:	68b8      	ldr	r0, [r7, #8]
 800eb58:	f000 f8c6 	bl	800ece8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb66:	2b40      	cmp	r3, #64	@ 0x40
 800eb68:	bf0c      	ite	eq
 800eb6a:	2301      	moveq	r3, #1
 800eb6c:	2300      	movne	r3, #0
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b22      	cmp	r3, #34	@ 0x22
 800eb7c:	d108      	bne.n	800eb90 <UART_DMAError+0x7a>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d005      	beq.n	800eb90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	2200      	movs	r2, #0
 800eb88:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800eb8a:	68b8      	ldr	r0, [r7, #8]
 800eb8c:	f000 f8d4 	bl	800ed38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb94:	f043 0210 	orr.w	r2, r3, #16
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb9c:	68b8      	ldr	r0, [r7, #8]
 800eb9e:	f7ff fe9b 	bl	800e8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
	...

0800ebac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b098      	sub	sp, #96	@ 0x60
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	88fa      	ldrh	r2, [r7, #6]
 800ebc4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2222      	movs	r2, #34	@ 0x22
 800ebd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebd8:	4a40      	ldr	r2, [pc, #256]	@ (800ecdc <UART_Start_Receive_DMA+0x130>)
 800ebda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe0:	4a3f      	ldr	r2, [pc, #252]	@ (800ece0 <UART_Start_Receive_DMA+0x134>)
 800ebe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe8:	4a3e      	ldr	r2, [pc, #248]	@ (800ece4 <UART_Start_Receive_DMA+0x138>)
 800ebea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ebf4:	f107 0308 	add.w	r3, r7, #8
 800ebf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3304      	adds	r3, #4
 800ec04:	4619      	mov	r1, r3
 800ec06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	88fb      	ldrh	r3, [r7, #6]
 800ec0c:	f7fa f84a 	bl	8008ca4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ec10:	2300      	movs	r3, #0
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	613b      	str	r3, [r7, #16]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	613b      	str	r3, [r7, #16]
 800ec24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d019      	beq.n	800ec6a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	330c      	adds	r3, #12
 800ec3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec40:	e853 3f00 	ldrex	r3, [r3]
 800ec44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	330c      	adds	r3, #12
 800ec54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec56:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ec58:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ec5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec5e:	e841 2300 	strex	r3, r2, [r1]
 800ec62:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ec64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1e5      	bne.n	800ec36 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3314      	adds	r3, #20
 800ec70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	e853 3f00 	ldrex	r3, [r3]
 800ec78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7c:	f043 0301 	orr.w	r3, r3, #1
 800ec80:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3314      	adds	r3, #20
 800ec88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec8a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ec8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ec90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec92:	e841 2300 	strex	r3, r2, [r1]
 800ec96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ec98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1e5      	bne.n	800ec6a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3314      	adds	r3, #20
 800eca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	e853 3f00 	ldrex	r3, [r3]
 800ecac:	617b      	str	r3, [r7, #20]
   return(result);
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecb4:	653b      	str	r3, [r7, #80]	@ 0x50
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3314      	adds	r3, #20
 800ecbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800ecc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc2:	6a39      	ldr	r1, [r7, #32]
 800ecc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecc6:	e841 2300 	strex	r3, r2, [r1]
 800ecca:	61fb      	str	r3, [r7, #28]
   return(result);
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1e5      	bne.n	800ec9e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3760      	adds	r7, #96	@ 0x60
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	0800e9bb 	.word	0x0800e9bb
 800ece0:	0800eae1 	.word	0x0800eae1
 800ece4:	0800eb17 	.word	0x0800eb17

0800ece8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b089      	sub	sp, #36	@ 0x24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	330c      	adds	r3, #12
 800ecf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	e853 3f00 	ldrex	r3, [r3]
 800ecfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ed06:	61fb      	str	r3, [r7, #28]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	330c      	adds	r3, #12
 800ed0e:	69fa      	ldr	r2, [r7, #28]
 800ed10:	61ba      	str	r2, [r7, #24]
 800ed12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed14:	6979      	ldr	r1, [r7, #20]
 800ed16:	69ba      	ldr	r2, [r7, #24]
 800ed18:	e841 2300 	strex	r3, r2, [r1]
 800ed1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e5      	bne.n	800ecf0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800ed2c:	bf00      	nop
 800ed2e:	3724      	adds	r7, #36	@ 0x24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b095      	sub	sp, #84	@ 0x54
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	330c      	adds	r3, #12
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed4a:	e853 3f00 	ldrex	r3, [r3]
 800ed4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	330c      	adds	r3, #12
 800ed5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed60:	643a      	str	r2, [r7, #64]	@ 0x40
 800ed62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed68:	e841 2300 	strex	r3, r2, [r1]
 800ed6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1e5      	bne.n	800ed40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3314      	adds	r3, #20
 800ed7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	e853 3f00 	ldrex	r3, [r3]
 800ed82:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	f023 0301 	bic.w	r3, r3, #1
 800ed8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	3314      	adds	r3, #20
 800ed92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed9c:	e841 2300 	strex	r3, r2, [r1]
 800eda0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1e5      	bne.n	800ed74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edac:	2b01      	cmp	r3, #1
 800edae:	d119      	bne.n	800ede4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	330c      	adds	r3, #12
 800edb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	e853 3f00 	ldrex	r3, [r3]
 800edbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	f023 0310 	bic.w	r3, r3, #16
 800edc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	330c      	adds	r3, #12
 800edce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edd0:	61ba      	str	r2, [r7, #24]
 800edd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd4:	6979      	ldr	r1, [r7, #20]
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	e841 2300 	strex	r3, r2, [r1]
 800eddc:	613b      	str	r3, [r7, #16]
   return(result);
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1e5      	bne.n	800edb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2220      	movs	r2, #32
 800ede8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800edf2:	bf00      	nop
 800edf4:	3754      	adds	r7, #84	@ 0x54
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2200      	movs	r2, #0
 800ee16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fd5d 	bl	800e8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee1e:	bf00      	nop
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ee26:	b480      	push	{r7}
 800ee28:	b085      	sub	sp, #20
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b21      	cmp	r3, #33	@ 0x21
 800ee38:	d13e      	bne.n	800eeb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	689b      	ldr	r3, [r3, #8]
 800ee3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee42:	d114      	bne.n	800ee6e <UART_Transmit_IT+0x48>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d110      	bne.n	800ee6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a1b      	ldr	r3, [r3, #32]
 800ee50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	1c9a      	adds	r2, r3, #2
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	621a      	str	r2, [r3, #32]
 800ee6c:	e008      	b.n	800ee80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	1c59      	adds	r1, r3, #1
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	6211      	str	r1, [r2, #32]
 800ee78:	781a      	ldrb	r2, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3b01      	subs	r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10f      	bne.n	800eeb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68da      	ldr	r2, [r3, #12]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68da      	ldr	r2, [r3, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eeb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	e000      	b.n	800eeba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eeb8:	2302      	movs	r3, #2
  }
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b082      	sub	sp, #8
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68da      	ldr	r2, [r3, #12]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eedc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2220      	movs	r2, #32
 800eee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7f7 f862 	bl	8005fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b08c      	sub	sp, #48	@ 0x30
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b22      	cmp	r3, #34	@ 0x22
 800ef08:	f040 80ab 	bne.w	800f062 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef14:	d117      	bne.n	800ef46 <UART_Receive_IT+0x50>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d113      	bne.n	800ef46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef3e:	1c9a      	adds	r2, r3, #2
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	629a      	str	r2, [r3, #40]	@ 0x28
 800ef44:	e026      	b.n	800ef94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef58:	d007      	beq.n	800ef6a <UART_Receive_IT+0x74>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10a      	bne.n	800ef78 <UART_Receive_IT+0x82>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d106      	bne.n	800ef78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	701a      	strb	r2, [r3, #0]
 800ef76:	e008      	b.n	800ef8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef84:	b2da      	uxtb	r2, r3
 800ef86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef8e:	1c5a      	adds	r2, r3, #1
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	4619      	mov	r1, r3
 800efa2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d15a      	bne.n	800f05e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68da      	ldr	r2, [r3, #12]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0220 	bic.w	r2, r2, #32
 800efb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68da      	ldr	r2, [r3, #12]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800efc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	695a      	ldr	r2, [r3, #20]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f022 0201 	bic.w	r2, r2, #1
 800efd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2220      	movs	r2, #32
 800efdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d135      	bne.n	800f054 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	330c      	adds	r3, #12
 800eff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	e853 3f00 	ldrex	r3, [r3]
 800effc:	613b      	str	r3, [r7, #16]
   return(result);
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	f023 0310 	bic.w	r3, r3, #16
 800f004:	627b      	str	r3, [r7, #36]	@ 0x24
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	330c      	adds	r3, #12
 800f00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f00e:	623a      	str	r2, [r7, #32]
 800f010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f012:	69f9      	ldr	r1, [r7, #28]
 800f014:	6a3a      	ldr	r2, [r7, #32]
 800f016:	e841 2300 	strex	r3, r2, [r1]
 800f01a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1e5      	bne.n	800efee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b10      	cmp	r3, #16
 800f02e:	d10a      	bne.n	800f046 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f030:	2300      	movs	r3, #0
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff fc4d 	bl	800e8ec <HAL_UARTEx_RxEventCallback>
 800f052:	e002      	b.n	800f05a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7f6 ffbd 	bl	8005fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f05a:	2300      	movs	r3, #0
 800f05c:	e002      	b.n	800f064 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800f05e:	2300      	movs	r3, #0
 800f060:	e000      	b.n	800f064 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800f062:	2302      	movs	r3, #2
  }
}
 800f064:	4618      	mov	r0, r3
 800f066:	3730      	adds	r7, #48	@ 0x30
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f070:	b0c0      	sub	sp, #256	@ 0x100
 800f072:	af00      	add	r7, sp, #0
 800f074:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f088:	68d9      	ldr	r1, [r3, #12]
 800f08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	ea40 0301 	orr.w	r3, r0, r1
 800f094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f09a:	689a      	ldr	r2, [r3, #8]
 800f09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	431a      	orrs	r2, r3
 800f0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	431a      	orrs	r2, r3
 800f0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800f0c4:	f021 010c 	bic.w	r1, r1, #12
 800f0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f0d2:	430b      	orrs	r3, r1
 800f0d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	695b      	ldr	r3, [r3, #20]
 800f0de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800f0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0e6:	6999      	ldr	r1, [r3, #24]
 800f0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	ea40 0301 	orr.w	r3, r0, r1
 800f0f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	4b8f      	ldr	r3, [pc, #572]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d005      	beq.n	800f10c <UART_SetConfig+0xa0>
 800f100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	4b8d      	ldr	r3, [pc, #564]	@ (800f33c <UART_SetConfig+0x2d0>)
 800f108:	429a      	cmp	r2, r3
 800f10a:	d104      	bne.n	800f116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f10c:	f7fd fe70 	bl	800cdf0 <HAL_RCC_GetPCLK2Freq>
 800f110:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800f114:	e003      	b.n	800f11e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f116:	f7fd fe57 	bl	800cdc8 <HAL_RCC_GetPCLK1Freq>
 800f11a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f122:	69db      	ldr	r3, [r3, #28]
 800f124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f128:	f040 810c 	bne.w	800f344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f130:	2200      	movs	r2, #0
 800f132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f136:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800f13a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800f13e:	4622      	mov	r2, r4
 800f140:	462b      	mov	r3, r5
 800f142:	1891      	adds	r1, r2, r2
 800f144:	65b9      	str	r1, [r7, #88]	@ 0x58
 800f146:	415b      	adcs	r3, r3
 800f148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f14a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f14e:	4621      	mov	r1, r4
 800f150:	eb12 0801 	adds.w	r8, r2, r1
 800f154:	4629      	mov	r1, r5
 800f156:	eb43 0901 	adc.w	r9, r3, r1
 800f15a:	f04f 0200 	mov.w	r2, #0
 800f15e:	f04f 0300 	mov.w	r3, #0
 800f162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f16a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f16e:	4690      	mov	r8, r2
 800f170:	4699      	mov	r9, r3
 800f172:	4623      	mov	r3, r4
 800f174:	eb18 0303 	adds.w	r3, r8, r3
 800f178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f17c:	462b      	mov	r3, r5
 800f17e:	eb49 0303 	adc.w	r3, r9, r3
 800f182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f192:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800f196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800f19a:	460b      	mov	r3, r1
 800f19c:	18db      	adds	r3, r3, r3
 800f19e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	eb42 0303 	adc.w	r3, r2, r3
 800f1a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800f1a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f1ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800f1b0:	f7f1 fcf6 	bl	8000ba0 <__aeabi_uldivmod>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4b61      	ldr	r3, [pc, #388]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800f1be:	095b      	lsrs	r3, r3, #5
 800f1c0:	011c      	lsls	r4, r3, #4
 800f1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f1cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800f1d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800f1d4:	4642      	mov	r2, r8
 800f1d6:	464b      	mov	r3, r9
 800f1d8:	1891      	adds	r1, r2, r2
 800f1da:	64b9      	str	r1, [r7, #72]	@ 0x48
 800f1dc:	415b      	adcs	r3, r3
 800f1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f1e4:	4641      	mov	r1, r8
 800f1e6:	eb12 0a01 	adds.w	sl, r2, r1
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	eb43 0b01 	adc.w	fp, r3, r1
 800f1f0:	f04f 0200 	mov.w	r2, #0
 800f1f4:	f04f 0300 	mov.w	r3, #0
 800f1f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f1fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f204:	4692      	mov	sl, r2
 800f206:	469b      	mov	fp, r3
 800f208:	4643      	mov	r3, r8
 800f20a:	eb1a 0303 	adds.w	r3, sl, r3
 800f20e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f212:	464b      	mov	r3, r9
 800f214:	eb4b 0303 	adc.w	r3, fp, r3
 800f218:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f228:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800f22c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f230:	460b      	mov	r3, r1
 800f232:	18db      	adds	r3, r3, r3
 800f234:	643b      	str	r3, [r7, #64]	@ 0x40
 800f236:	4613      	mov	r3, r2
 800f238:	eb42 0303 	adc.w	r3, r2, r3
 800f23c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f23e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f246:	f7f1 fcab 	bl	8000ba0 <__aeabi_uldivmod>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4611      	mov	r1, r2
 800f250:	4b3b      	ldr	r3, [pc, #236]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f252:	fba3 2301 	umull	r2, r3, r3, r1
 800f256:	095b      	lsrs	r3, r3, #5
 800f258:	2264      	movs	r2, #100	@ 0x64
 800f25a:	fb02 f303 	mul.w	r3, r2, r3
 800f25e:	1acb      	subs	r3, r1, r3
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800f266:	4b36      	ldr	r3, [pc, #216]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f268:	fba3 2302 	umull	r2, r3, r3, r2
 800f26c:	095b      	lsrs	r3, r3, #5
 800f26e:	005b      	lsls	r3, r3, #1
 800f270:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800f274:	441c      	add	r4, r3
 800f276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f27a:	2200      	movs	r2, #0
 800f27c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f280:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800f284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800f288:	4642      	mov	r2, r8
 800f28a:	464b      	mov	r3, r9
 800f28c:	1891      	adds	r1, r2, r2
 800f28e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f290:	415b      	adcs	r3, r3
 800f292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f298:	4641      	mov	r1, r8
 800f29a:	1851      	adds	r1, r2, r1
 800f29c:	6339      	str	r1, [r7, #48]	@ 0x30
 800f29e:	4649      	mov	r1, r9
 800f2a0:	414b      	adcs	r3, r1
 800f2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2a4:	f04f 0200 	mov.w	r2, #0
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800f2b0:	4659      	mov	r1, fp
 800f2b2:	00cb      	lsls	r3, r1, #3
 800f2b4:	4651      	mov	r1, sl
 800f2b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f2ba:	4651      	mov	r1, sl
 800f2bc:	00ca      	lsls	r2, r1, #3
 800f2be:	4610      	mov	r0, r2
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	4642      	mov	r2, r8
 800f2c6:	189b      	adds	r3, r3, r2
 800f2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f2cc:	464b      	mov	r3, r9
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	eb42 0303 	adc.w	r3, r2, r3
 800f2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f2e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800f2e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	18db      	adds	r3, r3, r3
 800f2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	eb42 0303 	adc.w	r3, r2, r3
 800f2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f2fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800f302:	f7f1 fc4d 	bl	8000ba0 <__aeabi_uldivmod>
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	4b0d      	ldr	r3, [pc, #52]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f30c:	fba3 1302 	umull	r1, r3, r3, r2
 800f310:	095b      	lsrs	r3, r3, #5
 800f312:	2164      	movs	r1, #100	@ 0x64
 800f314:	fb01 f303 	mul.w	r3, r1, r3
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	3332      	adds	r3, #50	@ 0x32
 800f31e:	4a08      	ldr	r2, [pc, #32]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f320:	fba2 2303 	umull	r2, r3, r2, r3
 800f324:	095b      	lsrs	r3, r3, #5
 800f326:	f003 0207 	and.w	r2, r3, #7
 800f32a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4422      	add	r2, r4
 800f332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f334:	e106      	b.n	800f544 <UART_SetConfig+0x4d8>
 800f336:	bf00      	nop
 800f338:	40011000 	.word	0x40011000
 800f33c:	40011400 	.word	0x40011400
 800f340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f348:	2200      	movs	r2, #0
 800f34a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f34e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800f352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800f356:	4642      	mov	r2, r8
 800f358:	464b      	mov	r3, r9
 800f35a:	1891      	adds	r1, r2, r2
 800f35c:	6239      	str	r1, [r7, #32]
 800f35e:	415b      	adcs	r3, r3
 800f360:	627b      	str	r3, [r7, #36]	@ 0x24
 800f362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f366:	4641      	mov	r1, r8
 800f368:	1854      	adds	r4, r2, r1
 800f36a:	4649      	mov	r1, r9
 800f36c:	eb43 0501 	adc.w	r5, r3, r1
 800f370:	f04f 0200 	mov.w	r2, #0
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	00eb      	lsls	r3, r5, #3
 800f37a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f37e:	00e2      	lsls	r2, r4, #3
 800f380:	4614      	mov	r4, r2
 800f382:	461d      	mov	r5, r3
 800f384:	4643      	mov	r3, r8
 800f386:	18e3      	adds	r3, r4, r3
 800f388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f38c:	464b      	mov	r3, r9
 800f38e:	eb45 0303 	adc.w	r3, r5, r3
 800f392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f3a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f3a6:	f04f 0200 	mov.w	r2, #0
 800f3aa:	f04f 0300 	mov.w	r3, #0
 800f3ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	008b      	lsls	r3, r1, #2
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f3bc:	4621      	mov	r1, r4
 800f3be:	008a      	lsls	r2, r1, #2
 800f3c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f3c4:	f7f1 fbec 	bl	8000ba0 <__aeabi_uldivmod>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	4b60      	ldr	r3, [pc, #384]	@ (800f550 <UART_SetConfig+0x4e4>)
 800f3ce:	fba3 2302 	umull	r2, r3, r3, r2
 800f3d2:	095b      	lsrs	r3, r3, #5
 800f3d4:	011c      	lsls	r4, r3, #4
 800f3d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f3e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f3e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800f3e8:	4642      	mov	r2, r8
 800f3ea:	464b      	mov	r3, r9
 800f3ec:	1891      	adds	r1, r2, r2
 800f3ee:	61b9      	str	r1, [r7, #24]
 800f3f0:	415b      	adcs	r3, r3
 800f3f2:	61fb      	str	r3, [r7, #28]
 800f3f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	1851      	adds	r1, r2, r1
 800f3fc:	6139      	str	r1, [r7, #16]
 800f3fe:	4649      	mov	r1, r9
 800f400:	414b      	adcs	r3, r1
 800f402:	617b      	str	r3, [r7, #20]
 800f404:	f04f 0200 	mov.w	r2, #0
 800f408:	f04f 0300 	mov.w	r3, #0
 800f40c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f410:	4659      	mov	r1, fp
 800f412:	00cb      	lsls	r3, r1, #3
 800f414:	4651      	mov	r1, sl
 800f416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f41a:	4651      	mov	r1, sl
 800f41c:	00ca      	lsls	r2, r1, #3
 800f41e:	4610      	mov	r0, r2
 800f420:	4619      	mov	r1, r3
 800f422:	4603      	mov	r3, r0
 800f424:	4642      	mov	r2, r8
 800f426:	189b      	adds	r3, r3, r2
 800f428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f42c:	464b      	mov	r3, r9
 800f42e:	460a      	mov	r2, r1
 800f430:	eb42 0303 	adc.w	r3, r2, r3
 800f434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f442:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f444:	f04f 0200 	mov.w	r2, #0
 800f448:	f04f 0300 	mov.w	r3, #0
 800f44c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800f450:	4649      	mov	r1, r9
 800f452:	008b      	lsls	r3, r1, #2
 800f454:	4641      	mov	r1, r8
 800f456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f45a:	4641      	mov	r1, r8
 800f45c:	008a      	lsls	r2, r1, #2
 800f45e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f462:	f7f1 fb9d 	bl	8000ba0 <__aeabi_uldivmod>
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4611      	mov	r1, r2
 800f46c:	4b38      	ldr	r3, [pc, #224]	@ (800f550 <UART_SetConfig+0x4e4>)
 800f46e:	fba3 2301 	umull	r2, r3, r3, r1
 800f472:	095b      	lsrs	r3, r3, #5
 800f474:	2264      	movs	r2, #100	@ 0x64
 800f476:	fb02 f303 	mul.w	r3, r2, r3
 800f47a:	1acb      	subs	r3, r1, r3
 800f47c:	011b      	lsls	r3, r3, #4
 800f47e:	3332      	adds	r3, #50	@ 0x32
 800f480:	4a33      	ldr	r2, [pc, #204]	@ (800f550 <UART_SetConfig+0x4e4>)
 800f482:	fba2 2303 	umull	r2, r3, r2, r3
 800f486:	095b      	lsrs	r3, r3, #5
 800f488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f48c:	441c      	add	r4, r3
 800f48e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f492:	2200      	movs	r2, #0
 800f494:	673b      	str	r3, [r7, #112]	@ 0x70
 800f496:	677a      	str	r2, [r7, #116]	@ 0x74
 800f498:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f49c:	4642      	mov	r2, r8
 800f49e:	464b      	mov	r3, r9
 800f4a0:	1891      	adds	r1, r2, r2
 800f4a2:	60b9      	str	r1, [r7, #8]
 800f4a4:	415b      	adcs	r3, r3
 800f4a6:	60fb      	str	r3, [r7, #12]
 800f4a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f4ac:	4641      	mov	r1, r8
 800f4ae:	1851      	adds	r1, r2, r1
 800f4b0:	6039      	str	r1, [r7, #0]
 800f4b2:	4649      	mov	r1, r9
 800f4b4:	414b      	adcs	r3, r1
 800f4b6:	607b      	str	r3, [r7, #4]
 800f4b8:	f04f 0200 	mov.w	r2, #0
 800f4bc:	f04f 0300 	mov.w	r3, #0
 800f4c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f4c4:	4659      	mov	r1, fp
 800f4c6:	00cb      	lsls	r3, r1, #3
 800f4c8:	4651      	mov	r1, sl
 800f4ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f4ce:	4651      	mov	r1, sl
 800f4d0:	00ca      	lsls	r2, r1, #3
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	4642      	mov	r2, r8
 800f4da:	189b      	adds	r3, r3, r2
 800f4dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f4de:	464b      	mov	r3, r9
 800f4e0:	460a      	mov	r2, r1
 800f4e2:	eb42 0303 	adc.w	r3, r2, r3
 800f4e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800f4f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800f4f4:	f04f 0200 	mov.w	r2, #0
 800f4f8:	f04f 0300 	mov.w	r3, #0
 800f4fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f500:	4649      	mov	r1, r9
 800f502:	008b      	lsls	r3, r1, #2
 800f504:	4641      	mov	r1, r8
 800f506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f50a:	4641      	mov	r1, r8
 800f50c:	008a      	lsls	r2, r1, #2
 800f50e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f512:	f7f1 fb45 	bl	8000ba0 <__aeabi_uldivmod>
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4b0d      	ldr	r3, [pc, #52]	@ (800f550 <UART_SetConfig+0x4e4>)
 800f51c:	fba3 1302 	umull	r1, r3, r3, r2
 800f520:	095b      	lsrs	r3, r3, #5
 800f522:	2164      	movs	r1, #100	@ 0x64
 800f524:	fb01 f303 	mul.w	r3, r1, r3
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	3332      	adds	r3, #50	@ 0x32
 800f52e:	4a08      	ldr	r2, [pc, #32]	@ (800f550 <UART_SetConfig+0x4e4>)
 800f530:	fba2 2303 	umull	r2, r3, r2, r3
 800f534:	095b      	lsrs	r3, r3, #5
 800f536:	f003 020f 	and.w	r2, r3, #15
 800f53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4422      	add	r2, r4
 800f542:	609a      	str	r2, [r3, #8]
}
 800f544:	bf00      	nop
 800f546:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f54a:	46bd      	mov	sp, r7
 800f54c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f550:	51eb851f 	.word	0x51eb851f

0800f554 <sqrt>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	ed2d 8b02 	vpush	{d8}
 800f55a:	ec55 4b10 	vmov	r4, r5, d0
 800f55e:	f000 f8d1 	bl	800f704 <__ieee754_sqrt>
 800f562:	4622      	mov	r2, r4
 800f564:	462b      	mov	r3, r5
 800f566:	4620      	mov	r0, r4
 800f568:	4629      	mov	r1, r5
 800f56a:	eeb0 8a40 	vmov.f32	s16, s0
 800f56e:	eef0 8a60 	vmov.f32	s17, s1
 800f572:	f7f1 fa87 	bl	8000a84 <__aeabi_dcmpun>
 800f576:	b990      	cbnz	r0, 800f59e <sqrt+0x4a>
 800f578:	2200      	movs	r2, #0
 800f57a:	2300      	movs	r3, #0
 800f57c:	4620      	mov	r0, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	f7f1 fa58 	bl	8000a34 <__aeabi_dcmplt>
 800f584:	b158      	cbz	r0, 800f59e <sqrt+0x4a>
 800f586:	f001 fb2d 	bl	8010be4 <__errno>
 800f58a:	2321      	movs	r3, #33	@ 0x21
 800f58c:	6003      	str	r3, [r0, #0]
 800f58e:	2200      	movs	r2, #0
 800f590:	2300      	movs	r3, #0
 800f592:	4610      	mov	r0, r2
 800f594:	4619      	mov	r1, r3
 800f596:	f7f1 f905 	bl	80007a4 <__aeabi_ddiv>
 800f59a:	ec41 0b18 	vmov	d8, r0, r1
 800f59e:	eeb0 0a48 	vmov.f32	s0, s16
 800f5a2:	eef0 0a68 	vmov.f32	s1, s17
 800f5a6:	ecbd 8b02 	vpop	{d8}
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	0000      	movs	r0, r0
	...

0800f5b0 <cos>:
 800f5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5b2:	ec53 2b10 	vmov	r2, r3, d0
 800f5b6:	4826      	ldr	r0, [pc, #152]	@ (800f650 <cos+0xa0>)
 800f5b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f5bc:	4281      	cmp	r1, r0
 800f5be:	d806      	bhi.n	800f5ce <cos+0x1e>
 800f5c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f648 <cos+0x98>
 800f5c4:	b005      	add	sp, #20
 800f5c6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ca:	f000 b975 	b.w	800f8b8 <__kernel_cos>
 800f5ce:	4821      	ldr	r0, [pc, #132]	@ (800f654 <cos+0xa4>)
 800f5d0:	4281      	cmp	r1, r0
 800f5d2:	d908      	bls.n	800f5e6 <cos+0x36>
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	f7f0 fe02 	bl	80001e0 <__aeabi_dsub>
 800f5dc:	ec41 0b10 	vmov	d0, r0, r1
 800f5e0:	b005      	add	sp, #20
 800f5e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5e6:	4668      	mov	r0, sp
 800f5e8:	f000 faea 	bl	800fbc0 <__ieee754_rem_pio2>
 800f5ec:	f000 0003 	and.w	r0, r0, #3
 800f5f0:	2801      	cmp	r0, #1
 800f5f2:	d00b      	beq.n	800f60c <cos+0x5c>
 800f5f4:	2802      	cmp	r0, #2
 800f5f6:	d015      	beq.n	800f624 <cos+0x74>
 800f5f8:	b9d8      	cbnz	r0, 800f632 <cos+0x82>
 800f5fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5fe:	ed9d 0b00 	vldr	d0, [sp]
 800f602:	f000 f959 	bl	800f8b8 <__kernel_cos>
 800f606:	ec51 0b10 	vmov	r0, r1, d0
 800f60a:	e7e7      	b.n	800f5dc <cos+0x2c>
 800f60c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f610:	ed9d 0b00 	vldr	d0, [sp]
 800f614:	f000 fa18 	bl	800fa48 <__kernel_sin>
 800f618:	ec53 2b10 	vmov	r2, r3, d0
 800f61c:	4610      	mov	r0, r2
 800f61e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f622:	e7db      	b.n	800f5dc <cos+0x2c>
 800f624:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f628:	ed9d 0b00 	vldr	d0, [sp]
 800f62c:	f000 f944 	bl	800f8b8 <__kernel_cos>
 800f630:	e7f2      	b.n	800f618 <cos+0x68>
 800f632:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f636:	ed9d 0b00 	vldr	d0, [sp]
 800f63a:	2001      	movs	r0, #1
 800f63c:	f000 fa04 	bl	800fa48 <__kernel_sin>
 800f640:	e7e1      	b.n	800f606 <cos+0x56>
 800f642:	bf00      	nop
 800f644:	f3af 8000 	nop.w
	...
 800f650:	3fe921fb 	.word	0x3fe921fb
 800f654:	7fefffff 	.word	0x7fefffff

0800f658 <sin>:
 800f658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f65a:	ec53 2b10 	vmov	r2, r3, d0
 800f65e:	4826      	ldr	r0, [pc, #152]	@ (800f6f8 <sin+0xa0>)
 800f660:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f664:	4281      	cmp	r1, r0
 800f666:	d807      	bhi.n	800f678 <sin+0x20>
 800f668:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f6f0 <sin+0x98>
 800f66c:	2000      	movs	r0, #0
 800f66e:	b005      	add	sp, #20
 800f670:	f85d eb04 	ldr.w	lr, [sp], #4
 800f674:	f000 b9e8 	b.w	800fa48 <__kernel_sin>
 800f678:	4820      	ldr	r0, [pc, #128]	@ (800f6fc <sin+0xa4>)
 800f67a:	4281      	cmp	r1, r0
 800f67c:	d908      	bls.n	800f690 <sin+0x38>
 800f67e:	4610      	mov	r0, r2
 800f680:	4619      	mov	r1, r3
 800f682:	f7f0 fdad 	bl	80001e0 <__aeabi_dsub>
 800f686:	ec41 0b10 	vmov	d0, r0, r1
 800f68a:	b005      	add	sp, #20
 800f68c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f690:	4668      	mov	r0, sp
 800f692:	f000 fa95 	bl	800fbc0 <__ieee754_rem_pio2>
 800f696:	f000 0003 	and.w	r0, r0, #3
 800f69a:	2801      	cmp	r0, #1
 800f69c:	d00c      	beq.n	800f6b8 <sin+0x60>
 800f69e:	2802      	cmp	r0, #2
 800f6a0:	d011      	beq.n	800f6c6 <sin+0x6e>
 800f6a2:	b9e8      	cbnz	r0, 800f6e0 <sin+0x88>
 800f6a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6a8:	ed9d 0b00 	vldr	d0, [sp]
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	f000 f9cb 	bl	800fa48 <__kernel_sin>
 800f6b2:	ec51 0b10 	vmov	r0, r1, d0
 800f6b6:	e7e6      	b.n	800f686 <sin+0x2e>
 800f6b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6bc:	ed9d 0b00 	vldr	d0, [sp]
 800f6c0:	f000 f8fa 	bl	800f8b8 <__kernel_cos>
 800f6c4:	e7f5      	b.n	800f6b2 <sin+0x5a>
 800f6c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6ca:	ed9d 0b00 	vldr	d0, [sp]
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	f000 f9ba 	bl	800fa48 <__kernel_sin>
 800f6d4:	ec53 2b10 	vmov	r2, r3, d0
 800f6d8:	4610      	mov	r0, r2
 800f6da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6de:	e7d2      	b.n	800f686 <sin+0x2e>
 800f6e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6e4:	ed9d 0b00 	vldr	d0, [sp]
 800f6e8:	f000 f8e6 	bl	800f8b8 <__kernel_cos>
 800f6ec:	e7f2      	b.n	800f6d4 <sin+0x7c>
 800f6ee:	bf00      	nop
	...
 800f6f8:	3fe921fb 	.word	0x3fe921fb
 800f6fc:	7fefffff 	.word	0x7fefffff

0800f700 <atan2f>:
 800f700:	f000 bc62 	b.w	800ffc8 <__ieee754_atan2f>

0800f704 <__ieee754_sqrt>:
 800f704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f708:	4a68      	ldr	r2, [pc, #416]	@ (800f8ac <__ieee754_sqrt+0x1a8>)
 800f70a:	ec55 4b10 	vmov	r4, r5, d0
 800f70e:	43aa      	bics	r2, r5
 800f710:	462b      	mov	r3, r5
 800f712:	4621      	mov	r1, r4
 800f714:	d110      	bne.n	800f738 <__ieee754_sqrt+0x34>
 800f716:	4622      	mov	r2, r4
 800f718:	4620      	mov	r0, r4
 800f71a:	4629      	mov	r1, r5
 800f71c:	f7f0 ff18 	bl	8000550 <__aeabi_dmul>
 800f720:	4602      	mov	r2, r0
 800f722:	460b      	mov	r3, r1
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f0 fd5c 	bl	80001e4 <__adddf3>
 800f72c:	4604      	mov	r4, r0
 800f72e:	460d      	mov	r5, r1
 800f730:	ec45 4b10 	vmov	d0, r4, r5
 800f734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f738:	2d00      	cmp	r5, #0
 800f73a:	dc0e      	bgt.n	800f75a <__ieee754_sqrt+0x56>
 800f73c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f740:	4322      	orrs	r2, r4
 800f742:	d0f5      	beq.n	800f730 <__ieee754_sqrt+0x2c>
 800f744:	b19d      	cbz	r5, 800f76e <__ieee754_sqrt+0x6a>
 800f746:	4622      	mov	r2, r4
 800f748:	4620      	mov	r0, r4
 800f74a:	4629      	mov	r1, r5
 800f74c:	f7f0 fd48 	bl	80001e0 <__aeabi_dsub>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	f7f1 f826 	bl	80007a4 <__aeabi_ddiv>
 800f758:	e7e8      	b.n	800f72c <__ieee754_sqrt+0x28>
 800f75a:	152a      	asrs	r2, r5, #20
 800f75c:	d115      	bne.n	800f78a <__ieee754_sqrt+0x86>
 800f75e:	2000      	movs	r0, #0
 800f760:	e009      	b.n	800f776 <__ieee754_sqrt+0x72>
 800f762:	0acb      	lsrs	r3, r1, #11
 800f764:	3a15      	subs	r2, #21
 800f766:	0549      	lsls	r1, r1, #21
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0fa      	beq.n	800f762 <__ieee754_sqrt+0x5e>
 800f76c:	e7f7      	b.n	800f75e <__ieee754_sqrt+0x5a>
 800f76e:	462a      	mov	r2, r5
 800f770:	e7fa      	b.n	800f768 <__ieee754_sqrt+0x64>
 800f772:	005b      	lsls	r3, r3, #1
 800f774:	3001      	adds	r0, #1
 800f776:	02dc      	lsls	r4, r3, #11
 800f778:	d5fb      	bpl.n	800f772 <__ieee754_sqrt+0x6e>
 800f77a:	1e44      	subs	r4, r0, #1
 800f77c:	1b12      	subs	r2, r2, r4
 800f77e:	f1c0 0420 	rsb	r4, r0, #32
 800f782:	fa21 f404 	lsr.w	r4, r1, r4
 800f786:	4323      	orrs	r3, r4
 800f788:	4081      	lsls	r1, r0
 800f78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f78e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f796:	07d2      	lsls	r2, r2, #31
 800f798:	bf5c      	itt	pl
 800f79a:	005b      	lslpl	r3, r3, #1
 800f79c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f7a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f7a4:	bf58      	it	pl
 800f7a6:	0049      	lslpl	r1, r1, #1
 800f7a8:	2600      	movs	r6, #0
 800f7aa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f7ae:	106d      	asrs	r5, r5, #1
 800f7b0:	0049      	lsls	r1, r1, #1
 800f7b2:	2016      	movs	r0, #22
 800f7b4:	4632      	mov	r2, r6
 800f7b6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f7ba:	1917      	adds	r7, r2, r4
 800f7bc:	429f      	cmp	r7, r3
 800f7be:	bfde      	ittt	le
 800f7c0:	193a      	addle	r2, r7, r4
 800f7c2:	1bdb      	suble	r3, r3, r7
 800f7c4:	1936      	addle	r6, r6, r4
 800f7c6:	0fcf      	lsrs	r7, r1, #31
 800f7c8:	3801      	subs	r0, #1
 800f7ca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f7ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f7d6:	d1f0      	bne.n	800f7ba <__ieee754_sqrt+0xb6>
 800f7d8:	4604      	mov	r4, r0
 800f7da:	2720      	movs	r7, #32
 800f7dc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	eb00 0e0c 	add.w	lr, r0, ip
 800f7e6:	db02      	blt.n	800f7ee <__ieee754_sqrt+0xea>
 800f7e8:	d113      	bne.n	800f812 <__ieee754_sqrt+0x10e>
 800f7ea:	458e      	cmp	lr, r1
 800f7ec:	d811      	bhi.n	800f812 <__ieee754_sqrt+0x10e>
 800f7ee:	f1be 0f00 	cmp.w	lr, #0
 800f7f2:	eb0e 000c 	add.w	r0, lr, ip
 800f7f6:	da42      	bge.n	800f87e <__ieee754_sqrt+0x17a>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	db40      	blt.n	800f87e <__ieee754_sqrt+0x17a>
 800f7fc:	f102 0801 	add.w	r8, r2, #1
 800f800:	1a9b      	subs	r3, r3, r2
 800f802:	458e      	cmp	lr, r1
 800f804:	bf88      	it	hi
 800f806:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f80a:	eba1 010e 	sub.w	r1, r1, lr
 800f80e:	4464      	add	r4, ip
 800f810:	4642      	mov	r2, r8
 800f812:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f816:	3f01      	subs	r7, #1
 800f818:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f81c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f820:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f824:	d1dc      	bne.n	800f7e0 <__ieee754_sqrt+0xdc>
 800f826:	4319      	orrs	r1, r3
 800f828:	d01b      	beq.n	800f862 <__ieee754_sqrt+0x15e>
 800f82a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f8b0 <__ieee754_sqrt+0x1ac>
 800f82e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f8b4 <__ieee754_sqrt+0x1b0>
 800f832:	e9da 0100 	ldrd	r0, r1, [sl]
 800f836:	e9db 2300 	ldrd	r2, r3, [fp]
 800f83a:	f7f0 fcd1 	bl	80001e0 <__aeabi_dsub>
 800f83e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	4640      	mov	r0, r8
 800f848:	4649      	mov	r1, r9
 800f84a:	f7f1 f8fd 	bl	8000a48 <__aeabi_dcmple>
 800f84e:	b140      	cbz	r0, 800f862 <__ieee754_sqrt+0x15e>
 800f850:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f854:	e9da 0100 	ldrd	r0, r1, [sl]
 800f858:	e9db 2300 	ldrd	r2, r3, [fp]
 800f85c:	d111      	bne.n	800f882 <__ieee754_sqrt+0x17e>
 800f85e:	3601      	adds	r6, #1
 800f860:	463c      	mov	r4, r7
 800f862:	1072      	asrs	r2, r6, #1
 800f864:	0863      	lsrs	r3, r4, #1
 800f866:	07f1      	lsls	r1, r6, #31
 800f868:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f86c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f870:	bf48      	it	mi
 800f872:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f876:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f87a:	4618      	mov	r0, r3
 800f87c:	e756      	b.n	800f72c <__ieee754_sqrt+0x28>
 800f87e:	4690      	mov	r8, r2
 800f880:	e7be      	b.n	800f800 <__ieee754_sqrt+0xfc>
 800f882:	f7f0 fcaf 	bl	80001e4 <__adddf3>
 800f886:	e9da 8900 	ldrd	r8, r9, [sl]
 800f88a:	4602      	mov	r2, r0
 800f88c:	460b      	mov	r3, r1
 800f88e:	4640      	mov	r0, r8
 800f890:	4649      	mov	r1, r9
 800f892:	f7f1 f8cf 	bl	8000a34 <__aeabi_dcmplt>
 800f896:	b120      	cbz	r0, 800f8a2 <__ieee754_sqrt+0x19e>
 800f898:	1ca0      	adds	r0, r4, #2
 800f89a:	bf08      	it	eq
 800f89c:	3601      	addeq	r6, #1
 800f89e:	3402      	adds	r4, #2
 800f8a0:	e7df      	b.n	800f862 <__ieee754_sqrt+0x15e>
 800f8a2:	1c63      	adds	r3, r4, #1
 800f8a4:	f023 0401 	bic.w	r4, r3, #1
 800f8a8:	e7db      	b.n	800f862 <__ieee754_sqrt+0x15e>
 800f8aa:	bf00      	nop
 800f8ac:	7ff00000 	.word	0x7ff00000
 800f8b0:	20000038 	.word	0x20000038
 800f8b4:	20000030 	.word	0x20000030

0800f8b8 <__kernel_cos>:
 800f8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	ec57 6b10 	vmov	r6, r7, d0
 800f8c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f8c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f8c8:	ed8d 1b00 	vstr	d1, [sp]
 800f8cc:	d206      	bcs.n	800f8dc <__kernel_cos+0x24>
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f7f1 f8ed 	bl	8000ab0 <__aeabi_d2iz>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	f000 8088 	beq.w	800f9ec <__kernel_cos+0x134>
 800f8dc:	4632      	mov	r2, r6
 800f8de:	463b      	mov	r3, r7
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	f7f0 fe34 	bl	8000550 <__aeabi_dmul>
 800f8e8:	4b51      	ldr	r3, [pc, #324]	@ (800fa30 <__kernel_cos+0x178>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	460d      	mov	r5, r1
 800f8f0:	f7f0 fe2e 	bl	8000550 <__aeabi_dmul>
 800f8f4:	a340      	add	r3, pc, #256	@ (adr r3, 800f9f8 <__kernel_cos+0x140>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	4682      	mov	sl, r0
 800f8fc:	468b      	mov	fp, r1
 800f8fe:	4620      	mov	r0, r4
 800f900:	4629      	mov	r1, r5
 800f902:	f7f0 fe25 	bl	8000550 <__aeabi_dmul>
 800f906:	a33e      	add	r3, pc, #248	@ (adr r3, 800fa00 <__kernel_cos+0x148>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f7f0 fc6a 	bl	80001e4 <__adddf3>
 800f910:	4622      	mov	r2, r4
 800f912:	462b      	mov	r3, r5
 800f914:	f7f0 fe1c 	bl	8000550 <__aeabi_dmul>
 800f918:	a33b      	add	r3, pc, #236	@ (adr r3, 800fa08 <__kernel_cos+0x150>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fc5f 	bl	80001e0 <__aeabi_dsub>
 800f922:	4622      	mov	r2, r4
 800f924:	462b      	mov	r3, r5
 800f926:	f7f0 fe13 	bl	8000550 <__aeabi_dmul>
 800f92a:	a339      	add	r3, pc, #228	@ (adr r3, 800fa10 <__kernel_cos+0x158>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	f7f0 fc58 	bl	80001e4 <__adddf3>
 800f934:	4622      	mov	r2, r4
 800f936:	462b      	mov	r3, r5
 800f938:	f7f0 fe0a 	bl	8000550 <__aeabi_dmul>
 800f93c:	a336      	add	r3, pc, #216	@ (adr r3, 800fa18 <__kernel_cos+0x160>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f7f0 fc4d 	bl	80001e0 <__aeabi_dsub>
 800f946:	4622      	mov	r2, r4
 800f948:	462b      	mov	r3, r5
 800f94a:	f7f0 fe01 	bl	8000550 <__aeabi_dmul>
 800f94e:	a334      	add	r3, pc, #208	@ (adr r3, 800fa20 <__kernel_cos+0x168>)
 800f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f954:	f7f0 fc46 	bl	80001e4 <__adddf3>
 800f958:	4622      	mov	r2, r4
 800f95a:	462b      	mov	r3, r5
 800f95c:	f7f0 fdf8 	bl	8000550 <__aeabi_dmul>
 800f960:	4622      	mov	r2, r4
 800f962:	462b      	mov	r3, r5
 800f964:	f7f0 fdf4 	bl	8000550 <__aeabi_dmul>
 800f968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f96c:	4604      	mov	r4, r0
 800f96e:	460d      	mov	r5, r1
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fdec 	bl	8000550 <__aeabi_dmul>
 800f978:	460b      	mov	r3, r1
 800f97a:	4602      	mov	r2, r0
 800f97c:	4629      	mov	r1, r5
 800f97e:	4620      	mov	r0, r4
 800f980:	f7f0 fc2e 	bl	80001e0 <__aeabi_dsub>
 800f984:	4b2b      	ldr	r3, [pc, #172]	@ (800fa34 <__kernel_cos+0x17c>)
 800f986:	4598      	cmp	r8, r3
 800f988:	4606      	mov	r6, r0
 800f98a:	460f      	mov	r7, r1
 800f98c:	d810      	bhi.n	800f9b0 <__kernel_cos+0xf8>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	4650      	mov	r0, sl
 800f994:	4659      	mov	r1, fp
 800f996:	f7f0 fc23 	bl	80001e0 <__aeabi_dsub>
 800f99a:	460b      	mov	r3, r1
 800f99c:	4926      	ldr	r1, [pc, #152]	@ (800fa38 <__kernel_cos+0x180>)
 800f99e:	4602      	mov	r2, r0
 800f9a0:	2000      	movs	r0, #0
 800f9a2:	f7f0 fc1d 	bl	80001e0 <__aeabi_dsub>
 800f9a6:	ec41 0b10 	vmov	d0, r0, r1
 800f9aa:	b003      	add	sp, #12
 800f9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b0:	4b22      	ldr	r3, [pc, #136]	@ (800fa3c <__kernel_cos+0x184>)
 800f9b2:	4921      	ldr	r1, [pc, #132]	@ (800fa38 <__kernel_cos+0x180>)
 800f9b4:	4598      	cmp	r8, r3
 800f9b6:	bf8c      	ite	hi
 800f9b8:	4d21      	ldrhi	r5, [pc, #132]	@ (800fa40 <__kernel_cos+0x188>)
 800f9ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f9be:	2400      	movs	r4, #0
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f7f0 fc0b 	bl	80001e0 <__aeabi_dsub>
 800f9ca:	4622      	mov	r2, r4
 800f9cc:	4680      	mov	r8, r0
 800f9ce:	4689      	mov	r9, r1
 800f9d0:	462b      	mov	r3, r5
 800f9d2:	4650      	mov	r0, sl
 800f9d4:	4659      	mov	r1, fp
 800f9d6:	f7f0 fc03 	bl	80001e0 <__aeabi_dsub>
 800f9da:	4632      	mov	r2, r6
 800f9dc:	463b      	mov	r3, r7
 800f9de:	f7f0 fbff 	bl	80001e0 <__aeabi_dsub>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4640      	mov	r0, r8
 800f9e8:	4649      	mov	r1, r9
 800f9ea:	e7da      	b.n	800f9a2 <__kernel_cos+0xea>
 800f9ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fa28 <__kernel_cos+0x170>
 800f9f0:	e7db      	b.n	800f9aa <__kernel_cos+0xf2>
 800f9f2:	bf00      	nop
 800f9f4:	f3af 8000 	nop.w
 800f9f8:	be8838d4 	.word	0xbe8838d4
 800f9fc:	bda8fae9 	.word	0xbda8fae9
 800fa00:	bdb4b1c4 	.word	0xbdb4b1c4
 800fa04:	3e21ee9e 	.word	0x3e21ee9e
 800fa08:	809c52ad 	.word	0x809c52ad
 800fa0c:	3e927e4f 	.word	0x3e927e4f
 800fa10:	19cb1590 	.word	0x19cb1590
 800fa14:	3efa01a0 	.word	0x3efa01a0
 800fa18:	16c15177 	.word	0x16c15177
 800fa1c:	3f56c16c 	.word	0x3f56c16c
 800fa20:	5555554c 	.word	0x5555554c
 800fa24:	3fa55555 	.word	0x3fa55555
 800fa28:	00000000 	.word	0x00000000
 800fa2c:	3ff00000 	.word	0x3ff00000
 800fa30:	3fe00000 	.word	0x3fe00000
 800fa34:	3fd33332 	.word	0x3fd33332
 800fa38:	3ff00000 	.word	0x3ff00000
 800fa3c:	3fe90000 	.word	0x3fe90000
 800fa40:	3fd20000 	.word	0x3fd20000
 800fa44:	00000000 	.word	0x00000000

0800fa48 <__kernel_sin>:
 800fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	ec55 4b10 	vmov	r4, r5, d0
 800fa50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fa54:	b085      	sub	sp, #20
 800fa56:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fa5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800fa5e:	4680      	mov	r8, r0
 800fa60:	d205      	bcs.n	800fa6e <__kernel_sin+0x26>
 800fa62:	4620      	mov	r0, r4
 800fa64:	4629      	mov	r1, r5
 800fa66:	f7f1 f823 	bl	8000ab0 <__aeabi_d2iz>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d052      	beq.n	800fb14 <__kernel_sin+0xcc>
 800fa6e:	4622      	mov	r2, r4
 800fa70:	462b      	mov	r3, r5
 800fa72:	4620      	mov	r0, r4
 800fa74:	4629      	mov	r1, r5
 800fa76:	f7f0 fd6b 	bl	8000550 <__aeabi_dmul>
 800fa7a:	4682      	mov	sl, r0
 800fa7c:	468b      	mov	fp, r1
 800fa7e:	4602      	mov	r2, r0
 800fa80:	460b      	mov	r3, r1
 800fa82:	4620      	mov	r0, r4
 800fa84:	4629      	mov	r1, r5
 800fa86:	f7f0 fd63 	bl	8000550 <__aeabi_dmul>
 800fa8a:	a342      	add	r3, pc, #264	@ (adr r3, 800fb94 <__kernel_sin+0x14c>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	e9cd 0100 	strd	r0, r1, [sp]
 800fa94:	4650      	mov	r0, sl
 800fa96:	4659      	mov	r1, fp
 800fa98:	f7f0 fd5a 	bl	8000550 <__aeabi_dmul>
 800fa9c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fb9c <__kernel_sin+0x154>)
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f7f0 fb9d 	bl	80001e0 <__aeabi_dsub>
 800faa6:	4652      	mov	r2, sl
 800faa8:	465b      	mov	r3, fp
 800faaa:	f7f0 fd51 	bl	8000550 <__aeabi_dmul>
 800faae:	a33d      	add	r3, pc, #244	@ (adr r3, 800fba4 <__kernel_sin+0x15c>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fb96 	bl	80001e4 <__adddf3>
 800fab8:	4652      	mov	r2, sl
 800faba:	465b      	mov	r3, fp
 800fabc:	f7f0 fd48 	bl	8000550 <__aeabi_dmul>
 800fac0:	a33a      	add	r3, pc, #232	@ (adr r3, 800fbac <__kernel_sin+0x164>)
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	f7f0 fb8b 	bl	80001e0 <__aeabi_dsub>
 800faca:	4652      	mov	r2, sl
 800facc:	465b      	mov	r3, fp
 800face:	f7f0 fd3f 	bl	8000550 <__aeabi_dmul>
 800fad2:	a338      	add	r3, pc, #224	@ (adr r3, 800fbb4 <__kernel_sin+0x16c>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	f7f0 fb84 	bl	80001e4 <__adddf3>
 800fadc:	4606      	mov	r6, r0
 800fade:	460f      	mov	r7, r1
 800fae0:	f1b8 0f00 	cmp.w	r8, #0
 800fae4:	d11b      	bne.n	800fb1e <__kernel_sin+0xd6>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	4650      	mov	r0, sl
 800faec:	4659      	mov	r1, fp
 800faee:	f7f0 fd2f 	bl	8000550 <__aeabi_dmul>
 800faf2:	a325      	add	r3, pc, #148	@ (adr r3, 800fb88 <__kernel_sin+0x140>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f0 fb72 	bl	80001e0 <__aeabi_dsub>
 800fafc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb00:	f7f0 fd26 	bl	8000550 <__aeabi_dmul>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	4620      	mov	r0, r4
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	f7f0 fb6a 	bl	80001e4 <__adddf3>
 800fb10:	4604      	mov	r4, r0
 800fb12:	460d      	mov	r5, r1
 800fb14:	ec45 4b10 	vmov	d0, r4, r5
 800fb18:	b005      	add	sp, #20
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb22:	4b1b      	ldr	r3, [pc, #108]	@ (800fb90 <__kernel_sin+0x148>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	f7f0 fd13 	bl	8000550 <__aeabi_dmul>
 800fb2a:	4632      	mov	r2, r6
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	4689      	mov	r9, r1
 800fb30:	463b      	mov	r3, r7
 800fb32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb36:	f7f0 fd0b 	bl	8000550 <__aeabi_dmul>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	4640      	mov	r0, r8
 800fb40:	4649      	mov	r1, r9
 800fb42:	f7f0 fb4d 	bl	80001e0 <__aeabi_dsub>
 800fb46:	4652      	mov	r2, sl
 800fb48:	465b      	mov	r3, fp
 800fb4a:	f7f0 fd01 	bl	8000550 <__aeabi_dmul>
 800fb4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb52:	f7f0 fb45 	bl	80001e0 <__aeabi_dsub>
 800fb56:	a30c      	add	r3, pc, #48	@ (adr r3, 800fb88 <__kernel_sin+0x140>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	460f      	mov	r7, r1
 800fb60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb64:	f7f0 fcf4 	bl	8000550 <__aeabi_dmul>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	4639      	mov	r1, r7
 800fb70:	f7f0 fb38 	bl	80001e4 <__adddf3>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4620      	mov	r0, r4
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f7f0 fb30 	bl	80001e0 <__aeabi_dsub>
 800fb80:	e7c6      	b.n	800fb10 <__kernel_sin+0xc8>
 800fb82:	bf00      	nop
 800fb84:	f3af 8000 	nop.w
 800fb88:	55555549 	.word	0x55555549
 800fb8c:	3fc55555 	.word	0x3fc55555
 800fb90:	3fe00000 	.word	0x3fe00000
 800fb94:	5acfd57c 	.word	0x5acfd57c
 800fb98:	3de5d93a 	.word	0x3de5d93a
 800fb9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fba0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fba4:	57b1fe7d 	.word	0x57b1fe7d
 800fba8:	3ec71de3 	.word	0x3ec71de3
 800fbac:	19c161d5 	.word	0x19c161d5
 800fbb0:	3f2a01a0 	.word	0x3f2a01a0
 800fbb4:	1110f8a6 	.word	0x1110f8a6
 800fbb8:	3f811111 	.word	0x3f811111
 800fbbc:	00000000 	.word	0x00000000

0800fbc0 <__ieee754_rem_pio2>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	ec57 6b10 	vmov	r6, r7, d0
 800fbc8:	4bc5      	ldr	r3, [pc, #788]	@ (800fee0 <__ieee754_rem_pio2+0x320>)
 800fbca:	b08d      	sub	sp, #52	@ 0x34
 800fbcc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fbd0:	4598      	cmp	r8, r3
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	9704      	str	r7, [sp, #16]
 800fbd6:	d807      	bhi.n	800fbe8 <__ieee754_rem_pio2+0x28>
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2300      	movs	r3, #0
 800fbdc:	ed80 0b00 	vstr	d0, [r0]
 800fbe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fbe4:	2500      	movs	r5, #0
 800fbe6:	e028      	b.n	800fc3a <__ieee754_rem_pio2+0x7a>
 800fbe8:	4bbe      	ldr	r3, [pc, #760]	@ (800fee4 <__ieee754_rem_pio2+0x324>)
 800fbea:	4598      	cmp	r8, r3
 800fbec:	d878      	bhi.n	800fce0 <__ieee754_rem_pio2+0x120>
 800fbee:	9b04      	ldr	r3, [sp, #16]
 800fbf0:	4dbd      	ldr	r5, [pc, #756]	@ (800fee8 <__ieee754_rem_pio2+0x328>)
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fea8 <__ieee754_rem_pio2+0x2e8>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	4639      	mov	r1, r7
 800fbfe:	dd38      	ble.n	800fc72 <__ieee754_rem_pio2+0xb2>
 800fc00:	f7f0 faee 	bl	80001e0 <__aeabi_dsub>
 800fc04:	45a8      	cmp	r8, r5
 800fc06:	4606      	mov	r6, r0
 800fc08:	460f      	mov	r7, r1
 800fc0a:	d01a      	beq.n	800fc42 <__ieee754_rem_pio2+0x82>
 800fc0c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800feb0 <__ieee754_rem_pio2+0x2f0>)
 800fc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc12:	f7f0 fae5 	bl	80001e0 <__aeabi_dsub>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4689      	mov	r9, r1
 800fc1e:	4630      	mov	r0, r6
 800fc20:	4639      	mov	r1, r7
 800fc22:	f7f0 fadd 	bl	80001e0 <__aeabi_dsub>
 800fc26:	a3a2      	add	r3, pc, #648	@ (adr r3, 800feb0 <__ieee754_rem_pio2+0x2f0>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fad8 	bl	80001e0 <__aeabi_dsub>
 800fc30:	e9c4 8900 	strd	r8, r9, [r4]
 800fc34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc38:	2501      	movs	r5, #1
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	b00d      	add	sp, #52	@ 0x34
 800fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc42:	a39d      	add	r3, pc, #628	@ (adr r3, 800feb8 <__ieee754_rem_pio2+0x2f8>)
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	f7f0 faca 	bl	80001e0 <__aeabi_dsub>
 800fc4c:	a39c      	add	r3, pc, #624	@ (adr r3, 800fec0 <__ieee754_rem_pio2+0x300>)
 800fc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc52:	4606      	mov	r6, r0
 800fc54:	460f      	mov	r7, r1
 800fc56:	f7f0 fac3 	bl	80001e0 <__aeabi_dsub>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4680      	mov	r8, r0
 800fc60:	4689      	mov	r9, r1
 800fc62:	4630      	mov	r0, r6
 800fc64:	4639      	mov	r1, r7
 800fc66:	f7f0 fabb 	bl	80001e0 <__aeabi_dsub>
 800fc6a:	a395      	add	r3, pc, #596	@ (adr r3, 800fec0 <__ieee754_rem_pio2+0x300>)
 800fc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc70:	e7dc      	b.n	800fc2c <__ieee754_rem_pio2+0x6c>
 800fc72:	f7f0 fab7 	bl	80001e4 <__adddf3>
 800fc76:	45a8      	cmp	r8, r5
 800fc78:	4606      	mov	r6, r0
 800fc7a:	460f      	mov	r7, r1
 800fc7c:	d018      	beq.n	800fcb0 <__ieee754_rem_pio2+0xf0>
 800fc7e:	a38c      	add	r3, pc, #560	@ (adr r3, 800feb0 <__ieee754_rem_pio2+0x2f0>)
 800fc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc84:	f7f0 faae 	bl	80001e4 <__adddf3>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4680      	mov	r8, r0
 800fc8e:	4689      	mov	r9, r1
 800fc90:	4630      	mov	r0, r6
 800fc92:	4639      	mov	r1, r7
 800fc94:	f7f0 faa4 	bl	80001e0 <__aeabi_dsub>
 800fc98:	a385      	add	r3, pc, #532	@ (adr r3, 800feb0 <__ieee754_rem_pio2+0x2f0>)
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	f7f0 faa1 	bl	80001e4 <__adddf3>
 800fca2:	f04f 35ff 	mov.w	r5, #4294967295
 800fca6:	e9c4 8900 	strd	r8, r9, [r4]
 800fcaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fcae:	e7c4      	b.n	800fc3a <__ieee754_rem_pio2+0x7a>
 800fcb0:	a381      	add	r3, pc, #516	@ (adr r3, 800feb8 <__ieee754_rem_pio2+0x2f8>)
 800fcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb6:	f7f0 fa95 	bl	80001e4 <__adddf3>
 800fcba:	a381      	add	r3, pc, #516	@ (adr r3, 800fec0 <__ieee754_rem_pio2+0x300>)
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	4606      	mov	r6, r0
 800fcc2:	460f      	mov	r7, r1
 800fcc4:	f7f0 fa8e 	bl	80001e4 <__adddf3>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4680      	mov	r8, r0
 800fcce:	4689      	mov	r9, r1
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	4639      	mov	r1, r7
 800fcd4:	f7f0 fa84 	bl	80001e0 <__aeabi_dsub>
 800fcd8:	a379      	add	r3, pc, #484	@ (adr r3, 800fec0 <__ieee754_rem_pio2+0x300>)
 800fcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcde:	e7de      	b.n	800fc9e <__ieee754_rem_pio2+0xde>
 800fce0:	4b82      	ldr	r3, [pc, #520]	@ (800feec <__ieee754_rem_pio2+0x32c>)
 800fce2:	4598      	cmp	r8, r3
 800fce4:	f200 80d1 	bhi.w	800fe8a <__ieee754_rem_pio2+0x2ca>
 800fce8:	f000 f966 	bl	800ffb8 <fabs>
 800fcec:	ec57 6b10 	vmov	r6, r7, d0
 800fcf0:	a375      	add	r3, pc, #468	@ (adr r3, 800fec8 <__ieee754_rem_pio2+0x308>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 fc29 	bl	8000550 <__aeabi_dmul>
 800fcfe:	4b7c      	ldr	r3, [pc, #496]	@ (800fef0 <__ieee754_rem_pio2+0x330>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	f7f0 fa6f 	bl	80001e4 <__adddf3>
 800fd06:	f7f0 fed3 	bl	8000ab0 <__aeabi_d2iz>
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	f7f0 fbb6 	bl	800047c <__aeabi_i2d>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd18:	a363      	add	r3, pc, #396	@ (adr r3, 800fea8 <__ieee754_rem_pio2+0x2e8>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fc17 	bl	8000550 <__aeabi_dmul>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4630      	mov	r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	f7f0 fa59 	bl	80001e0 <__aeabi_dsub>
 800fd2e:	a360      	add	r3, pc, #384	@ (adr r3, 800feb0 <__ieee754_rem_pio2+0x2f0>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	4682      	mov	sl, r0
 800fd36:	468b      	mov	fp, r1
 800fd38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd3c:	f7f0 fc08 	bl	8000550 <__aeabi_dmul>
 800fd40:	2d1f      	cmp	r5, #31
 800fd42:	4606      	mov	r6, r0
 800fd44:	460f      	mov	r7, r1
 800fd46:	dc0c      	bgt.n	800fd62 <__ieee754_rem_pio2+0x1a2>
 800fd48:	4b6a      	ldr	r3, [pc, #424]	@ (800fef4 <__ieee754_rem_pio2+0x334>)
 800fd4a:	1e6a      	subs	r2, r5, #1
 800fd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd50:	4543      	cmp	r3, r8
 800fd52:	d006      	beq.n	800fd62 <__ieee754_rem_pio2+0x1a2>
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	4650      	mov	r0, sl
 800fd5a:	4659      	mov	r1, fp
 800fd5c:	f7f0 fa40 	bl	80001e0 <__aeabi_dsub>
 800fd60:	e00e      	b.n	800fd80 <__ieee754_rem_pio2+0x1c0>
 800fd62:	463b      	mov	r3, r7
 800fd64:	4632      	mov	r2, r6
 800fd66:	4650      	mov	r0, sl
 800fd68:	4659      	mov	r1, fp
 800fd6a:	f7f0 fa39 	bl	80001e0 <__aeabi_dsub>
 800fd6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fd72:	9305      	str	r3, [sp, #20]
 800fd74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fd78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fd7c:	2b10      	cmp	r3, #16
 800fd7e:	dc02      	bgt.n	800fd86 <__ieee754_rem_pio2+0x1c6>
 800fd80:	e9c4 0100 	strd	r0, r1, [r4]
 800fd84:	e039      	b.n	800fdfa <__ieee754_rem_pio2+0x23a>
 800fd86:	a34c      	add	r3, pc, #304	@ (adr r3, 800feb8 <__ieee754_rem_pio2+0x2f8>)
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd90:	f7f0 fbde 	bl	8000550 <__aeabi_dmul>
 800fd94:	4606      	mov	r6, r0
 800fd96:	460f      	mov	r7, r1
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4650      	mov	r0, sl
 800fd9e:	4659      	mov	r1, fp
 800fda0:	f7f0 fa1e 	bl	80001e0 <__aeabi_dsub>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4680      	mov	r8, r0
 800fdaa:	4689      	mov	r9, r1
 800fdac:	4650      	mov	r0, sl
 800fdae:	4659      	mov	r1, fp
 800fdb0:	f7f0 fa16 	bl	80001e0 <__aeabi_dsub>
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	463b      	mov	r3, r7
 800fdb8:	f7f0 fa12 	bl	80001e0 <__aeabi_dsub>
 800fdbc:	a340      	add	r3, pc, #256	@ (adr r3, 800fec0 <__ieee754_rem_pio2+0x300>)
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	4606      	mov	r6, r0
 800fdc4:	460f      	mov	r7, r1
 800fdc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdca:	f7f0 fbc1 	bl	8000550 <__aeabi_dmul>
 800fdce:	4632      	mov	r2, r6
 800fdd0:	463b      	mov	r3, r7
 800fdd2:	f7f0 fa05 	bl	80001e0 <__aeabi_dsub>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	460b      	mov	r3, r1
 800fdda:	4606      	mov	r6, r0
 800fddc:	460f      	mov	r7, r1
 800fdde:	4640      	mov	r0, r8
 800fde0:	4649      	mov	r1, r9
 800fde2:	f7f0 f9fd 	bl	80001e0 <__aeabi_dsub>
 800fde6:	9a05      	ldr	r2, [sp, #20]
 800fde8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	2b31      	cmp	r3, #49	@ 0x31
 800fdf0:	dc20      	bgt.n	800fe34 <__ieee754_rem_pio2+0x274>
 800fdf2:	e9c4 0100 	strd	r0, r1, [r4]
 800fdf6:	46c2      	mov	sl, r8
 800fdf8:	46cb      	mov	fp, r9
 800fdfa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fdfe:	4650      	mov	r0, sl
 800fe00:	4642      	mov	r2, r8
 800fe02:	464b      	mov	r3, r9
 800fe04:	4659      	mov	r1, fp
 800fe06:	f7f0 f9eb 	bl	80001e0 <__aeabi_dsub>
 800fe0a:	463b      	mov	r3, r7
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	f7f0 f9e7 	bl	80001e0 <__aeabi_dsub>
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe1a:	f6bf af0e 	bge.w	800fc3a <__ieee754_rem_pio2+0x7a>
 800fe1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fe22:	6063      	str	r3, [r4, #4]
 800fe24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe28:	f8c4 8000 	str.w	r8, [r4]
 800fe2c:	60a0      	str	r0, [r4, #8]
 800fe2e:	60e3      	str	r3, [r4, #12]
 800fe30:	426d      	negs	r5, r5
 800fe32:	e702      	b.n	800fc3a <__ieee754_rem_pio2+0x7a>
 800fe34:	a326      	add	r3, pc, #152	@ (adr r3, 800fed0 <__ieee754_rem_pio2+0x310>)
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe3e:	f7f0 fb87 	bl	8000550 <__aeabi_dmul>
 800fe42:	4606      	mov	r6, r0
 800fe44:	460f      	mov	r7, r1
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	4649      	mov	r1, r9
 800fe4e:	f7f0 f9c7 	bl	80001e0 <__aeabi_dsub>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	4682      	mov	sl, r0
 800fe58:	468b      	mov	fp, r1
 800fe5a:	4640      	mov	r0, r8
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	f7f0 f9bf 	bl	80001e0 <__aeabi_dsub>
 800fe62:	4632      	mov	r2, r6
 800fe64:	463b      	mov	r3, r7
 800fe66:	f7f0 f9bb 	bl	80001e0 <__aeabi_dsub>
 800fe6a:	a31b      	add	r3, pc, #108	@ (adr r3, 800fed8 <__ieee754_rem_pio2+0x318>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	4606      	mov	r6, r0
 800fe72:	460f      	mov	r7, r1
 800fe74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe78:	f7f0 fb6a 	bl	8000550 <__aeabi_dmul>
 800fe7c:	4632      	mov	r2, r6
 800fe7e:	463b      	mov	r3, r7
 800fe80:	f7f0 f9ae 	bl	80001e0 <__aeabi_dsub>
 800fe84:	4606      	mov	r6, r0
 800fe86:	460f      	mov	r7, r1
 800fe88:	e764      	b.n	800fd54 <__ieee754_rem_pio2+0x194>
 800fe8a:	4b1b      	ldr	r3, [pc, #108]	@ (800fef8 <__ieee754_rem_pio2+0x338>)
 800fe8c:	4598      	cmp	r8, r3
 800fe8e:	d935      	bls.n	800fefc <__ieee754_rem_pio2+0x33c>
 800fe90:	4632      	mov	r2, r6
 800fe92:	463b      	mov	r3, r7
 800fe94:	4630      	mov	r0, r6
 800fe96:	4639      	mov	r1, r7
 800fe98:	f7f0 f9a2 	bl	80001e0 <__aeabi_dsub>
 800fe9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fea0:	e9c4 0100 	strd	r0, r1, [r4]
 800fea4:	e69e      	b.n	800fbe4 <__ieee754_rem_pio2+0x24>
 800fea6:	bf00      	nop
 800fea8:	54400000 	.word	0x54400000
 800feac:	3ff921fb 	.word	0x3ff921fb
 800feb0:	1a626331 	.word	0x1a626331
 800feb4:	3dd0b461 	.word	0x3dd0b461
 800feb8:	1a600000 	.word	0x1a600000
 800febc:	3dd0b461 	.word	0x3dd0b461
 800fec0:	2e037073 	.word	0x2e037073
 800fec4:	3ba3198a 	.word	0x3ba3198a
 800fec8:	6dc9c883 	.word	0x6dc9c883
 800fecc:	3fe45f30 	.word	0x3fe45f30
 800fed0:	2e000000 	.word	0x2e000000
 800fed4:	3ba3198a 	.word	0x3ba3198a
 800fed8:	252049c1 	.word	0x252049c1
 800fedc:	397b839a 	.word	0x397b839a
 800fee0:	3fe921fb 	.word	0x3fe921fb
 800fee4:	4002d97b 	.word	0x4002d97b
 800fee8:	3ff921fb 	.word	0x3ff921fb
 800feec:	413921fb 	.word	0x413921fb
 800fef0:	3fe00000 	.word	0x3fe00000
 800fef4:	08011390 	.word	0x08011390
 800fef8:	7fefffff 	.word	0x7fefffff
 800fefc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ff00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ff04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ff08:	4630      	mov	r0, r6
 800ff0a:	460f      	mov	r7, r1
 800ff0c:	f7f0 fdd0 	bl	8000ab0 <__aeabi_d2iz>
 800ff10:	f7f0 fab4 	bl	800047c <__aeabi_i2d>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	4630      	mov	r0, r6
 800ff1a:	4639      	mov	r1, r7
 800ff1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff20:	f7f0 f95e 	bl	80001e0 <__aeabi_dsub>
 800ff24:	4b22      	ldr	r3, [pc, #136]	@ (800ffb0 <__ieee754_rem_pio2+0x3f0>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	f7f0 fb12 	bl	8000550 <__aeabi_dmul>
 800ff2c:	460f      	mov	r7, r1
 800ff2e:	4606      	mov	r6, r0
 800ff30:	f7f0 fdbe 	bl	8000ab0 <__aeabi_d2iz>
 800ff34:	f7f0 faa2 	bl	800047c <__aeabi_i2d>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	4639      	mov	r1, r7
 800ff40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff44:	f7f0 f94c 	bl	80001e0 <__aeabi_dsub>
 800ff48:	4b19      	ldr	r3, [pc, #100]	@ (800ffb0 <__ieee754_rem_pio2+0x3f0>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f7f0 fb00 	bl	8000550 <__aeabi_dmul>
 800ff50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ff54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ff58:	f04f 0803 	mov.w	r8, #3
 800ff5c:	2600      	movs	r6, #0
 800ff5e:	2700      	movs	r7, #0
 800ff60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ff64:	4632      	mov	r2, r6
 800ff66:	463b      	mov	r3, r7
 800ff68:	46c2      	mov	sl, r8
 800ff6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff6e:	f7f0 fd57 	bl	8000a20 <__aeabi_dcmpeq>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d1f4      	bne.n	800ff60 <__ieee754_rem_pio2+0x3a0>
 800ff76:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb4 <__ieee754_rem_pio2+0x3f4>)
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	2302      	movs	r3, #2
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	462a      	mov	r2, r5
 800ff80:	4653      	mov	r3, sl
 800ff82:	4621      	mov	r1, r4
 800ff84:	a806      	add	r0, sp, #24
 800ff86:	f000 f99b 	bl	80102c0 <__kernel_rem_pio2>
 800ff8a:	9b04      	ldr	r3, [sp, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	4605      	mov	r5, r0
 800ff90:	f6bf ae53 	bge.w	800fc3a <__ieee754_rem_pio2+0x7a>
 800ff94:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ff98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff9c:	e9c4 2300 	strd	r2, r3, [r4]
 800ffa0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ffa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffa8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ffac:	e740      	b.n	800fe30 <__ieee754_rem_pio2+0x270>
 800ffae:	bf00      	nop
 800ffb0:	41700000 	.word	0x41700000
 800ffb4:	08011410 	.word	0x08011410

0800ffb8 <fabs>:
 800ffb8:	ec51 0b10 	vmov	r0, r1, d0
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ffc2:	ec43 2b10 	vmov	d0, r2, r3
 800ffc6:	4770      	bx	lr

0800ffc8 <__ieee754_atan2f>:
 800ffc8:	ee10 2a90 	vmov	r2, s1
 800ffcc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ffd0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ffd4:	b510      	push	{r4, lr}
 800ffd6:	eef0 7a40 	vmov.f32	s15, s0
 800ffda:	d806      	bhi.n	800ffea <__ieee754_atan2f+0x22>
 800ffdc:	ee10 0a10 	vmov	r0, s0
 800ffe0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ffe4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ffe8:	d904      	bls.n	800fff4 <__ieee754_atan2f+0x2c>
 800ffea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ffee:	eeb0 0a67 	vmov.f32	s0, s15
 800fff2:	bd10      	pop	{r4, pc}
 800fff4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800fff8:	d103      	bne.n	8010002 <__ieee754_atan2f+0x3a>
 800fffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fffe:	f000 b883 	b.w	8010108 <atanf>
 8010002:	1794      	asrs	r4, r2, #30
 8010004:	f004 0402 	and.w	r4, r4, #2
 8010008:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801000c:	b943      	cbnz	r3, 8010020 <__ieee754_atan2f+0x58>
 801000e:	2c02      	cmp	r4, #2
 8010010:	d05e      	beq.n	80100d0 <__ieee754_atan2f+0x108>
 8010012:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80100e4 <__ieee754_atan2f+0x11c>
 8010016:	2c03      	cmp	r4, #3
 8010018:	bf08      	it	eq
 801001a:	eef0 7a47 	vmoveq.f32	s15, s14
 801001e:	e7e6      	b.n	800ffee <__ieee754_atan2f+0x26>
 8010020:	b941      	cbnz	r1, 8010034 <__ieee754_atan2f+0x6c>
 8010022:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80100e8 <__ieee754_atan2f+0x120>
 8010026:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80100ec <__ieee754_atan2f+0x124>
 801002a:	2800      	cmp	r0, #0
 801002c:	bfb8      	it	lt
 801002e:	eef0 7a47 	vmovlt.f32	s15, s14
 8010032:	e7dc      	b.n	800ffee <__ieee754_atan2f+0x26>
 8010034:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010038:	d110      	bne.n	801005c <__ieee754_atan2f+0x94>
 801003a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801003e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010042:	d107      	bne.n	8010054 <__ieee754_atan2f+0x8c>
 8010044:	2c02      	cmp	r4, #2
 8010046:	d846      	bhi.n	80100d6 <__ieee754_atan2f+0x10e>
 8010048:	4b29      	ldr	r3, [pc, #164]	@ (80100f0 <__ieee754_atan2f+0x128>)
 801004a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801004e:	edd3 7a00 	vldr	s15, [r3]
 8010052:	e7cc      	b.n	800ffee <__ieee754_atan2f+0x26>
 8010054:	2c02      	cmp	r4, #2
 8010056:	d841      	bhi.n	80100dc <__ieee754_atan2f+0x114>
 8010058:	4b26      	ldr	r3, [pc, #152]	@ (80100f4 <__ieee754_atan2f+0x12c>)
 801005a:	e7f6      	b.n	801004a <__ieee754_atan2f+0x82>
 801005c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010060:	d0df      	beq.n	8010022 <__ieee754_atan2f+0x5a>
 8010062:	1a5b      	subs	r3, r3, r1
 8010064:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010068:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801006c:	da1a      	bge.n	80100a4 <__ieee754_atan2f+0xdc>
 801006e:	2a00      	cmp	r2, #0
 8010070:	da01      	bge.n	8010076 <__ieee754_atan2f+0xae>
 8010072:	313c      	adds	r1, #60	@ 0x3c
 8010074:	db19      	blt.n	80100aa <__ieee754_atan2f+0xe2>
 8010076:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801007a:	f000 f919 	bl	80102b0 <fabsf>
 801007e:	f000 f843 	bl	8010108 <atanf>
 8010082:	eef0 7a40 	vmov.f32	s15, s0
 8010086:	2c01      	cmp	r4, #1
 8010088:	d012      	beq.n	80100b0 <__ieee754_atan2f+0xe8>
 801008a:	2c02      	cmp	r4, #2
 801008c:	d017      	beq.n	80100be <__ieee754_atan2f+0xf6>
 801008e:	2c00      	cmp	r4, #0
 8010090:	d0ad      	beq.n	800ffee <__ieee754_atan2f+0x26>
 8010092:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80100f8 <__ieee754_atan2f+0x130>
 8010096:	ee77 7a87 	vadd.f32	s15, s15, s14
 801009a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80100fc <__ieee754_atan2f+0x134>
 801009e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100a2:	e7a4      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100a4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80100e8 <__ieee754_atan2f+0x120>
 80100a8:	e7ed      	b.n	8010086 <__ieee754_atan2f+0xbe>
 80100aa:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010100 <__ieee754_atan2f+0x138>
 80100ae:	e7ea      	b.n	8010086 <__ieee754_atan2f+0xbe>
 80100b0:	ee17 3a90 	vmov	r3, s15
 80100b4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80100b8:	ee07 3a90 	vmov	s15, r3
 80100bc:	e797      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100be:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80100f8 <__ieee754_atan2f+0x130>
 80100c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80100fc <__ieee754_atan2f+0x134>
 80100ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100ce:	e78e      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100d0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80100fc <__ieee754_atan2f+0x134>
 80100d4:	e78b      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100d6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010104 <__ieee754_atan2f+0x13c>
 80100da:	e788      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100dc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010100 <__ieee754_atan2f+0x138>
 80100e0:	e785      	b.n	800ffee <__ieee754_atan2f+0x26>
 80100e2:	bf00      	nop
 80100e4:	c0490fdb 	.word	0xc0490fdb
 80100e8:	3fc90fdb 	.word	0x3fc90fdb
 80100ec:	bfc90fdb 	.word	0xbfc90fdb
 80100f0:	08011524 	.word	0x08011524
 80100f4:	08011518 	.word	0x08011518
 80100f8:	33bbbd2e 	.word	0x33bbbd2e
 80100fc:	40490fdb 	.word	0x40490fdb
 8010100:	00000000 	.word	0x00000000
 8010104:	3f490fdb 	.word	0x3f490fdb

08010108 <atanf>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	ee10 5a10 	vmov	r5, s0
 801010e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010112:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010116:	eef0 7a40 	vmov.f32	s15, s0
 801011a:	d310      	bcc.n	801013e <atanf+0x36>
 801011c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010120:	d904      	bls.n	801012c <atanf+0x24>
 8010122:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010126:	eeb0 0a67 	vmov.f32	s0, s15
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010264 <atanf+0x15c>
 8010130:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010268 <atanf+0x160>
 8010134:	2d00      	cmp	r5, #0
 8010136:	bfc8      	it	gt
 8010138:	eef0 7a47 	vmovgt.f32	s15, s14
 801013c:	e7f3      	b.n	8010126 <atanf+0x1e>
 801013e:	4b4b      	ldr	r3, [pc, #300]	@ (801026c <atanf+0x164>)
 8010140:	429c      	cmp	r4, r3
 8010142:	d810      	bhi.n	8010166 <atanf+0x5e>
 8010144:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010148:	d20a      	bcs.n	8010160 <atanf+0x58>
 801014a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010270 <atanf+0x168>
 801014e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010156:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015e:	dce2      	bgt.n	8010126 <atanf+0x1e>
 8010160:	f04f 33ff 	mov.w	r3, #4294967295
 8010164:	e013      	b.n	801018e <atanf+0x86>
 8010166:	f000 f8a3 	bl	80102b0 <fabsf>
 801016a:	4b42      	ldr	r3, [pc, #264]	@ (8010274 <atanf+0x16c>)
 801016c:	429c      	cmp	r4, r3
 801016e:	d84f      	bhi.n	8010210 <atanf+0x108>
 8010170:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010174:	429c      	cmp	r4, r3
 8010176:	d841      	bhi.n	80101fc <atanf+0xf4>
 8010178:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801017c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010180:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010184:	2300      	movs	r3, #0
 8010186:	ee30 0a27 	vadd.f32	s0, s0, s15
 801018a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010194:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010278 <atanf+0x170>
 8010198:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801027c <atanf+0x174>
 801019c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010280 <atanf+0x178>
 80101a0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80101a4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80101a8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010284 <atanf+0x17c>
 80101ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80101b0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010288 <atanf+0x180>
 80101b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80101b8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801028c <atanf+0x184>
 80101bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80101c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010290 <atanf+0x188>
 80101c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80101c8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010294 <atanf+0x18c>
 80101cc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80101d0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010298 <atanf+0x190>
 80101d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101d8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801029c <atanf+0x194>
 80101dc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80101e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80102a0 <atanf+0x198>
 80101e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80101ec:	eea5 7a86 	vfma.f32	s14, s11, s12
 80101f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80101f4:	d121      	bne.n	801023a <atanf+0x132>
 80101f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101fa:	e794      	b.n	8010126 <atanf+0x1e>
 80101fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010200:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010204:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010208:	2301      	movs	r3, #1
 801020a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801020e:	e7be      	b.n	801018e <atanf+0x86>
 8010210:	4b24      	ldr	r3, [pc, #144]	@ (80102a4 <atanf+0x19c>)
 8010212:	429c      	cmp	r4, r3
 8010214:	d80b      	bhi.n	801022e <atanf+0x126>
 8010216:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801021a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801021e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010222:	2302      	movs	r3, #2
 8010224:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801022c:	e7af      	b.n	801018e <atanf+0x86>
 801022e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010232:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010236:	2303      	movs	r3, #3
 8010238:	e7a9      	b.n	801018e <atanf+0x86>
 801023a:	4a1b      	ldr	r2, [pc, #108]	@ (80102a8 <atanf+0x1a0>)
 801023c:	491b      	ldr	r1, [pc, #108]	@ (80102ac <atanf+0x1a4>)
 801023e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010242:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010246:	edd3 6a00 	vldr	s13, [r3]
 801024a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801024e:	2d00      	cmp	r5, #0
 8010250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010254:	edd2 7a00 	vldr	s15, [r2]
 8010258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801025c:	bfb8      	it	lt
 801025e:	eef1 7a67 	vneglt.f32	s15, s15
 8010262:	e760      	b.n	8010126 <atanf+0x1e>
 8010264:	bfc90fdb 	.word	0xbfc90fdb
 8010268:	3fc90fdb 	.word	0x3fc90fdb
 801026c:	3edfffff 	.word	0x3edfffff
 8010270:	7149f2ca 	.word	0x7149f2ca
 8010274:	3f97ffff 	.word	0x3f97ffff
 8010278:	3c8569d7 	.word	0x3c8569d7
 801027c:	3d4bda59 	.word	0x3d4bda59
 8010280:	bd6ef16b 	.word	0xbd6ef16b
 8010284:	3d886b35 	.word	0x3d886b35
 8010288:	3dba2e6e 	.word	0x3dba2e6e
 801028c:	3e124925 	.word	0x3e124925
 8010290:	3eaaaaab 	.word	0x3eaaaaab
 8010294:	bd15a221 	.word	0xbd15a221
 8010298:	bd9d8795 	.word	0xbd9d8795
 801029c:	bde38e38 	.word	0xbde38e38
 80102a0:	be4ccccd 	.word	0xbe4ccccd
 80102a4:	401bffff 	.word	0x401bffff
 80102a8:	08011540 	.word	0x08011540
 80102ac:	08011530 	.word	0x08011530

080102b0 <fabsf>:
 80102b0:	ee10 3a10 	vmov	r3, s0
 80102b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80102b8:	ee00 3a10 	vmov	s0, r3
 80102bc:	4770      	bx	lr
	...

080102c0 <__kernel_rem_pio2>:
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	ed2d 8b02 	vpush	{d8}
 80102c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80102cc:	f112 0f14 	cmn.w	r2, #20
 80102d0:	9306      	str	r3, [sp, #24]
 80102d2:	9104      	str	r1, [sp, #16]
 80102d4:	4bbe      	ldr	r3, [pc, #760]	@ (80105d0 <__kernel_rem_pio2+0x310>)
 80102d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80102d8:	9008      	str	r0, [sp, #32]
 80102da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	9b06      	ldr	r3, [sp, #24]
 80102e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80102e6:	bfa8      	it	ge
 80102e8:	1ed4      	subge	r4, r2, #3
 80102ea:	9305      	str	r3, [sp, #20]
 80102ec:	bfb2      	itee	lt
 80102ee:	2400      	movlt	r4, #0
 80102f0:	2318      	movge	r3, #24
 80102f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80102f6:	f06f 0317 	mvn.w	r3, #23
 80102fa:	fb04 3303 	mla	r3, r4, r3, r3
 80102fe:	eb03 0b02 	add.w	fp, r3, r2
 8010302:	9b00      	ldr	r3, [sp, #0]
 8010304:	9a05      	ldr	r2, [sp, #20]
 8010306:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80105c0 <__kernel_rem_pio2+0x300>
 801030a:	eb03 0802 	add.w	r8, r3, r2
 801030e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010310:	1aa7      	subs	r7, r4, r2
 8010312:	ae20      	add	r6, sp, #128	@ 0x80
 8010314:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010318:	2500      	movs	r5, #0
 801031a:	4545      	cmp	r5, r8
 801031c:	dd13      	ble.n	8010346 <__kernel_rem_pio2+0x86>
 801031e:	9b06      	ldr	r3, [sp, #24]
 8010320:	aa20      	add	r2, sp, #128	@ 0x80
 8010322:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010326:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801032a:	f04f 0800 	mov.w	r8, #0
 801032e:	9b00      	ldr	r3, [sp, #0]
 8010330:	4598      	cmp	r8, r3
 8010332:	dc31      	bgt.n	8010398 <__kernel_rem_pio2+0xd8>
 8010334:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80105c0 <__kernel_rem_pio2+0x300>
 8010338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801033c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010340:	462f      	mov	r7, r5
 8010342:	2600      	movs	r6, #0
 8010344:	e01b      	b.n	801037e <__kernel_rem_pio2+0xbe>
 8010346:	42ef      	cmn	r7, r5
 8010348:	d407      	bmi.n	801035a <__kernel_rem_pio2+0x9a>
 801034a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801034e:	f7f0 f895 	bl	800047c <__aeabi_i2d>
 8010352:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010356:	3501      	adds	r5, #1
 8010358:	e7df      	b.n	801031a <__kernel_rem_pio2+0x5a>
 801035a:	ec51 0b18 	vmov	r0, r1, d8
 801035e:	e7f8      	b.n	8010352 <__kernel_rem_pio2+0x92>
 8010360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010364:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010368:	f7f0 f8f2 	bl	8000550 <__aeabi_dmul>
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010374:	f7ef ff36 	bl	80001e4 <__adddf3>
 8010378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801037c:	3601      	adds	r6, #1
 801037e:	9b05      	ldr	r3, [sp, #20]
 8010380:	429e      	cmp	r6, r3
 8010382:	f1a7 0708 	sub.w	r7, r7, #8
 8010386:	ddeb      	ble.n	8010360 <__kernel_rem_pio2+0xa0>
 8010388:	ed9d 7b02 	vldr	d7, [sp, #8]
 801038c:	f108 0801 	add.w	r8, r8, #1
 8010390:	ecaa 7b02 	vstmia	sl!, {d7}
 8010394:	3508      	adds	r5, #8
 8010396:	e7ca      	b.n	801032e <__kernel_rem_pio2+0x6e>
 8010398:	9b00      	ldr	r3, [sp, #0]
 801039a:	f8dd 8000 	ldr.w	r8, [sp]
 801039e:	aa0c      	add	r2, sp, #48	@ 0x30
 80103a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80103a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80103a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80103ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80103b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103b4:	ab98      	add	r3, sp, #608	@ 0x260
 80103b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80103ba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80103be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80103c2:	ac0c      	add	r4, sp, #48	@ 0x30
 80103c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80103c6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80103ca:	46a1      	mov	r9, r4
 80103cc:	46c2      	mov	sl, r8
 80103ce:	f1ba 0f00 	cmp.w	sl, #0
 80103d2:	f1a5 0508 	sub.w	r5, r5, #8
 80103d6:	dc77      	bgt.n	80104c8 <__kernel_rem_pio2+0x208>
 80103d8:	4658      	mov	r0, fp
 80103da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80103de:	f000 fac7 	bl	8010970 <scalbn>
 80103e2:	ec57 6b10 	vmov	r6, r7, d0
 80103e6:	2200      	movs	r2, #0
 80103e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80103ec:	4630      	mov	r0, r6
 80103ee:	4639      	mov	r1, r7
 80103f0:	f7f0 f8ae 	bl	8000550 <__aeabi_dmul>
 80103f4:	ec41 0b10 	vmov	d0, r0, r1
 80103f8:	f000 fb3a 	bl	8010a70 <floor>
 80103fc:	4b75      	ldr	r3, [pc, #468]	@ (80105d4 <__kernel_rem_pio2+0x314>)
 80103fe:	ec51 0b10 	vmov	r0, r1, d0
 8010402:	2200      	movs	r2, #0
 8010404:	f7f0 f8a4 	bl	8000550 <__aeabi_dmul>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	f7ef fee6 	bl	80001e0 <__aeabi_dsub>
 8010414:	460f      	mov	r7, r1
 8010416:	4606      	mov	r6, r0
 8010418:	f7f0 fb4a 	bl	8000ab0 <__aeabi_d2iz>
 801041c:	9002      	str	r0, [sp, #8]
 801041e:	f7f0 f82d 	bl	800047c <__aeabi_i2d>
 8010422:	4602      	mov	r2, r0
 8010424:	460b      	mov	r3, r1
 8010426:	4630      	mov	r0, r6
 8010428:	4639      	mov	r1, r7
 801042a:	f7ef fed9 	bl	80001e0 <__aeabi_dsub>
 801042e:	f1bb 0f00 	cmp.w	fp, #0
 8010432:	4606      	mov	r6, r0
 8010434:	460f      	mov	r7, r1
 8010436:	dd6c      	ble.n	8010512 <__kernel_rem_pio2+0x252>
 8010438:	f108 31ff 	add.w	r1, r8, #4294967295
 801043c:	ab0c      	add	r3, sp, #48	@ 0x30
 801043e:	9d02      	ldr	r5, [sp, #8]
 8010440:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010444:	f1cb 0018 	rsb	r0, fp, #24
 8010448:	fa43 f200 	asr.w	r2, r3, r0
 801044c:	4415      	add	r5, r2
 801044e:	4082      	lsls	r2, r0
 8010450:	1a9b      	subs	r3, r3, r2
 8010452:	aa0c      	add	r2, sp, #48	@ 0x30
 8010454:	9502      	str	r5, [sp, #8]
 8010456:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801045a:	f1cb 0217 	rsb	r2, fp, #23
 801045e:	fa43 f902 	asr.w	r9, r3, r2
 8010462:	f1b9 0f00 	cmp.w	r9, #0
 8010466:	dd64      	ble.n	8010532 <__kernel_rem_pio2+0x272>
 8010468:	9b02      	ldr	r3, [sp, #8]
 801046a:	2200      	movs	r2, #0
 801046c:	3301      	adds	r3, #1
 801046e:	9302      	str	r3, [sp, #8]
 8010470:	4615      	mov	r5, r2
 8010472:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010476:	4590      	cmp	r8, r2
 8010478:	f300 80b8 	bgt.w	80105ec <__kernel_rem_pio2+0x32c>
 801047c:	f1bb 0f00 	cmp.w	fp, #0
 8010480:	dd07      	ble.n	8010492 <__kernel_rem_pio2+0x1d2>
 8010482:	f1bb 0f01 	cmp.w	fp, #1
 8010486:	f000 80bf 	beq.w	8010608 <__kernel_rem_pio2+0x348>
 801048a:	f1bb 0f02 	cmp.w	fp, #2
 801048e:	f000 80c6 	beq.w	801061e <__kernel_rem_pio2+0x35e>
 8010492:	f1b9 0f02 	cmp.w	r9, #2
 8010496:	d14c      	bne.n	8010532 <__kernel_rem_pio2+0x272>
 8010498:	4632      	mov	r2, r6
 801049a:	463b      	mov	r3, r7
 801049c:	494e      	ldr	r1, [pc, #312]	@ (80105d8 <__kernel_rem_pio2+0x318>)
 801049e:	2000      	movs	r0, #0
 80104a0:	f7ef fe9e 	bl	80001e0 <__aeabi_dsub>
 80104a4:	4606      	mov	r6, r0
 80104a6:	460f      	mov	r7, r1
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	d042      	beq.n	8010532 <__kernel_rem_pio2+0x272>
 80104ac:	4658      	mov	r0, fp
 80104ae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80105c8 <__kernel_rem_pio2+0x308>
 80104b2:	f000 fa5d 	bl	8010970 <scalbn>
 80104b6:	4630      	mov	r0, r6
 80104b8:	4639      	mov	r1, r7
 80104ba:	ec53 2b10 	vmov	r2, r3, d0
 80104be:	f7ef fe8f 	bl	80001e0 <__aeabi_dsub>
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	e034      	b.n	8010532 <__kernel_rem_pio2+0x272>
 80104c8:	4b44      	ldr	r3, [pc, #272]	@ (80105dc <__kernel_rem_pio2+0x31c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d0:	f7f0 f83e 	bl	8000550 <__aeabi_dmul>
 80104d4:	f7f0 faec 	bl	8000ab0 <__aeabi_d2iz>
 80104d8:	f7ef ffd0 	bl	800047c <__aeabi_i2d>
 80104dc:	4b40      	ldr	r3, [pc, #256]	@ (80105e0 <__kernel_rem_pio2+0x320>)
 80104de:	2200      	movs	r2, #0
 80104e0:	4606      	mov	r6, r0
 80104e2:	460f      	mov	r7, r1
 80104e4:	f7f0 f834 	bl	8000550 <__aeabi_dmul>
 80104e8:	4602      	mov	r2, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f0:	f7ef fe76 	bl	80001e0 <__aeabi_dsub>
 80104f4:	f7f0 fadc 	bl	8000ab0 <__aeabi_d2iz>
 80104f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80104fc:	f849 0b04 	str.w	r0, [r9], #4
 8010500:	4639      	mov	r1, r7
 8010502:	4630      	mov	r0, r6
 8010504:	f7ef fe6e 	bl	80001e4 <__adddf3>
 8010508:	f10a 3aff 	add.w	sl, sl, #4294967295
 801050c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010510:	e75d      	b.n	80103ce <__kernel_rem_pio2+0x10e>
 8010512:	d107      	bne.n	8010524 <__kernel_rem_pio2+0x264>
 8010514:	f108 33ff 	add.w	r3, r8, #4294967295
 8010518:	aa0c      	add	r2, sp, #48	@ 0x30
 801051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801051e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010522:	e79e      	b.n	8010462 <__kernel_rem_pio2+0x1a2>
 8010524:	4b2f      	ldr	r3, [pc, #188]	@ (80105e4 <__kernel_rem_pio2+0x324>)
 8010526:	2200      	movs	r2, #0
 8010528:	f7f0 fa98 	bl	8000a5c <__aeabi_dcmpge>
 801052c:	2800      	cmp	r0, #0
 801052e:	d143      	bne.n	80105b8 <__kernel_rem_pio2+0x2f8>
 8010530:	4681      	mov	r9, r0
 8010532:	2200      	movs	r2, #0
 8010534:	2300      	movs	r3, #0
 8010536:	4630      	mov	r0, r6
 8010538:	4639      	mov	r1, r7
 801053a:	f7f0 fa71 	bl	8000a20 <__aeabi_dcmpeq>
 801053e:	2800      	cmp	r0, #0
 8010540:	f000 80bf 	beq.w	80106c2 <__kernel_rem_pio2+0x402>
 8010544:	f108 33ff 	add.w	r3, r8, #4294967295
 8010548:	2200      	movs	r2, #0
 801054a:	9900      	ldr	r1, [sp, #0]
 801054c:	428b      	cmp	r3, r1
 801054e:	da6e      	bge.n	801062e <__kernel_rem_pio2+0x36e>
 8010550:	2a00      	cmp	r2, #0
 8010552:	f000 8089 	beq.w	8010668 <__kernel_rem_pio2+0x3a8>
 8010556:	f108 38ff 	add.w	r8, r8, #4294967295
 801055a:	ab0c      	add	r3, sp, #48	@ 0x30
 801055c:	f1ab 0b18 	sub.w	fp, fp, #24
 8010560:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d0f6      	beq.n	8010556 <__kernel_rem_pio2+0x296>
 8010568:	4658      	mov	r0, fp
 801056a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80105c8 <__kernel_rem_pio2+0x308>
 801056e:	f000 f9ff 	bl	8010970 <scalbn>
 8010572:	f108 0301 	add.w	r3, r8, #1
 8010576:	00da      	lsls	r2, r3, #3
 8010578:	9205      	str	r2, [sp, #20]
 801057a:	ec55 4b10 	vmov	r4, r5, d0
 801057e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010580:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80105dc <__kernel_rem_pio2+0x31c>
 8010584:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010588:	4646      	mov	r6, r8
 801058a:	f04f 0a00 	mov.w	sl, #0
 801058e:	2e00      	cmp	r6, #0
 8010590:	f280 80cf 	bge.w	8010732 <__kernel_rem_pio2+0x472>
 8010594:	4644      	mov	r4, r8
 8010596:	2c00      	cmp	r4, #0
 8010598:	f2c0 80fd 	blt.w	8010796 <__kernel_rem_pio2+0x4d6>
 801059c:	4b12      	ldr	r3, [pc, #72]	@ (80105e8 <__kernel_rem_pio2+0x328>)
 801059e:	461f      	mov	r7, r3
 80105a0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80105a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105a6:	9306      	str	r3, [sp, #24]
 80105a8:	f04f 0a00 	mov.w	sl, #0
 80105ac:	f04f 0b00 	mov.w	fp, #0
 80105b0:	2600      	movs	r6, #0
 80105b2:	eba8 0504 	sub.w	r5, r8, r4
 80105b6:	e0e2      	b.n	801077e <__kernel_rem_pio2+0x4be>
 80105b8:	f04f 0902 	mov.w	r9, #2
 80105bc:	e754      	b.n	8010468 <__kernel_rem_pio2+0x1a8>
 80105be:	bf00      	nop
	...
 80105cc:	3ff00000 	.word	0x3ff00000
 80105d0:	08011590 	.word	0x08011590
 80105d4:	40200000 	.word	0x40200000
 80105d8:	3ff00000 	.word	0x3ff00000
 80105dc:	3e700000 	.word	0x3e700000
 80105e0:	41700000 	.word	0x41700000
 80105e4:	3fe00000 	.word	0x3fe00000
 80105e8:	08011550 	.word	0x08011550
 80105ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80105f0:	b945      	cbnz	r5, 8010604 <__kernel_rem_pio2+0x344>
 80105f2:	b123      	cbz	r3, 80105fe <__kernel_rem_pio2+0x33e>
 80105f4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80105f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80105fc:	2301      	movs	r3, #1
 80105fe:	3201      	adds	r2, #1
 8010600:	461d      	mov	r5, r3
 8010602:	e738      	b.n	8010476 <__kernel_rem_pio2+0x1b6>
 8010604:	1acb      	subs	r3, r1, r3
 8010606:	e7f7      	b.n	80105f8 <__kernel_rem_pio2+0x338>
 8010608:	f108 32ff 	add.w	r2, r8, #4294967295
 801060c:	ab0c      	add	r3, sp, #48	@ 0x30
 801060e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010612:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010616:	a90c      	add	r1, sp, #48	@ 0x30
 8010618:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801061c:	e739      	b.n	8010492 <__kernel_rem_pio2+0x1d2>
 801061e:	f108 32ff 	add.w	r2, r8, #4294967295
 8010622:	ab0c      	add	r3, sp, #48	@ 0x30
 8010624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010628:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801062c:	e7f3      	b.n	8010616 <__kernel_rem_pio2+0x356>
 801062e:	a90c      	add	r1, sp, #48	@ 0x30
 8010630:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010634:	3b01      	subs	r3, #1
 8010636:	430a      	orrs	r2, r1
 8010638:	e787      	b.n	801054a <__kernel_rem_pio2+0x28a>
 801063a:	3401      	adds	r4, #1
 801063c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010640:	2a00      	cmp	r2, #0
 8010642:	d0fa      	beq.n	801063a <__kernel_rem_pio2+0x37a>
 8010644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010646:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801064a:	eb0d 0503 	add.w	r5, sp, r3
 801064e:	9b06      	ldr	r3, [sp, #24]
 8010650:	aa20      	add	r2, sp, #128	@ 0x80
 8010652:	4443      	add	r3, r8
 8010654:	f108 0701 	add.w	r7, r8, #1
 8010658:	3d98      	subs	r5, #152	@ 0x98
 801065a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801065e:	4444      	add	r4, r8
 8010660:	42bc      	cmp	r4, r7
 8010662:	da04      	bge.n	801066e <__kernel_rem_pio2+0x3ae>
 8010664:	46a0      	mov	r8, r4
 8010666:	e6a2      	b.n	80103ae <__kernel_rem_pio2+0xee>
 8010668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801066a:	2401      	movs	r4, #1
 801066c:	e7e6      	b.n	801063c <__kernel_rem_pio2+0x37c>
 801066e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010670:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010674:	f7ef ff02 	bl	800047c <__aeabi_i2d>
 8010678:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010940 <__kernel_rem_pio2+0x680>
 801067c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010680:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010688:	46b2      	mov	sl, r6
 801068a:	f04f 0800 	mov.w	r8, #0
 801068e:	9b05      	ldr	r3, [sp, #20]
 8010690:	4598      	cmp	r8, r3
 8010692:	dd05      	ble.n	80106a0 <__kernel_rem_pio2+0x3e0>
 8010694:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010698:	3701      	adds	r7, #1
 801069a:	eca5 7b02 	vstmia	r5!, {d7}
 801069e:	e7df      	b.n	8010660 <__kernel_rem_pio2+0x3a0>
 80106a0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80106a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80106a8:	f7ef ff52 	bl	8000550 <__aeabi_dmul>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106b4:	f7ef fd96 	bl	80001e4 <__adddf3>
 80106b8:	f108 0801 	add.w	r8, r8, #1
 80106bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106c0:	e7e5      	b.n	801068e <__kernel_rem_pio2+0x3ce>
 80106c2:	f1cb 0000 	rsb	r0, fp, #0
 80106c6:	ec47 6b10 	vmov	d0, r6, r7
 80106ca:	f000 f951 	bl	8010970 <scalbn>
 80106ce:	ec55 4b10 	vmov	r4, r5, d0
 80106d2:	4b9d      	ldr	r3, [pc, #628]	@ (8010948 <__kernel_rem_pio2+0x688>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	4620      	mov	r0, r4
 80106d8:	4629      	mov	r1, r5
 80106da:	f7f0 f9bf 	bl	8000a5c <__aeabi_dcmpge>
 80106de:	b300      	cbz	r0, 8010722 <__kernel_rem_pio2+0x462>
 80106e0:	4b9a      	ldr	r3, [pc, #616]	@ (801094c <__kernel_rem_pio2+0x68c>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	4620      	mov	r0, r4
 80106e6:	4629      	mov	r1, r5
 80106e8:	f7ef ff32 	bl	8000550 <__aeabi_dmul>
 80106ec:	f7f0 f9e0 	bl	8000ab0 <__aeabi_d2iz>
 80106f0:	4606      	mov	r6, r0
 80106f2:	f7ef fec3 	bl	800047c <__aeabi_i2d>
 80106f6:	4b94      	ldr	r3, [pc, #592]	@ (8010948 <__kernel_rem_pio2+0x688>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	f7ef ff29 	bl	8000550 <__aeabi_dmul>
 80106fe:	460b      	mov	r3, r1
 8010700:	4602      	mov	r2, r0
 8010702:	4629      	mov	r1, r5
 8010704:	4620      	mov	r0, r4
 8010706:	f7ef fd6b 	bl	80001e0 <__aeabi_dsub>
 801070a:	f7f0 f9d1 	bl	8000ab0 <__aeabi_d2iz>
 801070e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010710:	f10b 0b18 	add.w	fp, fp, #24
 8010714:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010718:	f108 0801 	add.w	r8, r8, #1
 801071c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010720:	e722      	b.n	8010568 <__kernel_rem_pio2+0x2a8>
 8010722:	4620      	mov	r0, r4
 8010724:	4629      	mov	r1, r5
 8010726:	f7f0 f9c3 	bl	8000ab0 <__aeabi_d2iz>
 801072a:	ab0c      	add	r3, sp, #48	@ 0x30
 801072c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010730:	e71a      	b.n	8010568 <__kernel_rem_pio2+0x2a8>
 8010732:	ab0c      	add	r3, sp, #48	@ 0x30
 8010734:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010738:	f7ef fea0 	bl	800047c <__aeabi_i2d>
 801073c:	4622      	mov	r2, r4
 801073e:	462b      	mov	r3, r5
 8010740:	f7ef ff06 	bl	8000550 <__aeabi_dmul>
 8010744:	4652      	mov	r2, sl
 8010746:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801074a:	465b      	mov	r3, fp
 801074c:	4620      	mov	r0, r4
 801074e:	4629      	mov	r1, r5
 8010750:	f7ef fefe 	bl	8000550 <__aeabi_dmul>
 8010754:	3e01      	subs	r6, #1
 8010756:	4604      	mov	r4, r0
 8010758:	460d      	mov	r5, r1
 801075a:	e718      	b.n	801058e <__kernel_rem_pio2+0x2ce>
 801075c:	9906      	ldr	r1, [sp, #24]
 801075e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010762:	9106      	str	r1, [sp, #24]
 8010764:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010768:	f7ef fef2 	bl	8000550 <__aeabi_dmul>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	4650      	mov	r0, sl
 8010772:	4659      	mov	r1, fp
 8010774:	f7ef fd36 	bl	80001e4 <__adddf3>
 8010778:	3601      	adds	r6, #1
 801077a:	4682      	mov	sl, r0
 801077c:	468b      	mov	fp, r1
 801077e:	9b00      	ldr	r3, [sp, #0]
 8010780:	429e      	cmp	r6, r3
 8010782:	dc01      	bgt.n	8010788 <__kernel_rem_pio2+0x4c8>
 8010784:	42b5      	cmp	r5, r6
 8010786:	dae9      	bge.n	801075c <__kernel_rem_pio2+0x49c>
 8010788:	ab48      	add	r3, sp, #288	@ 0x120
 801078a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801078e:	e9c5 ab00 	strd	sl, fp, [r5]
 8010792:	3c01      	subs	r4, #1
 8010794:	e6ff      	b.n	8010596 <__kernel_rem_pio2+0x2d6>
 8010796:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010798:	2b02      	cmp	r3, #2
 801079a:	dc0b      	bgt.n	80107b4 <__kernel_rem_pio2+0x4f4>
 801079c:	2b00      	cmp	r3, #0
 801079e:	dc39      	bgt.n	8010814 <__kernel_rem_pio2+0x554>
 80107a0:	d05d      	beq.n	801085e <__kernel_rem_pio2+0x59e>
 80107a2:	9b02      	ldr	r3, [sp, #8]
 80107a4:	f003 0007 	and.w	r0, r3, #7
 80107a8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80107ac:	ecbd 8b02 	vpop	{d8}
 80107b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80107b6:	2b03      	cmp	r3, #3
 80107b8:	d1f3      	bne.n	80107a2 <__kernel_rem_pio2+0x4e2>
 80107ba:	9b05      	ldr	r3, [sp, #20]
 80107bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80107c0:	eb0d 0403 	add.w	r4, sp, r3
 80107c4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80107c8:	4625      	mov	r5, r4
 80107ca:	46c2      	mov	sl, r8
 80107cc:	f1ba 0f00 	cmp.w	sl, #0
 80107d0:	f1a5 0508 	sub.w	r5, r5, #8
 80107d4:	dc6b      	bgt.n	80108ae <__kernel_rem_pio2+0x5ee>
 80107d6:	4645      	mov	r5, r8
 80107d8:	2d01      	cmp	r5, #1
 80107da:	f1a4 0408 	sub.w	r4, r4, #8
 80107de:	f300 8087 	bgt.w	80108f0 <__kernel_rem_pio2+0x630>
 80107e2:	9c05      	ldr	r4, [sp, #20]
 80107e4:	ab48      	add	r3, sp, #288	@ 0x120
 80107e6:	441c      	add	r4, r3
 80107e8:	2000      	movs	r0, #0
 80107ea:	2100      	movs	r1, #0
 80107ec:	f1b8 0f01 	cmp.w	r8, #1
 80107f0:	f300 809c 	bgt.w	801092c <__kernel_rem_pio2+0x66c>
 80107f4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80107f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80107fc:	f1b9 0f00 	cmp.w	r9, #0
 8010800:	f040 80a6 	bne.w	8010950 <__kernel_rem_pio2+0x690>
 8010804:	9b04      	ldr	r3, [sp, #16]
 8010806:	e9c3 7800 	strd	r7, r8, [r3]
 801080a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801080e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010812:	e7c6      	b.n	80107a2 <__kernel_rem_pio2+0x4e2>
 8010814:	9d05      	ldr	r5, [sp, #20]
 8010816:	ab48      	add	r3, sp, #288	@ 0x120
 8010818:	441d      	add	r5, r3
 801081a:	4644      	mov	r4, r8
 801081c:	2000      	movs	r0, #0
 801081e:	2100      	movs	r1, #0
 8010820:	2c00      	cmp	r4, #0
 8010822:	da35      	bge.n	8010890 <__kernel_rem_pio2+0x5d0>
 8010824:	f1b9 0f00 	cmp.w	r9, #0
 8010828:	d038      	beq.n	801089c <__kernel_rem_pio2+0x5dc>
 801082a:	4602      	mov	r2, r0
 801082c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010830:	9c04      	ldr	r4, [sp, #16]
 8010832:	e9c4 2300 	strd	r2, r3, [r4]
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801083e:	f7ef fccf 	bl	80001e0 <__aeabi_dsub>
 8010842:	ad4a      	add	r5, sp, #296	@ 0x128
 8010844:	2401      	movs	r4, #1
 8010846:	45a0      	cmp	r8, r4
 8010848:	da2b      	bge.n	80108a2 <__kernel_rem_pio2+0x5e2>
 801084a:	f1b9 0f00 	cmp.w	r9, #0
 801084e:	d002      	beq.n	8010856 <__kernel_rem_pio2+0x596>
 8010850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010854:	4619      	mov	r1, r3
 8010856:	9b04      	ldr	r3, [sp, #16]
 8010858:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801085c:	e7a1      	b.n	80107a2 <__kernel_rem_pio2+0x4e2>
 801085e:	9c05      	ldr	r4, [sp, #20]
 8010860:	ab48      	add	r3, sp, #288	@ 0x120
 8010862:	441c      	add	r4, r3
 8010864:	2000      	movs	r0, #0
 8010866:	2100      	movs	r1, #0
 8010868:	f1b8 0f00 	cmp.w	r8, #0
 801086c:	da09      	bge.n	8010882 <__kernel_rem_pio2+0x5c2>
 801086e:	f1b9 0f00 	cmp.w	r9, #0
 8010872:	d002      	beq.n	801087a <__kernel_rem_pio2+0x5ba>
 8010874:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010878:	4619      	mov	r1, r3
 801087a:	9b04      	ldr	r3, [sp, #16]
 801087c:	e9c3 0100 	strd	r0, r1, [r3]
 8010880:	e78f      	b.n	80107a2 <__kernel_rem_pio2+0x4e2>
 8010882:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010886:	f7ef fcad 	bl	80001e4 <__adddf3>
 801088a:	f108 38ff 	add.w	r8, r8, #4294967295
 801088e:	e7eb      	b.n	8010868 <__kernel_rem_pio2+0x5a8>
 8010890:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010894:	f7ef fca6 	bl	80001e4 <__adddf3>
 8010898:	3c01      	subs	r4, #1
 801089a:	e7c1      	b.n	8010820 <__kernel_rem_pio2+0x560>
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	e7c6      	b.n	8010830 <__kernel_rem_pio2+0x570>
 80108a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80108a6:	f7ef fc9d 	bl	80001e4 <__adddf3>
 80108aa:	3401      	adds	r4, #1
 80108ac:	e7cb      	b.n	8010846 <__kernel_rem_pio2+0x586>
 80108ae:	ed95 7b00 	vldr	d7, [r5]
 80108b2:	ed8d 7b00 	vstr	d7, [sp]
 80108b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80108ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108be:	ec53 2b17 	vmov	r2, r3, d7
 80108c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108c6:	f7ef fc8d 	bl	80001e4 <__adddf3>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	4606      	mov	r6, r0
 80108d0:	460f      	mov	r7, r1
 80108d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108d6:	f7ef fc83 	bl	80001e0 <__aeabi_dsub>
 80108da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80108de:	f7ef fc81 	bl	80001e4 <__adddf3>
 80108e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80108ea:	e9c5 6700 	strd	r6, r7, [r5]
 80108ee:	e76d      	b.n	80107cc <__kernel_rem_pio2+0x50c>
 80108f0:	ed94 7b00 	vldr	d7, [r4]
 80108f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80108f8:	ec51 0b17 	vmov	r0, r1, d7
 80108fc:	4652      	mov	r2, sl
 80108fe:	465b      	mov	r3, fp
 8010900:	ed8d 7b00 	vstr	d7, [sp]
 8010904:	f7ef fc6e 	bl	80001e4 <__adddf3>
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	4606      	mov	r6, r0
 801090e:	460f      	mov	r7, r1
 8010910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010914:	f7ef fc64 	bl	80001e0 <__aeabi_dsub>
 8010918:	4652      	mov	r2, sl
 801091a:	465b      	mov	r3, fp
 801091c:	f7ef fc62 	bl	80001e4 <__adddf3>
 8010920:	3d01      	subs	r5, #1
 8010922:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010926:	e9c4 6700 	strd	r6, r7, [r4]
 801092a:	e755      	b.n	80107d8 <__kernel_rem_pio2+0x518>
 801092c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010930:	f7ef fc58 	bl	80001e4 <__adddf3>
 8010934:	f108 38ff 	add.w	r8, r8, #4294967295
 8010938:	e758      	b.n	80107ec <__kernel_rem_pio2+0x52c>
 801093a:	bf00      	nop
 801093c:	f3af 8000 	nop.w
	...
 8010948:	41700000 	.word	0x41700000
 801094c:	3e700000 	.word	0x3e700000
 8010950:	9b04      	ldr	r3, [sp, #16]
 8010952:	9a04      	ldr	r2, [sp, #16]
 8010954:	601f      	str	r7, [r3, #0]
 8010956:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801095a:	605c      	str	r4, [r3, #4]
 801095c:	609d      	str	r5, [r3, #8]
 801095e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010962:	60d3      	str	r3, [r2, #12]
 8010964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010968:	6110      	str	r0, [r2, #16]
 801096a:	6153      	str	r3, [r2, #20]
 801096c:	e719      	b.n	80107a2 <__kernel_rem_pio2+0x4e2>
 801096e:	bf00      	nop

08010970 <scalbn>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	ec55 4b10 	vmov	r4, r5, d0
 8010976:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801097a:	4606      	mov	r6, r0
 801097c:	462b      	mov	r3, r5
 801097e:	b991      	cbnz	r1, 80109a6 <scalbn+0x36>
 8010980:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010984:	4323      	orrs	r3, r4
 8010986:	d03d      	beq.n	8010a04 <scalbn+0x94>
 8010988:	4b35      	ldr	r3, [pc, #212]	@ (8010a60 <scalbn+0xf0>)
 801098a:	4620      	mov	r0, r4
 801098c:	4629      	mov	r1, r5
 801098e:	2200      	movs	r2, #0
 8010990:	f7ef fdde 	bl	8000550 <__aeabi_dmul>
 8010994:	4b33      	ldr	r3, [pc, #204]	@ (8010a64 <scalbn+0xf4>)
 8010996:	429e      	cmp	r6, r3
 8010998:	4604      	mov	r4, r0
 801099a:	460d      	mov	r5, r1
 801099c:	da0f      	bge.n	80109be <scalbn+0x4e>
 801099e:	a328      	add	r3, pc, #160	@ (adr r3, 8010a40 <scalbn+0xd0>)
 80109a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a4:	e01e      	b.n	80109e4 <scalbn+0x74>
 80109a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80109aa:	4291      	cmp	r1, r2
 80109ac:	d10b      	bne.n	80109c6 <scalbn+0x56>
 80109ae:	4622      	mov	r2, r4
 80109b0:	4620      	mov	r0, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	f7ef fc16 	bl	80001e4 <__adddf3>
 80109b8:	4604      	mov	r4, r0
 80109ba:	460d      	mov	r5, r1
 80109bc:	e022      	b.n	8010a04 <scalbn+0x94>
 80109be:	460b      	mov	r3, r1
 80109c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80109c4:	3936      	subs	r1, #54	@ 0x36
 80109c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80109ca:	4296      	cmp	r6, r2
 80109cc:	dd0d      	ble.n	80109ea <scalbn+0x7a>
 80109ce:	2d00      	cmp	r5, #0
 80109d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010a48 <scalbn+0xd8>)
 80109d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d6:	da02      	bge.n	80109de <scalbn+0x6e>
 80109d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010a50 <scalbn+0xe0>)
 80109da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109de:	a31a      	add	r3, pc, #104	@ (adr r3, 8010a48 <scalbn+0xd8>)
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	f7ef fdb4 	bl	8000550 <__aeabi_dmul>
 80109e8:	e7e6      	b.n	80109b8 <scalbn+0x48>
 80109ea:	1872      	adds	r2, r6, r1
 80109ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80109f0:	428a      	cmp	r2, r1
 80109f2:	dcec      	bgt.n	80109ce <scalbn+0x5e>
 80109f4:	2a00      	cmp	r2, #0
 80109f6:	dd08      	ble.n	8010a0a <scalbn+0x9a>
 80109f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80109fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010a00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a04:	ec45 4b10 	vmov	d0, r4, r5
 8010a08:	bd70      	pop	{r4, r5, r6, pc}
 8010a0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010a0e:	da08      	bge.n	8010a22 <scalbn+0xb2>
 8010a10:	2d00      	cmp	r5, #0
 8010a12:	a10b      	add	r1, pc, #44	@ (adr r1, 8010a40 <scalbn+0xd0>)
 8010a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a18:	dac1      	bge.n	801099e <scalbn+0x2e>
 8010a1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8010a58 <scalbn+0xe8>)
 8010a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a20:	e7bd      	b.n	801099e <scalbn+0x2e>
 8010a22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a26:	3236      	adds	r2, #54	@ 0x36
 8010a28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010a2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a30:	4620      	mov	r0, r4
 8010a32:	4b0d      	ldr	r3, [pc, #52]	@ (8010a68 <scalbn+0xf8>)
 8010a34:	4629      	mov	r1, r5
 8010a36:	2200      	movs	r2, #0
 8010a38:	e7d4      	b.n	80109e4 <scalbn+0x74>
 8010a3a:	bf00      	nop
 8010a3c:	f3af 8000 	nop.w
 8010a40:	c2f8f359 	.word	0xc2f8f359
 8010a44:	01a56e1f 	.word	0x01a56e1f
 8010a48:	8800759c 	.word	0x8800759c
 8010a4c:	7e37e43c 	.word	0x7e37e43c
 8010a50:	8800759c 	.word	0x8800759c
 8010a54:	fe37e43c 	.word	0xfe37e43c
 8010a58:	c2f8f359 	.word	0xc2f8f359
 8010a5c:	81a56e1f 	.word	0x81a56e1f
 8010a60:	43500000 	.word	0x43500000
 8010a64:	ffff3cb0 	.word	0xffff3cb0
 8010a68:	3c900000 	.word	0x3c900000
 8010a6c:	00000000 	.word	0x00000000

08010a70 <floor>:
 8010a70:	ec51 0b10 	vmov	r0, r1, d0
 8010a74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010a80:	2e13      	cmp	r6, #19
 8010a82:	460c      	mov	r4, r1
 8010a84:	4605      	mov	r5, r0
 8010a86:	4680      	mov	r8, r0
 8010a88:	dc34      	bgt.n	8010af4 <floor+0x84>
 8010a8a:	2e00      	cmp	r6, #0
 8010a8c:	da17      	bge.n	8010abe <floor+0x4e>
 8010a8e:	a332      	add	r3, pc, #200	@ (adr r3, 8010b58 <floor+0xe8>)
 8010a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a94:	f7ef fba6 	bl	80001e4 <__adddf3>
 8010a98:	2200      	movs	r2, #0
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f7ef ffe8 	bl	8000a70 <__aeabi_dcmpgt>
 8010aa0:	b150      	cbz	r0, 8010ab8 <floor+0x48>
 8010aa2:	2c00      	cmp	r4, #0
 8010aa4:	da55      	bge.n	8010b52 <floor+0xe2>
 8010aa6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010aaa:	432c      	orrs	r4, r5
 8010aac:	2500      	movs	r5, #0
 8010aae:	42ac      	cmp	r4, r5
 8010ab0:	4c2b      	ldr	r4, [pc, #172]	@ (8010b60 <floor+0xf0>)
 8010ab2:	bf08      	it	eq
 8010ab4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010ab8:	4621      	mov	r1, r4
 8010aba:	4628      	mov	r0, r5
 8010abc:	e023      	b.n	8010b06 <floor+0x96>
 8010abe:	4f29      	ldr	r7, [pc, #164]	@ (8010b64 <floor+0xf4>)
 8010ac0:	4137      	asrs	r7, r6
 8010ac2:	ea01 0307 	and.w	r3, r1, r7
 8010ac6:	4303      	orrs	r3, r0
 8010ac8:	d01d      	beq.n	8010b06 <floor+0x96>
 8010aca:	a323      	add	r3, pc, #140	@ (adr r3, 8010b58 <floor+0xe8>)
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	f7ef fb88 	bl	80001e4 <__adddf3>
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f7ef ffca 	bl	8000a70 <__aeabi_dcmpgt>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d0eb      	beq.n	8010ab8 <floor+0x48>
 8010ae0:	2c00      	cmp	r4, #0
 8010ae2:	bfbe      	ittt	lt
 8010ae4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010ae8:	4133      	asrlt	r3, r6
 8010aea:	18e4      	addlt	r4, r4, r3
 8010aec:	ea24 0407 	bic.w	r4, r4, r7
 8010af0:	2500      	movs	r5, #0
 8010af2:	e7e1      	b.n	8010ab8 <floor+0x48>
 8010af4:	2e33      	cmp	r6, #51	@ 0x33
 8010af6:	dd0a      	ble.n	8010b0e <floor+0x9e>
 8010af8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010afc:	d103      	bne.n	8010b06 <floor+0x96>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	f7ef fb6f 	bl	80001e4 <__adddf3>
 8010b06:	ec41 0b10 	vmov	d0, r0, r1
 8010b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010b12:	f04f 37ff 	mov.w	r7, #4294967295
 8010b16:	40df      	lsrs	r7, r3
 8010b18:	4207      	tst	r7, r0
 8010b1a:	d0f4      	beq.n	8010b06 <floor+0x96>
 8010b1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010b58 <floor+0xe8>)
 8010b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b22:	f7ef fb5f 	bl	80001e4 <__adddf3>
 8010b26:	2200      	movs	r2, #0
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f7ef ffa1 	bl	8000a70 <__aeabi_dcmpgt>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d0c2      	beq.n	8010ab8 <floor+0x48>
 8010b32:	2c00      	cmp	r4, #0
 8010b34:	da0a      	bge.n	8010b4c <floor+0xdc>
 8010b36:	2e14      	cmp	r6, #20
 8010b38:	d101      	bne.n	8010b3e <floor+0xce>
 8010b3a:	3401      	adds	r4, #1
 8010b3c:	e006      	b.n	8010b4c <floor+0xdc>
 8010b3e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010b42:	2301      	movs	r3, #1
 8010b44:	40b3      	lsls	r3, r6
 8010b46:	441d      	add	r5, r3
 8010b48:	4545      	cmp	r5, r8
 8010b4a:	d3f6      	bcc.n	8010b3a <floor+0xca>
 8010b4c:	ea25 0507 	bic.w	r5, r5, r7
 8010b50:	e7b2      	b.n	8010ab8 <floor+0x48>
 8010b52:	2500      	movs	r5, #0
 8010b54:	462c      	mov	r4, r5
 8010b56:	e7af      	b.n	8010ab8 <floor+0x48>
 8010b58:	8800759c 	.word	0x8800759c
 8010b5c:	7e37e43c 	.word	0x7e37e43c
 8010b60:	bff00000 	.word	0xbff00000
 8010b64:	000fffff 	.word	0x000fffff

08010b68 <realloc>:
 8010b68:	4b02      	ldr	r3, [pc, #8]	@ (8010b74 <realloc+0xc>)
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	4601      	mov	r1, r0
 8010b6e:	6818      	ldr	r0, [r3, #0]
 8010b70:	f000 b802 	b.w	8010b78 <_realloc_r>
 8010b74:	20000040 	.word	0x20000040

08010b78 <_realloc_r>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	4680      	mov	r8, r0
 8010b7e:	4615      	mov	r5, r2
 8010b80:	460c      	mov	r4, r1
 8010b82:	b921      	cbnz	r1, 8010b8e <_realloc_r+0x16>
 8010b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b88:	4611      	mov	r1, r2
 8010b8a:	f000 b8d1 	b.w	8010d30 <_malloc_r>
 8010b8e:	b92a      	cbnz	r2, 8010b9c <_realloc_r+0x24>
 8010b90:	f000 f862 	bl	8010c58 <_free_r>
 8010b94:	2400      	movs	r4, #0
 8010b96:	4620      	mov	r0, r4
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	f000 f954 	bl	8010e48 <_malloc_usable_size_r>
 8010ba0:	4285      	cmp	r5, r0
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	d802      	bhi.n	8010bac <_realloc_r+0x34>
 8010ba6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010baa:	d8f4      	bhi.n	8010b96 <_realloc_r+0x1e>
 8010bac:	4629      	mov	r1, r5
 8010bae:	4640      	mov	r0, r8
 8010bb0:	f000 f8be 	bl	8010d30 <_malloc_r>
 8010bb4:	4607      	mov	r7, r0
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d0ec      	beq.n	8010b94 <_realloc_r+0x1c>
 8010bba:	42b5      	cmp	r5, r6
 8010bbc:	462a      	mov	r2, r5
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	bf28      	it	cs
 8010bc2:	4632      	movcs	r2, r6
 8010bc4:	f000 f83a 	bl	8010c3c <memcpy>
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4640      	mov	r0, r8
 8010bcc:	f000 f844 	bl	8010c58 <_free_r>
 8010bd0:	463c      	mov	r4, r7
 8010bd2:	e7e0      	b.n	8010b96 <_realloc_r+0x1e>

08010bd4 <memset>:
 8010bd4:	4402      	add	r2, r0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d100      	bne.n	8010bde <memset+0xa>
 8010bdc:	4770      	bx	lr
 8010bde:	f803 1b01 	strb.w	r1, [r3], #1
 8010be2:	e7f9      	b.n	8010bd8 <memset+0x4>

08010be4 <__errno>:
 8010be4:	4b01      	ldr	r3, [pc, #4]	@ (8010bec <__errno+0x8>)
 8010be6:	6818      	ldr	r0, [r3, #0]
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	20000040 	.word	0x20000040

08010bf0 <__libc_init_array>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8010c28 <__libc_init_array+0x38>)
 8010bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8010c2c <__libc_init_array+0x3c>)
 8010bf6:	1b64      	subs	r4, r4, r5
 8010bf8:	10a4      	asrs	r4, r4, #2
 8010bfa:	2600      	movs	r6, #0
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	d109      	bne.n	8010c14 <__libc_init_array+0x24>
 8010c00:	4d0b      	ldr	r5, [pc, #44]	@ (8010c30 <__libc_init_array+0x40>)
 8010c02:	4c0c      	ldr	r4, [pc, #48]	@ (8010c34 <__libc_init_array+0x44>)
 8010c04:	f000 f938 	bl	8010e78 <_init>
 8010c08:	1b64      	subs	r4, r4, r5
 8010c0a:	10a4      	asrs	r4, r4, #2
 8010c0c:	2600      	movs	r6, #0
 8010c0e:	42a6      	cmp	r6, r4
 8010c10:	d105      	bne.n	8010c1e <__libc_init_array+0x2e>
 8010c12:	bd70      	pop	{r4, r5, r6, pc}
 8010c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c18:	4798      	blx	r3
 8010c1a:	3601      	adds	r6, #1
 8010c1c:	e7ee      	b.n	8010bfc <__libc_init_array+0xc>
 8010c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c22:	4798      	blx	r3
 8010c24:	3601      	adds	r6, #1
 8010c26:	e7f2      	b.n	8010c0e <__libc_init_array+0x1e>
 8010c28:	080115a8 	.word	0x080115a8
 8010c2c:	080115a8 	.word	0x080115a8
 8010c30:	080115a8 	.word	0x080115a8
 8010c34:	080115b4 	.word	0x080115b4

08010c38 <__retarget_lock_acquire_recursive>:
 8010c38:	4770      	bx	lr

08010c3a <__retarget_lock_release_recursive>:
 8010c3a:	4770      	bx	lr

08010c3c <memcpy>:
 8010c3c:	440a      	add	r2, r1
 8010c3e:	4291      	cmp	r1, r2
 8010c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c44:	d100      	bne.n	8010c48 <memcpy+0xc>
 8010c46:	4770      	bx	lr
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c52:	4291      	cmp	r1, r2
 8010c54:	d1f9      	bne.n	8010c4a <memcpy+0xe>
 8010c56:	bd10      	pop	{r4, pc}

08010c58 <_free_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	2900      	cmp	r1, #0
 8010c5e:	d041      	beq.n	8010ce4 <_free_r+0x8c>
 8010c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c64:	1f0c      	subs	r4, r1, #4
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	bfb8      	it	lt
 8010c6a:	18e4      	addlt	r4, r4, r3
 8010c6c:	f000 f8e0 	bl	8010e30 <__malloc_lock>
 8010c70:	4a1d      	ldr	r2, [pc, #116]	@ (8010ce8 <_free_r+0x90>)
 8010c72:	6813      	ldr	r3, [r2, #0]
 8010c74:	b933      	cbnz	r3, 8010c84 <_free_r+0x2c>
 8010c76:	6063      	str	r3, [r4, #4]
 8010c78:	6014      	str	r4, [r2, #0]
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c80:	f000 b8dc 	b.w	8010e3c <__malloc_unlock>
 8010c84:	42a3      	cmp	r3, r4
 8010c86:	d908      	bls.n	8010c9a <_free_r+0x42>
 8010c88:	6820      	ldr	r0, [r4, #0]
 8010c8a:	1821      	adds	r1, r4, r0
 8010c8c:	428b      	cmp	r3, r1
 8010c8e:	bf01      	itttt	eq
 8010c90:	6819      	ldreq	r1, [r3, #0]
 8010c92:	685b      	ldreq	r3, [r3, #4]
 8010c94:	1809      	addeq	r1, r1, r0
 8010c96:	6021      	streq	r1, [r4, #0]
 8010c98:	e7ed      	b.n	8010c76 <_free_r+0x1e>
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	b10b      	cbz	r3, 8010ca4 <_free_r+0x4c>
 8010ca0:	42a3      	cmp	r3, r4
 8010ca2:	d9fa      	bls.n	8010c9a <_free_r+0x42>
 8010ca4:	6811      	ldr	r1, [r2, #0]
 8010ca6:	1850      	adds	r0, r2, r1
 8010ca8:	42a0      	cmp	r0, r4
 8010caa:	d10b      	bne.n	8010cc4 <_free_r+0x6c>
 8010cac:	6820      	ldr	r0, [r4, #0]
 8010cae:	4401      	add	r1, r0
 8010cb0:	1850      	adds	r0, r2, r1
 8010cb2:	4283      	cmp	r3, r0
 8010cb4:	6011      	str	r1, [r2, #0]
 8010cb6:	d1e0      	bne.n	8010c7a <_free_r+0x22>
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	6053      	str	r3, [r2, #4]
 8010cbe:	4408      	add	r0, r1
 8010cc0:	6010      	str	r0, [r2, #0]
 8010cc2:	e7da      	b.n	8010c7a <_free_r+0x22>
 8010cc4:	d902      	bls.n	8010ccc <_free_r+0x74>
 8010cc6:	230c      	movs	r3, #12
 8010cc8:	602b      	str	r3, [r5, #0]
 8010cca:	e7d6      	b.n	8010c7a <_free_r+0x22>
 8010ccc:	6820      	ldr	r0, [r4, #0]
 8010cce:	1821      	adds	r1, r4, r0
 8010cd0:	428b      	cmp	r3, r1
 8010cd2:	bf04      	itt	eq
 8010cd4:	6819      	ldreq	r1, [r3, #0]
 8010cd6:	685b      	ldreq	r3, [r3, #4]
 8010cd8:	6063      	str	r3, [r4, #4]
 8010cda:	bf04      	itt	eq
 8010cdc:	1809      	addeq	r1, r1, r0
 8010cde:	6021      	streq	r1, [r4, #0]
 8010ce0:	6054      	str	r4, [r2, #4]
 8010ce2:	e7ca      	b.n	8010c7a <_free_r+0x22>
 8010ce4:	bd38      	pop	{r3, r4, r5, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20001324 	.word	0x20001324

08010cec <sbrk_aligned>:
 8010cec:	b570      	push	{r4, r5, r6, lr}
 8010cee:	4e0f      	ldr	r6, [pc, #60]	@ (8010d2c <sbrk_aligned+0x40>)
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	6831      	ldr	r1, [r6, #0]
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	b911      	cbnz	r1, 8010cfe <sbrk_aligned+0x12>
 8010cf8:	f000 f8ae 	bl	8010e58 <_sbrk_r>
 8010cfc:	6030      	str	r0, [r6, #0]
 8010cfe:	4621      	mov	r1, r4
 8010d00:	4628      	mov	r0, r5
 8010d02:	f000 f8a9 	bl	8010e58 <_sbrk_r>
 8010d06:	1c43      	adds	r3, r0, #1
 8010d08:	d103      	bne.n	8010d12 <sbrk_aligned+0x26>
 8010d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8010d0e:	4620      	mov	r0, r4
 8010d10:	bd70      	pop	{r4, r5, r6, pc}
 8010d12:	1cc4      	adds	r4, r0, #3
 8010d14:	f024 0403 	bic.w	r4, r4, #3
 8010d18:	42a0      	cmp	r0, r4
 8010d1a:	d0f8      	beq.n	8010d0e <sbrk_aligned+0x22>
 8010d1c:	1a21      	subs	r1, r4, r0
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f000 f89a 	bl	8010e58 <_sbrk_r>
 8010d24:	3001      	adds	r0, #1
 8010d26:	d1f2      	bne.n	8010d0e <sbrk_aligned+0x22>
 8010d28:	e7ef      	b.n	8010d0a <sbrk_aligned+0x1e>
 8010d2a:	bf00      	nop
 8010d2c:	20001320 	.word	0x20001320

08010d30 <_malloc_r>:
 8010d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d34:	1ccd      	adds	r5, r1, #3
 8010d36:	f025 0503 	bic.w	r5, r5, #3
 8010d3a:	3508      	adds	r5, #8
 8010d3c:	2d0c      	cmp	r5, #12
 8010d3e:	bf38      	it	cc
 8010d40:	250c      	movcc	r5, #12
 8010d42:	2d00      	cmp	r5, #0
 8010d44:	4606      	mov	r6, r0
 8010d46:	db01      	blt.n	8010d4c <_malloc_r+0x1c>
 8010d48:	42a9      	cmp	r1, r5
 8010d4a:	d904      	bls.n	8010d56 <_malloc_r+0x26>
 8010d4c:	230c      	movs	r3, #12
 8010d4e:	6033      	str	r3, [r6, #0]
 8010d50:	2000      	movs	r0, #0
 8010d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e2c <_malloc_r+0xfc>
 8010d5a:	f000 f869 	bl	8010e30 <__malloc_lock>
 8010d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d62:	461c      	mov	r4, r3
 8010d64:	bb44      	cbnz	r4, 8010db8 <_malloc_r+0x88>
 8010d66:	4629      	mov	r1, r5
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ff ffbf 	bl	8010cec <sbrk_aligned>
 8010d6e:	1c43      	adds	r3, r0, #1
 8010d70:	4604      	mov	r4, r0
 8010d72:	d158      	bne.n	8010e26 <_malloc_r+0xf6>
 8010d74:	f8d8 4000 	ldr.w	r4, [r8]
 8010d78:	4627      	mov	r7, r4
 8010d7a:	2f00      	cmp	r7, #0
 8010d7c:	d143      	bne.n	8010e06 <_malloc_r+0xd6>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	d04b      	beq.n	8010e1a <_malloc_r+0xea>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	4639      	mov	r1, r7
 8010d86:	4630      	mov	r0, r6
 8010d88:	eb04 0903 	add.w	r9, r4, r3
 8010d8c:	f000 f864 	bl	8010e58 <_sbrk_r>
 8010d90:	4581      	cmp	r9, r0
 8010d92:	d142      	bne.n	8010e1a <_malloc_r+0xea>
 8010d94:	6821      	ldr	r1, [r4, #0]
 8010d96:	1a6d      	subs	r5, r5, r1
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	f7ff ffa6 	bl	8010cec <sbrk_aligned>
 8010da0:	3001      	adds	r0, #1
 8010da2:	d03a      	beq.n	8010e1a <_malloc_r+0xea>
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	442b      	add	r3, r5
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	f8d8 3000 	ldr.w	r3, [r8]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	bb62      	cbnz	r2, 8010e0c <_malloc_r+0xdc>
 8010db2:	f8c8 7000 	str.w	r7, [r8]
 8010db6:	e00f      	b.n	8010dd8 <_malloc_r+0xa8>
 8010db8:	6822      	ldr	r2, [r4, #0]
 8010dba:	1b52      	subs	r2, r2, r5
 8010dbc:	d420      	bmi.n	8010e00 <_malloc_r+0xd0>
 8010dbe:	2a0b      	cmp	r2, #11
 8010dc0:	d917      	bls.n	8010df2 <_malloc_r+0xc2>
 8010dc2:	1961      	adds	r1, r4, r5
 8010dc4:	42a3      	cmp	r3, r4
 8010dc6:	6025      	str	r5, [r4, #0]
 8010dc8:	bf18      	it	ne
 8010dca:	6059      	strne	r1, [r3, #4]
 8010dcc:	6863      	ldr	r3, [r4, #4]
 8010dce:	bf08      	it	eq
 8010dd0:	f8c8 1000 	streq.w	r1, [r8]
 8010dd4:	5162      	str	r2, [r4, r5]
 8010dd6:	604b      	str	r3, [r1, #4]
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f000 f82f 	bl	8010e3c <__malloc_unlock>
 8010dde:	f104 000b 	add.w	r0, r4, #11
 8010de2:	1d23      	adds	r3, r4, #4
 8010de4:	f020 0007 	bic.w	r0, r0, #7
 8010de8:	1ac2      	subs	r2, r0, r3
 8010dea:	bf1c      	itt	ne
 8010dec:	1a1b      	subne	r3, r3, r0
 8010dee:	50a3      	strne	r3, [r4, r2]
 8010df0:	e7af      	b.n	8010d52 <_malloc_r+0x22>
 8010df2:	6862      	ldr	r2, [r4, #4]
 8010df4:	42a3      	cmp	r3, r4
 8010df6:	bf0c      	ite	eq
 8010df8:	f8c8 2000 	streq.w	r2, [r8]
 8010dfc:	605a      	strne	r2, [r3, #4]
 8010dfe:	e7eb      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e00:	4623      	mov	r3, r4
 8010e02:	6864      	ldr	r4, [r4, #4]
 8010e04:	e7ae      	b.n	8010d64 <_malloc_r+0x34>
 8010e06:	463c      	mov	r4, r7
 8010e08:	687f      	ldr	r7, [r7, #4]
 8010e0a:	e7b6      	b.n	8010d7a <_malloc_r+0x4a>
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	42a3      	cmp	r3, r4
 8010e12:	d1fb      	bne.n	8010e0c <_malloc_r+0xdc>
 8010e14:	2300      	movs	r3, #0
 8010e16:	6053      	str	r3, [r2, #4]
 8010e18:	e7de      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e1a:	230c      	movs	r3, #12
 8010e1c:	6033      	str	r3, [r6, #0]
 8010e1e:	4630      	mov	r0, r6
 8010e20:	f000 f80c 	bl	8010e3c <__malloc_unlock>
 8010e24:	e794      	b.n	8010d50 <_malloc_r+0x20>
 8010e26:	6005      	str	r5, [r0, #0]
 8010e28:	e7d6      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e2a:	bf00      	nop
 8010e2c:	20001324 	.word	0x20001324

08010e30 <__malloc_lock>:
 8010e30:	4801      	ldr	r0, [pc, #4]	@ (8010e38 <__malloc_lock+0x8>)
 8010e32:	f7ff bf01 	b.w	8010c38 <__retarget_lock_acquire_recursive>
 8010e36:	bf00      	nop
 8010e38:	2000131c 	.word	0x2000131c

08010e3c <__malloc_unlock>:
 8010e3c:	4801      	ldr	r0, [pc, #4]	@ (8010e44 <__malloc_unlock+0x8>)
 8010e3e:	f7ff befc 	b.w	8010c3a <__retarget_lock_release_recursive>
 8010e42:	bf00      	nop
 8010e44:	2000131c 	.word	0x2000131c

08010e48 <_malloc_usable_size_r>:
 8010e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e4c:	1f18      	subs	r0, r3, #4
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	bfbc      	itt	lt
 8010e52:	580b      	ldrlt	r3, [r1, r0]
 8010e54:	18c0      	addlt	r0, r0, r3
 8010e56:	4770      	bx	lr

08010e58 <_sbrk_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4d06      	ldr	r5, [pc, #24]	@ (8010e74 <_sbrk_r+0x1c>)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4608      	mov	r0, r1
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	f7f7 fc56 	bl	8008714 <_sbrk>
 8010e68:	1c43      	adds	r3, r0, #1
 8010e6a:	d102      	bne.n	8010e72 <_sbrk_r+0x1a>
 8010e6c:	682b      	ldr	r3, [r5, #0]
 8010e6e:	b103      	cbz	r3, 8010e72 <_sbrk_r+0x1a>
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	20001318 	.word	0x20001318

08010e78 <_init>:
 8010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7a:	bf00      	nop
 8010e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e7e:	bc08      	pop	{r3}
 8010e80:	469e      	mov	lr, r3
 8010e82:	4770      	bx	lr

08010e84 <_fini>:
 8010e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e86:	bf00      	nop
 8010e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8a:	bc08      	pop	{r3}
 8010e8c:	469e      	mov	lr, r3
 8010e8e:	4770      	bx	lr
