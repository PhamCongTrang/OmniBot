
chatter_F407VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091cc  080091cc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080091cc  080091cc  000191cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091d4  080091d4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080091e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000ee0  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f88  20000f88  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000162a2  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a06  00000000  00000000  000363bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f68  00000000  00000000  00038dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c20  00000000  00000000  00039d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021aa6  00000000  00000000  0003a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012896  00000000  00000000  0005c3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0eef  00000000  00000000  0006ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047c8  00000000  00000000  0013fb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00144344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e74 	.word	0x08008e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08008e74 	.word	0x08008e74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0a5a      	lsrs	r2, r3, #9
 8000e5c:	490f      	ldr	r1, [pc, #60]	; (8000e9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e5e:	fba1 1202 	umull	r1, r2, r1, r2
 8000e62:	09d2      	lsrs	r2, r2, #7
 8000e64:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e66:	fb01 f202 	mul.w	r2, r1, r2
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	09db      	lsrs	r3, r3, #7
 8000e7c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	441a      	add	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	00044b83 	.word	0x00044b83
 8000ea0:	3b9aca00 	.word	0x3b9aca00

08000ea4 <_Z3PIDv>:
uint16_t encoder_cnt[4] = {0,0,0,0}, encoder_cnt_pre[4] = {0,0,0,0};
int16_t delta[4] = {0,0,0,0};
float r = 0.05, d = 0.2*sqrt(2), l = 2*pi*r;
bool check_PID =0;
void PID()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++){
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e0be      	b.n	800102e <_Z3PIDv+0x18a>
		e[i] = v_set[i] - v_enc[i];
 8000eb0:	4ab1      	ldr	r2, [pc, #708]	; (8001178 <_Z3PIDv+0x2d4>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	ed93 7a00 	vldr	s14, [r3]
 8000ebc:	4aaf      	ldr	r2, [pc, #700]	; (800117c <_Z3PIDv+0x2d8>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ecc:	4aac      	ldr	r2, [pc, #688]	; (8001180 <_Z3PIDv+0x2dc>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	edc3 7a00 	vstr	s15, [r3]
		sum_e[i] += (e[i] + pre_e[i])/2;
 8000ed8:	4aaa      	ldr	r2, [pc, #680]	; (8001184 <_Z3PIDv+0x2e0>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	ed93 7a00 	vldr	s14, [r3]
 8000ee4:	4aa6      	ldr	r2, [pc, #664]	; (8001180 <_Z3PIDv+0x2dc>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	edd3 6a00 	vldr	s13, [r3]
 8000ef0:	4aa5      	ldr	r2, [pc, #660]	; (8001188 <_Z3PIDv+0x2e4>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f00:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000f04:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0c:	4a9d      	ldr	r2, [pc, #628]	; (8001184 <_Z3PIDv+0x2e0>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	edc3 7a00 	vstr	s15, [r3]
		d_e[i] = e[i] - pre_e[i];
 8000f18:	4a99      	ldr	r2, [pc, #612]	; (8001180 <_Z3PIDv+0x2dc>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	ed93 7a00 	vldr	s14, [r3]
 8000f24:	4a98      	ldr	r2, [pc, #608]	; (8001188 <_Z3PIDv+0x2e4>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f34:	4a95      	ldr	r2, [pc, #596]	; (800118c <_Z3PIDv+0x2e8>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
		pre_e[i] = e[i];
 8000f40:	4a8f      	ldr	r2, [pc, #572]	; (8001180 <_Z3PIDv+0x2dc>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	498f      	ldr	r1, [pc, #572]	; (8001188 <_Z3PIDv+0x2e4>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	601a      	str	r2, [r3, #0]

		duty[i] += (Kp[i] * e[i] + Ki[i] * Ta * sum_e[i] + Kd[i] * (1 / Ta) * d_e[i]);
 8000f54:	4a8e      	ldr	r2, [pc, #568]	; (8001190 <_Z3PIDv+0x2ec>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f64:	4a8b      	ldr	r2, [pc, #556]	; (8001194 <_Z3PIDv+0x2f0>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	4a83      	ldr	r2, [pc, #524]	; (8001180 <_Z3PIDv+0x2dc>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f80:	4a85      	ldr	r2, [pc, #532]	; (8001198 <_Z3PIDv+0x2f4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	ed93 6a00 	vldr	s12, [r3]
 8000f8c:	4b83      	ldr	r3, [pc, #524]	; (800119c <_Z3PIDv+0x2f8>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000f96:	4a7b      	ldr	r2, [pc, #492]	; (8001184 <_Z3PIDv+0x2e0>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fa6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000faa:	4a7d      	ldr	r2, [pc, #500]	; (80011a0 <_Z3PIDv+0x2fc>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	ed93 6a00 	vldr	s12, [r3]
 8000fb6:	4b79      	ldr	r3, [pc, #484]	; (800119c <_Z3PIDv+0x2f8>)
 8000fb8:	edd3 5a00 	vldr	s11, [r3]
 8000fbc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8000fc0:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8000fc4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000fc8:	4a70      	ldr	r2, [pc, #448]	; (800118c <_Z3PIDv+0x2e8>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	b219      	sxth	r1, r3
 8000fea:	4a69      	ldr	r2, [pc, #420]	; (8001190 <_Z3PIDv+0x2ec>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//gioi han gia tri duty
		if (duty[i] > 999)
 8000ff2:	4a67      	ldr	r2, [pc, #412]	; (8001190 <_Z3PIDv+0x2ec>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffe:	db06      	blt.n	800100e <_Z3PIDv+0x16a>
		{
			duty[i] = 999;
 8001000:	4a63      	ldr	r2, [pc, #396]	; (8001190 <_Z3PIDv+0x2ec>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800100c:	e00c      	b.n	8001028 <_Z3PIDv+0x184>
		}
		else if (duty[i] < -999 )
 800100e:	4a60      	ldr	r2, [pc, #384]	; (8001190 <_Z3PIDv+0x2ec>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001016:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800101a:	dc05      	bgt.n	8001028 <_Z3PIDv+0x184>
		{
			duty[i] = -999;
 800101c:	4a5c      	ldr	r2, [pc, #368]	; (8001190 <_Z3PIDv+0x2ec>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f64f 4119 	movw	r1, #64537	; 0xfc19
 8001024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b03      	cmp	r3, #3
 8001032:	f77f af3d 	ble.w	8000eb0 <_Z3PIDv+0xc>
		}
	}

	if (duty[0] >= 0){
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <_Z3PIDv+0x2ec>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db10      	blt.n	8001062 <_Z3PIDv+0x1be>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	4857      	ldr	r0, [pc, #348]	; (80011a4 <_Z3PIDv+0x300>)
 8001046:	f004 fc75 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	4856      	ldr	r0, [pc, #344]	; (80011a8 <_Z3PIDv+0x304>)
 8001050:	f004 fc70 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty[0]);
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <_Z3PIDv+0x2ec>)
 8001056:	f9b3 2000 	ldrsh.w	r2, [r3]
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <_Z3PIDv+0x308>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
 8001060:	e015      	b.n	800108e <_Z3PIDv+0x1ea>
	}
	else if (duty[0] < 0){
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <_Z3PIDv+0x2ec>)
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	da10      	bge.n	800108e <_Z3PIDv+0x1ea>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2120      	movs	r1, #32
 8001070:	484c      	ldr	r0, [pc, #304]	; (80011a4 <_Z3PIDv+0x300>)
 8001072:	f004 fc5f 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2101      	movs	r1, #1
 800107a:	484b      	ldr	r0, [pc, #300]	; (80011a8 <_Z3PIDv+0x304>)
 800107c:	f004 fc5a 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-duty[0]);
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <_Z3PIDv+0x2ec>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	425a      	negs	r2, r3
 8001088:	4b48      	ldr	r3, [pc, #288]	; (80011ac <_Z3PIDv+0x308>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (duty[1] >= 0){
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <_Z3PIDv+0x2ec>)
 8001090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db10      	blt.n	80010ba <_Z3PIDv+0x216>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2102      	movs	r1, #2
 800109c:	4842      	ldr	r0, [pc, #264]	; (80011a8 <_Z3PIDv+0x304>)
 800109e:	f004 fc49 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2104      	movs	r1, #4
 80010a6:	4840      	ldr	r0, [pc, #256]	; (80011a8 <_Z3PIDv+0x304>)
 80010a8:	f004 fc44 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,duty[1]);
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <_Z3PIDv+0x2ec>)
 80010ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <_Z3PIDv+0x308>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	e015      	b.n	80010e6 <_Z3PIDv+0x242>
	}
	else if (duty[1] < 0){
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <_Z3PIDv+0x2ec>)
 80010bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	da10      	bge.n	80010e6 <_Z3PIDv+0x242>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	4837      	ldr	r0, [pc, #220]	; (80011a8 <_Z3PIDv+0x304>)
 80010ca:	f004 fc33 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2104      	movs	r1, #4
 80010d2:	4835      	ldr	r0, [pc, #212]	; (80011a8 <_Z3PIDv+0x304>)
 80010d4:	f004 fc2e 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-duty[1]);
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <_Z3PIDv+0x2ec>)
 80010da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010de:	425a      	negs	r2, r3
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <_Z3PIDv+0x308>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (duty[2] >= 0){
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <_Z3PIDv+0x2ec>)
 80010e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db12      	blt.n	8001116 <_Z3PIDv+0x272>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f6:	482c      	ldr	r0, [pc, #176]	; (80011a8 <_Z3PIDv+0x304>)
 80010f8:	f004 fc1c 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <_Z3PIDv+0x304>)
 8001104:	f004 fc16 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,duty[2]);
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <_Z3PIDv+0x2ec>)
 800110a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <_Z3PIDv+0x308>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
 8001114:	e017      	b.n	8001146 <_Z3PIDv+0x2a2>
	}
	else if (duty[2] < 0){
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <_Z3PIDv+0x2ec>)
 8001118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da12      	bge.n	8001146 <_Z3PIDv+0x2a2>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	4820      	ldr	r0, [pc, #128]	; (80011a8 <_Z3PIDv+0x304>)
 8001128:	f004 fc04 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <_Z3PIDv+0x304>)
 8001134:	f004 fbfe 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,-duty[2]);
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_Z3PIDv+0x2ec>)
 800113a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800113e:	425a      	negs	r2, r3
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <_Z3PIDv+0x308>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if (duty[3] >= 0){
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <_Z3PIDv+0x2ec>)
 8001148:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db2f      	blt.n	80011b0 <_Z3PIDv+0x30c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <_Z3PIDv+0x304>)
 8001158:	f004 fbec 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <_Z3PIDv+0x304>)
 8001164:	f004 fbe6 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,duty[3]);
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <_Z3PIDv+0x2ec>)
 800116a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <_Z3PIDv+0x308>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
 8001174:	e034      	b.n	80011e0 <_Z3PIDv+0x33c>
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	20000378 	.word	0x20000378
 8001180:	20000398 	.word	0x20000398
 8001184:	200003a8 	.word	0x200003a8
 8001188:	200003b8 	.word	0x200003b8
 800118c:	200003c8 	.word	0x200003c8
 8001190:	200003d8 	.word	0x200003d8
 8001194:	20000010 	.word	0x20000010
 8001198:	20000020 	.word	0x20000020
 800119c:	20000030 	.word	0x20000030
 80011a0:	20000388 	.word	0x20000388
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	200000c4 	.word	0x200000c4
	}
	else if (duty[3] < 0){
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <_Z3PIDv+0x34c>)
 80011b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da12      	bge.n	80011e0 <_Z3PIDv+0x33c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <_Z3PIDv+0x350>)
 80011c2:	f004 fbb7 	bl	8005934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <_Z3PIDv+0x350>)
 80011ce:	f004 fbb1 	bl	8005934 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,-duty[3]);
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_Z3PIDv+0x34c>)
 80011d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011d8:	425a      	negs	r2, r3
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_Z3PIDv+0x354>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
	}
	check_PID = 0;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <_Z3PIDv+0x358>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200003d8 	.word	0x200003d8
 80011f4:	40020400 	.word	0x40020400
 80011f8:	200000c4 	.word	0x200000c4
 80011fc:	200003fc 	.word	0x200003fc

08001200 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		// CT phuc vu ngat timer
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM9)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f040 8090 	bne.w	8001334 <HAL_TIM_PeriodElapsedCallback+0x134>
	{
		encoder_cnt[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001214:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800121e:	801a      	strh	r2, [r3, #0]
		encoder_cnt[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800122a:	805a      	strh	r2, [r3, #2]
		encoder_cnt[2] = __HAL_TIM_GET_COUNTER(&htim4);
 800122c:	4b48      	ldr	r3, [pc, #288]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001236:	809a      	strh	r2, [r3, #4]
		encoder_cnt[3] = __HAL_TIM_GET_COUNTER(&htim5);
 8001238:	4b46      	ldr	r3, [pc, #280]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001242:	80da      	strh	r2, [r3, #6]
		for (int i = 0; i < 4; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e06e      	b.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x128>
			if(encoder_cnt[i] - encoder_cnt_pre[i] > 30000)			// Overflow khi quay nguoc
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001252:	4619      	mov	r1, r3
 8001254:	4a40      	ldr	r2, [pc, #256]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125c:	1acb      	subs	r3, r1, r3
 800125e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001262:	4293      	cmp	r3, r2
 8001264:	dd0f      	ble.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				delta[i] = encoder_cnt[i] - encoder_cnt_pre[i] - 65536;
 8001266:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800126e:	493a      	ldr	r1, [pc, #232]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	b219      	sxth	r1, r3
 800127c:	4a37      	ldr	r2, [pc, #220]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001284:	e02b      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0xde>
			}
			else if(encoder_cnt[i] - encoder_cnt_pre[i] < -30000)	// Overflow khi quay thuan
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	4619      	mov	r1, r3
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001298:	1acb      	subs	r3, r1, r3
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800129c:	4293      	cmp	r3, r2
 800129e:	da0f      	bge.n	80012c0 <HAL_TIM_PeriodElapsedCallback+0xc0>
			{
				delta[i] = encoder_cnt[i] - encoder_cnt_pre[i] + 65536;
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012a8:	492b      	ldr	r1, [pc, #172]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b219      	sxth	r1, r3
 80012b6:	4a29      	ldr	r2, [pc, #164]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012be:	e00e      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0xde>
			}
			else
			{
				delta[i] = encoder_cnt[i] - encoder_cnt_pre[i];
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012c8:	4923      	ldr	r1, [pc, #140]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b219      	sxth	r1, r3
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			v_enc[i] = (float)(delta[i])*60*5/998;
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001364 <HAL_TIM_PeriodElapsedCallback+0x164>
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80012fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fe:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001368 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001306:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	edc3 7a00 	vstr	s15, [r3]
			encoder_cnt_pre[i] = encoder_cnt[i] ;
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++){
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b03      	cmp	r3, #3
 800132c:	dd8d      	ble.n	800124a <HAL_TIM_PeriodElapsedCallback+0x4a>
		}
		check_PID = 1;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	}
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40014000 	.word	0x40014000
 8001344:	2000010c 	.word	0x2000010c
 8001348:	200003e0 	.word	0x200003e0
 800134c:	20000154 	.word	0x20000154
 8001350:	2000019c 	.word	0x2000019c
 8001354:	200001e4 	.word	0x200001e4
 8001358:	200003e8 	.word	0x200003e8
 800135c:	200003f0 	.word	0x200003f0
 8001360:	ffff8ad0 	.word	0xffff8ad0
 8001364:	42700000 	.word	0x42700000
 8001368:	44798000 	.word	0x44798000
 800136c:	20000378 	.word	0x20000378
 8001370:	200003fc 	.word	0x200003fc

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f003 fb96 	bl	8004aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f84e 	bl	800141c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 fbce 	bl	8001b20 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001384:	f000 fba4 	bl	8001ad0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001388:	f000 fb74 	bl	8001a74 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800138c:	f000 f9b6 	bl	80016fc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001390:	f000 fa12 	bl	80017b8 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001394:	f000 fa6e 	bl	8001874 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8001398:	f000 faca 	bl	8001930 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 800139c:	f000 f8b2 	bl	8001504 <_ZL12MX_TIM1_Initv>
  MX_TIM9_Init();
 80013a0:	f000 fb24 	bl	80019ec <_ZL12MX_TIM9_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <main+0x8c>)
 80013a8:	f005 f850 	bl	800644c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013ac:	2104      	movs	r1, #4
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <main+0x8c>)
 80013b0:	f005 f84c 	bl	800644c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013b4:	2108      	movs	r1, #8
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <main+0x8c>)
 80013b8:	f005 f848 	bl	800644c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013bc:	210c      	movs	r1, #12
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <main+0x8c>)
 80013c0:	f005 f844 	bl	800644c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80013c4:	213c      	movs	r1, #60	; 0x3c
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <main+0x90>)
 80013c8:	f005 f9ae 	bl	8006728 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80013cc:	213c      	movs	r1, #60	; 0x3c
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <main+0x94>)
 80013d0:	f005 f9aa 	bl	8006728 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80013d4:	213c      	movs	r1, #60	; 0x3c
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <main+0x98>)
 80013d8:	f005 f9a6 	bl	8006728 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 80013dc:	213c      	movs	r1, #60	; 0x3c
 80013de:	480c      	ldr	r0, [pc, #48]	; (8001410 <main+0x9c>)
 80013e0:	f005 f9a2 	bl	8006728 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim9);
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <main+0xa0>)
 80013e6:	f004 ff67 	bl	80062b8 <HAL_TIM_Base_Start_IT>

  setup();
 80013ea:	f002 f899 	bl	8003520 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (check_PID)  PID();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <main+0xa4>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <main+0x86>
 80013f6:	f7ff fd55 	bl	8000ea4 <_Z3PIDv>
	  loop();
 80013fa:	f002 f8ad 	bl	8003558 <loop>
	  if (check_PID)  PID();
 80013fe:	e7f6      	b.n	80013ee <main+0x7a>
 8001400:	200000c4 	.word	0x200000c4
 8001404:	2000010c 	.word	0x2000010c
 8001408:	20000154 	.word	0x20000154
 800140c:	2000019c 	.word	0x2000019c
 8001410:	200001e4 	.word	0x200001e4
 8001414:	2000022c 	.word	0x2000022c
 8001418:	200003fc 	.word	0x200003fc

0800141c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f007 fbcf 	bl	8008bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <_Z18SystemClock_Configv+0xe0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <_Z18SystemClock_Configv+0xe0>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <_Z18SystemClock_Configv+0xe0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <_Z18SystemClock_Configv+0xe4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <_Z18SystemClock_Configv+0xe4>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <_Z18SystemClock_Configv+0xe4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001490:	23a8      	movs	r3, #168	; 0xa8
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 fa61 	bl	8005968 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80014b6:	f000 fbdb 	bl	8001c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2105      	movs	r1, #5
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fcbd 	bl	8005e58 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80014ee:	f000 fbbf 	bl	8001c70 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f007 fb46 	bl	8008bce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001544:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <_ZL12MX_TIM1_Initv+0x1f4>)
 8001546:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 800154a:	22a7      	movs	r2, #167	; 0xa7
 800154c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001556:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001562:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156e:	4861      	ldr	r0, [pc, #388]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001570:	f004 fe52 	bl	8006218 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001584:	f000 fb74 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001592:	4619      	mov	r1, r3
 8001594:	4857      	ldr	r0, [pc, #348]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001596:	f005 fb1f 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80015aa:	f000 fb61 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ae:	4851      	ldr	r0, [pc, #324]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 80015b0:	f004 fef2 	bl	8006398 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80015c4:	f000 fb54 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015d4:	4619      	mov	r1, r3
 80015d6:	4847      	ldr	r0, [pc, #284]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 80015d8:	f005 fefe 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80015ec:	f000 fb40 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f0:	2360      	movs	r3, #96	; 0x60
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 80015f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fe:	2300      	movs	r3, #0
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	4837      	ldr	r0, [pc, #220]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001618:	f005 fa1c 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <_ZL12MX_TIM1_Initv+0x12c>
  {
    Error_Handler();
 800162c:	f000 fb20 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.Pulse = 799;
 8001630:	f240 331f 	movw	r3, #799	; 0x31f
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	2204      	movs	r2, #4
 800163c:	4619      	mov	r1, r3
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001640:	f005 fa08 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <_ZL12MX_TIM1_Initv+0x154>
  {
    Error_Handler();
 8001654:	f000 fb0c 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.Pulse = 599;
 8001658:	f240 2357 	movw	r3, #599	; 0x257
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	2208      	movs	r2, #8
 8001664:	4619      	mov	r1, r3
 8001666:	4823      	ldr	r0, [pc, #140]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001668:	f005 f9f4 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <_ZL12MX_TIM1_Initv+0x17c>
  {
    Error_Handler();
 800167c:	f000 faf8 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.Pulse = 399;
 8001680:	f240 138f 	movw	r3, #399	; 0x18f
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	220c      	movs	r2, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 8001690:	f005 f9e0 	bl	8006a54 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_ZL12MX_TIM1_Initv+0x1a4>
  {
    Error_Handler();
 80016a4:	f000 fae4 	bl	8001c70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 80016cc:	f005 ff00 	bl	80074d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <_ZL12MX_TIM1_Initv+0x1e0>
  {
    Error_Handler();
 80016e0:	f000 fac6 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <_ZL12MX_TIM1_Initv+0x1f0>)
 80016e6:	f003 f827 	bl	8004738 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3758      	adds	r7, #88	; 0x58
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000c4 	.word	0x200000c4
 80016f8:	40010000 	.word	0x40010000

080016fc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f007 fa5f 	bl	8008bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 800172e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001740:	2303      	movs	r3, #3
 8001742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	4812      	ldr	r0, [pc, #72]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 800176c:	f004 ff36 	bl	80065dc <HAL_TIM_Encoder_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001780:	f000 fa76 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001792:	f005 fe21 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80017a6:	f000 fa63 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000010c 	.word	0x2000010c

080017b8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 fa01 	bl	8008bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <_ZL12MX_TIM3_Initv+0xb8>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017fa:	2303      	movs	r3, #3
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001802:	2301      	movs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001812:	2301      	movs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 8001826:	f004 fed9 	bl	80065dc <HAL_TIM_Encoder_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800183a:	f000 fa19 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4808      	ldr	r0, [pc, #32]	; (800186c <_ZL12MX_TIM3_Initv+0xb4>)
 800184c:	f005 fdc4 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001860:	f000 fa06 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000154 	.word	0x20000154
 8001870:	40000400 	.word	0x40000400

08001874 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f007 f9a3 	bl	8008bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 8001892:	4a26      	ldr	r2, [pc, #152]	; (800192c <_ZL12MX_TIM4_Initv+0xb8>)
 8001894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 80018a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018b6:	2303      	movs	r3, #3
 80018b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018be:	2301      	movs	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ce:	2301      	movs	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4619      	mov	r1, r3
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 80018e2:	f004 fe7b 	bl	80065dc <HAL_TIM_Encoder_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 80018f6:	f000 f9bb 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <_ZL12MX_TIM4_Initv+0xb4>)
 8001908:	f005 fd66 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800191c:	f000 f9a8 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3730      	adds	r7, #48	; 0x30
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000019c 	.word	0x2000019c
 800192c:	40000800 	.word	0x40000800

08001930 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	2224      	movs	r2, #36	; 0x24
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f007 f945 	bl	8008bce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 800194e:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <_ZL12MX_TIM5_Initv+0xb8>)
 8001950:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001964:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001972:	2303      	movs	r3, #3
 8001974:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 800199e:	f004 fe1d 	bl	80065dc <HAL_TIM_Encoder_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80019b2:	f000 f95d 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4808      	ldr	r0, [pc, #32]	; (80019e4 <_ZL12MX_TIM5_Initv+0xb4>)
 80019c4:	f005 fd08 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80019d8:	f000 f94a 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	3730      	adds	r7, #48	; 0x30
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200001e4 	.word	0x200001e4
 80019e8:	40000c00 	.word	0x40000c00

080019ec <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <_ZL12MX_TIM9_Initv+0x84>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 3359;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a06:	f640 521f 	movw	r2, #3359	; 0xd1f
 8001a0a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a18:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a26:	4811      	ldr	r0, [pc, #68]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a28:	f004 fbf6 	bl	8006218 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZL12MX_TIM9_Initv+0x54>
  {
    Error_Handler();
 8001a3c:	f000 f918 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4808      	ldr	r0, [pc, #32]	; (8001a6c <_ZL12MX_TIM9_Initv+0x80>)
 8001a4c:	f005 f8c4 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <_ZL12MX_TIM9_Initv+0x78>
  {
    Error_Handler();
 8001a60:	f000 f906 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000022c 	.word	0x2000022c
 8001a70:	40014000 	.word	0x40014000

08001a74 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_ZL19MX_USART2_UART_Initv+0x58>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a80:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aac:	f005 fd76 	bl	800759c <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ac0:	f000 f8d6 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000274 	.word	0x20000274
 8001acc:	40004400 	.word	0x40004400

08001ad0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_ZL11MX_DMA_Initv+0x4c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <_ZL11MX_DMA_Initv+0x4c>)
 8001ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <_ZL11MX_DMA_Initv+0x4c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2010      	movs	r0, #16
 8001af8:	f003 f947 	bl	8004d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f003 f960 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2011      	movs	r0, #17
 8001b08:	f003 f93f 	bl	8004d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b0c:	2011      	movs	r0, #17
 8001b0e:	f003 f958 	bl	8004dc2 <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a41      	ldr	r2, [pc, #260]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <_ZL12MX_GPIO_Initv+0x140>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	4820      	ldr	r0, [pc, #128]	; (8001c64 <_ZL12MX_GPIO_Initv+0x144>)
 8001be4:	f003 fea6 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001be8:	2200      	movs	r2, #0
 8001bea:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001bee:	481e      	ldr	r0, [pc, #120]	; (8001c68 <_ZL12MX_GPIO_Initv+0x148>)
 8001bf0:	f003 fea0 	bl	8005934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_2, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f244 0104 	movw	r1, #16388	; 0x4004
 8001bfa:	481c      	ldr	r0, [pc, #112]	; (8001c6c <_ZL12MX_GPIO_Initv+0x14c>)
 8001bfc:	f003 fe9a 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c00:	2320      	movs	r3, #32
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4813      	ldr	r0, [pc, #76]	; (8001c64 <_ZL12MX_GPIO_Initv+0x144>)
 8001c18:	f003 fcf0 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001c1c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001c20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <_ZL12MX_GPIO_Initv+0x148>)
 8001c36:	f003 fce1 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_2;
 8001c3a:	f244 0304 	movw	r3, #16388	; 0x4004
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <_ZL12MX_GPIO_Initv+0x14c>)
 8001c54:	f003 fcd2 	bl	80055fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020c00 	.word	0x40020c00

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <Error_Handler+0x8>
 8001c7a:	0000      	movs	r0, r0
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d117      	bne.n	8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d112      	bne.n	8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x40>
float r = 0.05, d = 0.2*sqrt(2), l = 2*pi*r;
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbfe 	bl	80004a0 <__aeabi_f2d>
 8001ca4:	a308      	add	r3, pc, #32	; (adr r3, 8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fc51 	bl	8000550 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fefb 	bl	8000ab0 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	54442d28 	.word	0x54442d28
 8001ccc:	401921fb 	.word	0x401921fb
 8001cd0:	20000034 	.word	0x20000034
 8001cd4:	200003f8 	.word	0x200003f8

08001cd8 <_GLOBAL__sub_I_htim1>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff ffcd 	bl	8001c80 <_Z41__static_initialization_and_destruction_0ii>
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <_ZN3ros3MsgC1Ev+0x1c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	0800919c 	.word	0x0800919c

08001d2c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
      data()
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ffe8 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffce 	bl	8001ce8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	08009184 	.word	0x08009184

08001d5c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0a19      	lsrs	r1, r3, #8
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3301      	adds	r3, #1
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	0c19      	lsrs	r1, r3, #16
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3302      	adds	r3, #2
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	0e19      	lsrs	r1, r3, #24
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3303      	adds	r3, #3
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a19      	lsrs	r1, r3, #8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2ca      	uxtb	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	0c19      	lsrs	r1, r3, #16
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0e19      	lsrs	r1, r3, #24
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3303      	adds	r3, #3
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	b2ca      	uxtb	r2, r1
 8001df6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    }
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	440b      	add	r3, r1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3302      	adds	r3, #2
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	440b      	add	r3, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	440b      	add	r3, r1
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	6839      	ldr	r1, [r7, #0]
 8001e88:	440b      	add	r3, r1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	08008e8c 	.word	0x08008e8c

08001ef0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	08008e9c 	.word	0x08008e9c

08001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fef8 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f2c:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f32:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f38:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
    {
    }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800916c 	.word	0x0800916c
 8001f50:	08008ec0 	.word	0x08008ec0

08001f54 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8899      	ldrh	r1, [r3, #4]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2ca      	uxtb	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b299      	uxth	r1, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2ca      	uxtb	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3302      	adds	r3, #2
 8001f88:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe f91a 	bl	80001c8 <strlen>
 8001f94:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	69b9      	ldr	r1, [r7, #24]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fc6c 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	18d0      	adds	r0, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f006 fe3e 	bl	8008c38 <memcpy>
      offset += length_topic_name;
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe f8fd 	bl	80001c8 <strlen>
 8001fce:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 fc4f 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	18d0      	adds	r0, r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f006 fe21 	bl	8008c38 <memcpy>
      offset += length_message_type;
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f8e0 	bl	80001c8 <strlen>
 8002008:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	6939      	ldr	r1, [r7, #16]
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fc32 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3304      	adds	r3, #4
 800201c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	18d0      	adds	r0, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4619      	mov	r1, r3
 800202c:	f006 fe04 	bl	8008c38 <memcpy>
      offset += length_md5sum;
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800203e:	68f9      	ldr	r1, [r7, #12]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0a19      	lsrs	r1, r3, #8
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0c19      	lsrs	r1, r3, #16
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3302      	adds	r3, #2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	0e19      	lsrs	r1, r3, #24
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3303      	adds	r3, #3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002080:	69fb      	ldr	r3, [r7, #28]
    }
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800208a:	b580      	push	{r7, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	3301      	adds	r3, #1
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	440b      	add	r3, r1
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21b      	sxth	r3, r3
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3302      	adds	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	441a      	add	r2, r3
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fbef 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3304      	adds	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e00b      	b.n	8002100 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	441a      	add	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3b01      	subs	r3, #1
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	440b      	add	r3, r1
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4413      	add	r3, r2
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	429a      	cmp	r2, r3
 800210a:	d3ed      	bcc.n	80020e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4413      	add	r3, r2
 8002112:	3b01      	subs	r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	3b01      	subs	r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	441a      	add	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4413      	add	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	441a      	add	r2, r3
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fbbc 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	3304      	adds	r3, #4
 8002146:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	623b      	str	r3, [r7, #32]
 800214c:	e00b      	b.n	8002166 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	441a      	add	r2, r3
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	3b01      	subs	r3, #1
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	440b      	add	r3, r1
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	3301      	adds	r3, #1
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3ed      	bcc.n	800214e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	3b01      	subs	r3, #1
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3b01      	subs	r3, #1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	441a      	add	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	441a      	add	r2, r3
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fb89 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	3304      	adds	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e00b      	b.n	80021cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	441a      	add	r2, r3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b01      	subs	r3, #1
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	440b      	add	r3, r1
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3ed      	bcc.n	80021b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3b01      	subs	r3, #1
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	441a      	add	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440a      	add	r2, r1
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	3301      	adds	r3, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	440b      	add	r3, r1
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3302      	adds	r3, #2
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	440b      	add	r3, r1
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	4313      	orrs	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	3303      	adds	r3, #3
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	440b      	add	r3, r1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	4313      	orrs	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	3304      	adds	r3, #4
 800224e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002250:	69bb      	ldr	r3, [r7, #24]
    }
 8002252:	4618      	mov	r0, r3
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08008ec4 	.word	0x08008ec4

08002278 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	08008ee0 	.word	0x08008ee0

08002294 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fd34 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]
      level(0),
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	711a      	strb	r2, [r3, #4]
      msg("")
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80022b4:	609a      	str	r2, [r3, #8]
    {
    }
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	08009154 	.word	0x08009154
 80022c4:	08008ec0 	.word	0x08008ec0

080022c8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	7912      	ldrb	r2, [r2, #4]
 80022e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fd ff6b 	bl	80001c8 <strlen>
 80022f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 fabd 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3304      	adds	r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	18d0      	adds	r0, r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4619      	mov	r1, r3
 8002316:	f006 fc8f 	bl	8008c38 <memcpy>
      offset += length_msg;
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
      return offset;
 8002322:	68fb      	ldr	r3, [r7, #12]
    }
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4413      	add	r3, r2
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3301      	adds	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	441a      	add	r2, r3
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f001 faae 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3304      	adds	r3, #4
 8002362:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e00b      	b.n	8002382 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	441a      	add	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3b01      	subs	r3, #1
 8002374:	6839      	ldr	r1, [r7, #0]
 8002376:	440b      	add	r3, r1
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	429a      	cmp	r2, r3
 800238c:	d3ed      	bcc.n	800236a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	3b01      	subs	r3, #1
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
     return offset;
 80023b2:	693b      	ldr	r3, [r7, #16]
    }
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	08008f04 	.word	0x08008f04

080023d8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	08008f18 	.word	0x08008f18

080023f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fc84 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	0800913c 	.word	0x0800913c

08002450 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0a19      	lsrs	r1, r3, #8
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	3301      	adds	r3, #1
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0c19      	lsrs	r1, r3, #16
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	3302      	adds	r3, #2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0e19      	lsrs	r1, r3, #24
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3303      	adds	r3, #3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3304      	adds	r3, #4
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	e02a      	b.n	8002504 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	0a19      	lsrs	r1, r3, #8
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3301      	adds	r3, #1
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	0c19      	lsrs	r1, r3, #16
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3302      	adds	r3, #2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	0e19      	lsrs	r1, r3, #24
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3303      	adds	r3, #3
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	b2ca      	uxtb	r2, r1
 80024f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3304      	adds	r3, #4
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	3301      	adds	r3, #1
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	429a      	cmp	r2, r3
 800250c:	d3cf      	bcc.n	80024ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	4413      	add	r3, r2
 8002518:	b2ca      	uxtb	r2, r1
 800251a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	0a19      	lsrs	r1, r3, #8
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	4413      	add	r3, r2
 800252a:	b2ca      	uxtb	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	0c19      	lsrs	r1, r3, #16
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	3302      	adds	r3, #2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	b2ca      	uxtb	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	0e19      	lsrs	r1, r3, #24
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	3303      	adds	r3, #3
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	b2ca      	uxtb	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3304      	adds	r3, #4
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e02a      	b.n	80025b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0a19      	lsrs	r1, r3, #8
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3301      	adds	r3, #1
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0c19      	lsrs	r1, r3, #16
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3302      	adds	r3, #2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	0e19      	lsrs	r1, r3, #24
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3303      	adds	r3, #3
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	b2ca      	uxtb	r2, r1
 80025a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	3304      	adds	r3, #4
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3cf      	bcc.n	800255e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69d9      	ldr	r1, [r3, #28]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2ca      	uxtb	r2, r1
 80025ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	0a19      	lsrs	r1, r3, #8
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	0c19      	lsrs	r1, r3, #16
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3302      	adds	r3, #2
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	b2ca      	uxtb	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	0e19      	lsrs	r1, r3, #24
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3303      	adds	r3, #3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	b2ca      	uxtb	r2, r1
 8002600:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	3304      	adds	r3, #4
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e027      	b.n	800265e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd fdd4 	bl	80001c8 <strlen>
 8002620:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	6979      	ldr	r1, [r7, #20]
 800262a:	4618      	mov	r0, r3
 800262c:	f001 f926 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3304      	adds	r3, #4
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	18d0      	adds	r0, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4619      	mov	r1, r3
 800264c:	f006 faf4 	bl	8008c38 <memcpy>
      offset += length_stringsi;
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4413      	add	r3, r2
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	3301      	adds	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	429a      	cmp	r2, r3
 8002666:	d3d2      	bcc.n	800260e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800266a:	4618      	mov	r0, r3
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002672:	b580      	push	{r7, lr}
 8002674:	b08e      	sub	sp, #56	; 0x38
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4413      	add	r3, r2
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	3301      	adds	r3, #1
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	4313      	orrs	r3, r2
 800269a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	3302      	adds	r3, #2
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	3303      	adds	r3, #3
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	4313      	orrs	r3, r2
 80026be:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	3304      	adds	r3, #4
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	6a3a      	ldr	r2, [r7, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d90a      	bls.n	80026e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f006 fa40 	bl	8008b60 <realloc>
 80026e0:	4602      	mov	r2, r0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
 80026f0:	e035      	b.n	800275e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	440a      	add	r2, r1
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	3301      	adds	r3, #1
 800270a:	6839      	ldr	r1, [r7, #0]
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271a:	3302      	adds	r3, #2
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	440b      	add	r3, r1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	3303      	adds	r3, #3
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	440b      	add	r3, r1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	3304      	adds	r3, #4
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	3301      	adds	r3, #1
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002764:	429a      	cmp	r2, r3
 8002766:	d3c4      	bcc.n	80026f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	4313      	orrs	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3302      	adds	r3, #2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	4313      	orrs	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	3303      	adds	r3, #3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	3304      	adds	r3, #4
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d90a      	bls.n	80027ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f006 f9cc 	bl	8008b60 <realloc>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	e035      	b.n	8002846 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	440a      	add	r2, r1
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	3301      	adds	r3, #1
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	440b      	add	r3, r1
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	3302      	adds	r3, #2
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	440b      	add	r3, r1
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	3303      	adds	r3, #3
 8002816:	6839      	ldr	r1, [r7, #0]
 8002818:	440b      	add	r3, r1
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	3304      	adds	r3, #4
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	3214      	adds	r2, #20
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	3301      	adds	r3, #1
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d3c4      	bcc.n	80027da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4413      	add	r3, r2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	3301      	adds	r3, #1
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	3302      	adds	r3, #2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	3303      	adds	r3, #3
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4413      	add	r3, r2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	3304      	adds	r3, #4
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	429a      	cmp	r2, r3
 800289e:	d90a      	bls.n	80028b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f006 f958 	bl	8008b60 <realloc>
 80028b0:	4602      	mov	r2, r0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c0:	e03e      	b.n	8002940 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	441a      	add	r2, r3
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fff3 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	3304      	adds	r3, #4
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e00b      	b.n	80028f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	441a      	add	r2, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	3b01      	subs	r3, #1
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	440b      	add	r3, r1
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	429a      	cmp	r2, r3
 8002902:	d3ed      	bcc.n	80028e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	3b01      	subs	r3, #1
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	3b01      	subs	r3, #1
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	3220      	adds	r2, #32
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	3301      	adds	r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002946:	429a      	cmp	r2, r3
 8002948:	d3bb      	bcc.n	80028c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800294c:	4618      	mov	r0, r3
 800294e:	3738      	adds	r7, #56	; 0x38
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	08009078 	.word	0x08009078

08002970 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	08008f3c 	.word	0x08008f3c

0800298c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68d8      	ldr	r0, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6891      	ldr	r1, [r2, #8]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4798      	blx	r3
 80029d8:	4603      	mov	r3, r0
  };
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
  }
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN13STM32HardwareC1Ev+0x34>)
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000274 	.word	0x20000274

08002a58 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f804 	bl	8002a6e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a82:	4619      	mov	r1, r3
 8002a84:	f004 fe56 	bl	8007734 <HAL_UART_Receive_DMA>
    }
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffa8 	bl	80029fa <_ZN13STM32Hardware10getRdmaIndEv>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	429c      	cmp	r4, r3
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
	...

08002aec <_ZN13STM32Hardware5flushEv>:
          tfind = (tfind + len) % tbuflen;
        }
        mutex = false;
      }
    }*/
    void flush(void){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d108      	bne.n	8002b14 <_ZN13STM32Hardware5flushEv+0x28>
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <_ZN13STM32Hardware5flushEv+0x28>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <_ZN13STM32Hardware5flushEv+0x2a>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d03f      	beq.n	8002b9a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d031      	beq.n	8002b94 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d20a      	bcs.n	8002b56 <_ZN13STM32Hardware5flushEv+0x6a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	e006      	b.n	8002b64 <_ZN13STM32Hardware5flushEv+0x78>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	89fa      	ldrh	r2, [r7, #14]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f004 fd5c 	bl	8007638 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b86:	89fb      	ldrh	r3, [r7, #14]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200003fd 	.word	0x200003fd

08002ba8 <_ZN13STM32Hardware5writeEPhi>:


    void write(uint8_t* data, int length){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
      int n = length;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbe:	bfa8      	it	ge
 8002bc0:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002bc4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bcc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	bf28      	it	cs
 8002bd6:	4613      	movcs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002be0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 f823 	bl	8008c38 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d00b      	beq.n	8002c26 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	18d1      	adds	r1, r2, r3
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	f006 f809 	bl	8008c38 <memcpy>
      }

      flush();
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ff60 	bl	8002aec <_ZN13STM32Hardware5flushEv>
    }
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	f001 ff9a 	bl	8004b74 <HAL_GetTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f858 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8002c5c:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
      label(""),
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002c66:	605a      	str	r2, [r3, #4]
      size(0),
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
      stride(0)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    {
    }
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	080090f8 	.word	0x080090f8
 8002c84:	08008ec0 	.word	0x08008ec0

08002c88 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fa94 	bl	80001c8 <strlen>
 8002ca0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fde6 	bl	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	18d0      	adds	r0, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f005 ffb8 	bl	8008c38 <memcpy>
      offset += length_label;
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a19      	lsrs	r1, r3, #8
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	0c19      	lsrs	r1, r3, #16
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b2ca      	uxtb	r2, r1
 8002d00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0e19      	lsrs	r1, r3, #24
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	b2ca      	uxtb	r2, r1
 8002d12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	b2ca      	uxtb	r2, r1
 8002d26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a19      	lsrs	r1, r3, #8
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	b2ca      	uxtb	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	0c19      	lsrs	r1, r3, #16
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3302      	adds	r3, #2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	b2ca      	uxtb	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0e19      	lsrs	r1, r3, #24
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3303      	adds	r3, #3
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d64:	68fb      	ldr	r3, [r7, #12]
    }
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	441a      	add	r2, r3
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fd96 	bl	80038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	3304      	adds	r3, #4
 8002d92:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e00b      	b.n	8002db2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	441a      	add	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6839      	ldr	r1, [r7, #0]
 8002da6:	440b      	add	r3, r1
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3ed      	bcc.n	8002d9a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	440b      	add	r3, r1
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	440b      	add	r3, r1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3303      	adds	r3, #3
 8002e24:	6839      	ldr	r1, [r7, #0]
 8002e26:	440b      	add	r3, r1
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3304      	adds	r3, #4
 8002e36:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	440b      	add	r3, r1
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3302      	adds	r3, #2
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	440b      	add	r3, r1
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	041b      	lsls	r3, r3, #16
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	3303      	adds	r3, #3
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	440b      	add	r3, r1
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	613b      	str	r3, [r7, #16]
     return offset;
 8002e8e:	693b      	ldr	r3, [r7, #16]
    }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	08008f60 	.word	0x08008f60

08002eb4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	08008f80 	.word	0x08008f80

08002ed0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe ff16 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff feab 	bl	8002c4c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
    {
    }
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	080090e0 	.word	0x080090e0

08002f10 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0a19      	lsrs	r1, r3, #8
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c19      	lsrs	r1, r3, #16
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3302      	adds	r3, #2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b2ca      	uxtb	r2, r1
 8002f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0e19      	lsrs	r1, r3, #24
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3303      	adds	r3, #3
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	e017      	b.n	8002f9e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	18d0      	adds	r0, r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	440a      	add	r2, r1
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4798      	blx	r3
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3e2      	bcc.n	8002f6e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69d9      	ldr	r1, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	b2ca      	uxtb	r2, r1
 8002fb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	0a19      	lsrs	r1, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2ca      	uxtb	r2, r1
 8002fc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	0c19      	lsrs	r1, r3, #16
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b2ca      	uxtb	r2, r1
 8002fd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	0e19      	lsrs	r1, r3, #24
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3303      	adds	r3, #3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b2ca      	uxtb	r2, r1
 8002fea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3302      	adds	r3, #2
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3303      	adds	r3, #3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	061b      	lsls	r3, r3, #24
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	429a      	cmp	r2, r3
 8003058:	d90a      	bls.n	8003070 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f005 fd7b 	bl	8008b60 <realloc>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e01a      	b.n	80030b2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0008 	add.w	r0, r3, #8
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4413      	add	r3, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f7ff fe70 	bl	8002d6e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	18d0      	adds	r0, r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3308      	adds	r3, #8
 80030a4:	2210      	movs	r2, #16
 80030a6:	4619      	mov	r1, r3
 80030a8:	f005 fdc6 	bl	8008c38 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3df      	bcc.n	800307c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3301      	adds	r3, #1
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	440b      	add	r3, r1
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3302      	adds	r3, #2
 80030e8:	6839      	ldr	r1, [r7, #0]
 80030ea:	440b      	add	r3, r1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3303      	adds	r3, #3
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	440b      	add	r3, r1
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3304      	adds	r3, #4
 8003110:	617b      	str	r3, [r7, #20]
     return offset;
 8003112:	697b      	ldr	r3, [r7, #20]
    }
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	08008fa4 	.word	0x08008fa4

08003138 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	08008fc0 	.word	0x08008fc0

08003154 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fdd4 	bl	8001d0c <_ZN3ros3MsgC1Ev>
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
      layout(),
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff feae 	bl	8002ed0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	080090c8 	.word	0x080090c8

08003198 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	1d18      	adds	r0, r3, #4
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7ff fead 	bl	8002f10 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	b2ca      	uxtb	r2, r1
 80031ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	0a19      	lsrs	r1, r3, #8
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3301      	adds	r3, #1
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	0c19      	lsrs	r1, r3, #16
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3302      	adds	r3, #2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	b2ca      	uxtb	r2, r1
 80031ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	0e19      	lsrs	r1, r3, #24
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3303      	adds	r3, #3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3304      	adds	r3, #4
 8003206:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e02a      	b.n	8003264 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	4413      	add	r3, r2
 8003224:	b2ca      	uxtb	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	0a19      	lsrs	r1, r3, #8
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	4413      	add	r3, r2
 8003234:	b2ca      	uxtb	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	0c19      	lsrs	r1, r3, #16
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3302      	adds	r3, #2
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	b2ca      	uxtb	r2, r1
 8003246:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	0e19      	lsrs	r1, r3, #24
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3303      	adds	r3, #3
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4413      	add	r3, r2
 8003254:	b2ca      	uxtb	r2, r1
 8003256:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3301      	adds	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3cf      	bcc.n	800320e <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 800326e:	697b      	ldr	r3, [r7, #20]
    }
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1d18      	adds	r0, r3, #4
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff feb3 	bl	8002ffc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003296:	4602      	mov	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4413      	add	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	3301      	adds	r3, #1
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3302      	adds	r3, #2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3303      	adds	r3, #3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3304      	adds	r3, #4
 80032e2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d90a      	bls.n	8003304 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f005 fc31 	bl	8008b60 <realloc>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e035      	b.n	800337c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	440a      	add	r2, r1
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3301      	adds	r3, #1
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	440b      	add	r3, r1
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4313      	orrs	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3302      	adds	r3, #2
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	440b      	add	r3, r1
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	4313      	orrs	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3303      	adds	r3, #3
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	440b      	add	r3, r1
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3304      	adds	r3, #4
 8003362:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	3228      	adds	r2, #40	; 0x28
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	3301      	adds	r3, #1
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d3c4      	bcc.n	8003310 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003386:	697b      	ldr	r3, [r7, #20]
    }
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	08008fe4 	.word	0x08008fe4

080033ac <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	08009000 	.word	0x08009000

080033c8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	08009128 	.word	0x08009128

080033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ffe8 	bl	80033c8 <_ZN3ros15NodeHandleBase_C1Ev>
 80033f8:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fb0c 	bl	8002a20 <_ZN13STM32HardwareC1Ev>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800342e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f005 fbca 	bl	8008bce <memset>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f005 fbc1 	bl	8008bce <memset>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003452:	2264      	movs	r2, #100	; 0x64
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f005 fbb9 	bl	8008bce <memset>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8003462:	2264      	movs	r2, #100	; 0x64
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f005 fbb1 	bl	8008bce <memset>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe ff96 	bl	80023f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	080090b4 	.word	0x080090b4

080034d8 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::Float32MultiArray> cmd_vel("cmd_vel",&cmd_vel_callback);

extern float v_enc[4];
extern float v_set[4];
extern float d, l;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 80034e0:	4805      	ldr	r0, [pc, #20]	; (80034f8 <HAL_UART_TxCpltCallback+0x20>)
 80034e2:	f000 fa45 	bl	8003970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff faff 	bl	8002aec <_ZN13STM32Hardware5flushEv>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000400 	.word	0x20000400

080034fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <HAL_UART_RxCpltCallback+0x20>)
 8003506:	f000 fa33 	bl	8003970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800350a:	4603      	mov	r3, r0
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff faae 	bl	8002a6e <_ZN13STM32Hardware10reset_rbufEv>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000400 	.word	0x20000400

08003520 <setup>:

void setup(void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	nh.initNode();
 8003524:	4808      	ldr	r0, [pc, #32]	; (8003548 <setup+0x28>)
 8003526:	f000 fa2f 	bl	8003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(vel_set);
 800352a:	4908      	ldr	r1, [pc, #32]	; (800354c <setup+0x2c>)
 800352c:	4806      	ldr	r0, [pc, #24]	; (8003548 <setup+0x28>)
 800352e:	f000 fa48 	bl	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(vel_enc);
 8003532:	4907      	ldr	r1, [pc, #28]	; (8003550 <setup+0x30>)
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <setup+0x28>)
 8003536:	f000 fa44 	bl	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.subscribe(cmd_vel);
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <setup+0x34>)
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <setup+0x28>)
 800353e:	f000 fa70 	bl	8003a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000400 	.word	0x20000400
 800354c:	20000dcc 	.word	0x20000dcc
 8003550:	20000de0 	.word	0x20000de0
 8003554:	20000df4 	.word	0x20000df4

08003558 <loop>:

void loop(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

	vel_set_msg.data_length = sizeof(v_set)/sizeof(v_set[0]);
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <loop+0x40>)
 800355e:	2204      	movs	r2, #4
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
	vel_set_msg.data = v_set;
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <loop+0x40>)
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <loop+0x44>)
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

	vel_enc_msg.data_length = sizeof(v_enc)/sizeof(v_enc[0]);
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <loop+0x48>)
 800356a:	2204      	movs	r2, #4
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
	vel_enc_msg.data = v_enc;
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <loop+0x48>)
 8003570:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <loop+0x4c>)
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

	vel_set.publish(&vel_set_msg);
 8003574:	4908      	ldr	r1, [pc, #32]	; (8003598 <loop+0x40>)
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <loop+0x50>)
 8003578:	f7ff fa1f 	bl	80029ba <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	vel_enc.publish(&vel_enc_msg);
 800357c:	4908      	ldr	r1, [pc, #32]	; (80035a0 <loop+0x48>)
 800357e:	480b      	ldr	r0, [pc, #44]	; (80035ac <loop+0x54>)
 8003580:	f7ff fa1b 	bl	80029ba <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8003584:	480a      	ldr	r0, [pc, #40]	; (80035b0 <loop+0x58>)
 8003586:	f000 fa77 	bl	8003a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(1000);
 800358a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800358e:	f001 fafd 	bl	8004b8c <HAL_Delay>
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000d3c 	.word	0x20000d3c
 800359c:	20000000 	.word	0x20000000
 80035a0:	20000d6c 	.word	0x20000d6c
 80035a4:	20000378 	.word	0x20000378
 80035a8:	20000dcc 	.word	0x20000dcc
 80035ac:	20000de0 	.word	0x20000de0
 80035b0:	20000400 	.word	0x20000400

080035b4 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE>:

void cmd_vel_callback(const std_msgs::Float32MultiArray& msg){
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	if (msg.data_length >= 3){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f240 814e 	bls.w	8003862 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2ae>
		v_set[0] = 60*((msg.data[0]+msg.data[1])/sqrt(2)-msg.data[2]*d)/l;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	ed93 7a00 	vldr	s14, [r3]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	3304      	adds	r3, #4
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035dc:	ee17 0a90 	vmov	r0, s15
 80035e0:	f7fc ff5e 	bl	80004a0 <__aeabi_f2d>
 80035e4:	4604      	mov	r4, r0
 80035e6:	460d      	mov	r5, r1
 80035e8:	2002      	movs	r0, #2
 80035ea:	f000 fc1e 	bl	8003e2a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80035ee:	ec53 2b10 	vmov	r2, r3, d0
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fd f8d5 	bl	80007a4 <__aeabi_ddiv>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	461d      	mov	r5, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	3308      	adds	r3, #8
 8003608:	ed93 7a00 	vldr	s14, [r3]
 800360c:	4b97      	ldr	r3, [pc, #604]	; (800386c <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2b8>)
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	ee17 0a90 	vmov	r0, s15
 800361a:	f7fc ff41 	bl	80004a0 <__aeabi_f2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc fddb 	bl	80001e0 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2bc>)
 8003638:	f7fc ff8a 	bl	8000550 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4614      	mov	r4, r2
 8003642:	461d      	mov	r5, r3
 8003644:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ff29 	bl	80004a0 <__aeabi_f2d>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	f7fd f8a5 	bl	80007a4 <__aeabi_ddiv>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fd fa25 	bl	8000ab0 <__aeabi_d2f>
 8003666:	4603      	mov	r3, r0
 8003668:	4a83      	ldr	r2, [pc, #524]	; (8003878 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c4>)
 800366a:	6013      	str	r3, [r2, #0]
		v_set[1] = 60*((msg.data[0]-msg.data[1])/sqrt(2)-msg.data[2]*d)/l;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	ed93 7a00 	vldr	s14, [r3]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	3304      	adds	r3, #4
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003682:	ee17 0a90 	vmov	r0, s15
 8003686:	f7fc ff0b 	bl	80004a0 <__aeabi_f2d>
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
 800368e:	2002      	movs	r0, #2
 8003690:	f000 fbcb 	bl	8003e2a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003694:	ec53 2b10 	vmov	r2, r3, d0
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fd f882 	bl	80007a4 <__aeabi_ddiv>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	3308      	adds	r3, #8
 80036ae:	ed93 7a00 	vldr	s14, [r3]
 80036b2:	4b6e      	ldr	r3, [pc, #440]	; (800386c <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2b8>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	ee17 0a90 	vmov	r0, s15
 80036c0:	f7fc feee 	bl	80004a0 <__aeabi_f2d>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4620      	mov	r0, r4
 80036ca:	4629      	mov	r1, r5
 80036cc:	f7fc fd88 	bl	80001e0 <__aeabi_dsub>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b64      	ldr	r3, [pc, #400]	; (8003870 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2bc>)
 80036de:	f7fc ff37 	bl	8000550 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4614      	mov	r4, r2
 80036e8:	461d      	mov	r5, r3
 80036ea:	4b62      	ldr	r3, [pc, #392]	; (8003874 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc fed6 	bl	80004a0 <__aeabi_f2d>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4620      	mov	r0, r4
 80036fa:	4629      	mov	r1, r5
 80036fc:	f7fd f852 	bl	80007a4 <__aeabi_ddiv>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd f9d2 	bl	8000ab0 <__aeabi_d2f>
 800370c:	4603      	mov	r3, r0
 800370e:	4a5a      	ldr	r2, [pc, #360]	; (8003878 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c4>)
 8003710:	6053      	str	r3, [r2, #4]
		v_set[2] = 60*((-msg.data[0]-msg.data[1])/sqrt(2)-msg.data[2]*d)/l;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eeb1 7a67 	vneg.f32	s14, s15
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	3304      	adds	r3, #4
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372c:	ee17 0a90 	vmov	r0, s15
 8003730:	f7fc feb6 	bl	80004a0 <__aeabi_f2d>
 8003734:	4604      	mov	r4, r0
 8003736:	460d      	mov	r5, r1
 8003738:	2002      	movs	r0, #2
 800373a:	f000 fb76 	bl	8003e2a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800373e:	ec53 2b10 	vmov	r2, r3, d0
 8003742:	4620      	mov	r0, r4
 8003744:	4629      	mov	r1, r5
 8003746:	f7fd f82d 	bl	80007a4 <__aeabi_ddiv>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	461d      	mov	r5, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	3308      	adds	r3, #8
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2b8>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003766:	ee17 0a90 	vmov	r0, s15
 800376a:	f7fc fe99 	bl	80004a0 <__aeabi_f2d>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4620      	mov	r0, r4
 8003774:	4629      	mov	r1, r5
 8003776:	f7fc fd33 	bl	80001e0 <__aeabi_dsub>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2bc>)
 8003788:	f7fc fee2 	bl	8000550 <__aeabi_dmul>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4614      	mov	r4, r2
 8003792:	461d      	mov	r5, r3
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fe81 	bl	80004a0 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc fffd 	bl	80007a4 <__aeabi_ddiv>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd f97d 	bl	8000ab0 <__aeabi_d2f>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c4>)
 80037ba:	6093      	str	r3, [r2, #8]
		v_set[3] = 60*((-msg.data[0]+msg.data[1])/sqrt(2)-msg.data[2]*d)/l;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	3304      	adds	r3, #4
 80037c2:	ed93 7a00 	vldr	s14, [r3]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d2:	ee17 0a90 	vmov	r0, s15
 80037d6:	f7fc fe63 	bl	80004a0 <__aeabi_f2d>
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
 80037de:	2002      	movs	r0, #2
 80037e0:	f000 fb23 	bl	8003e2a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80037e4:	ec53 2b10 	vmov	r2, r3, d0
 80037e8:	4620      	mov	r0, r4
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7fc ffda 	bl	80007a4 <__aeabi_ddiv>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	3308      	adds	r3, #8
 80037fe:	ed93 7a00 	vldr	s14, [r3]
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2b8>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380c:	ee17 0a90 	vmov	r0, s15
 8003810:	f7fc fe46 	bl	80004a0 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fc fce0 	bl	80001e0 <__aeabi_dsub>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2bc>)
 800382e:	f7fc fe8f 	bl	8000550 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4614      	mov	r4, r2
 8003838:	461d      	mov	r5, r3
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe2e 	bl	80004a0 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4620      	mov	r0, r4
 800384a:	4629      	mov	r1, r5
 800384c:	f7fc ffaa 	bl	80007a4 <__aeabi_ddiv>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f92a 	bl	8000ab0 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	4a06      	ldr	r2, [pc, #24]	; (8003878 <_Z16cmd_vel_callbackRKN8std_msgs17Float32MultiArrayE+0x2c4>)
 8003860:	60d3      	str	r3, [r2, #12]
	}
	/*if ((int) msg.data[0] % 5 == 0)		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
	else HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);*/
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bdb0      	pop	{r4, r5, r7, pc}
 800386a:	bf00      	nop
 800386c:	20000038 	.word	0x20000038
 8003870:	404e0000 	.word	0x404e0000
 8003874:	200003f8 	.word	0x200003f8
 8003878:	20000000 	.word	0x20000000

0800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e00c      	b.n	80038a6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	fa22 f103 	lsr.w	r1, r2, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	b2ca      	uxtb	r2, r1
 800389e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d9ef      	bls.n	800388c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e010      	b.n	80038f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	440a      	add	r2, r1
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	4611      	mov	r1, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	00d2      	lsls	r2, r2, #3
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d9eb      	bls.n	80038d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	08009110 	.word	0x08009110

08003928 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ffe5 	bl	8003908 <_ZN3ros11Subscriber_C1Ev>
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	330c      	adds	r3, #12
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fc03 	bl	8003154 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
  };
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	0800909c 	.word	0x0800909c

08003970 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
  }
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f85f 	bl	8002a58 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e01d      	b.n	8003a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	60da      	str	r2, [r3, #12]
        return true;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e006      	b.n	8003a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b18      	cmp	r3, #24
 8003a12:	ddde      	ble.n	80039d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8003a14:	2300      	movs	r3, #0
  }
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e018      	b.n	8003a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a4a:	6839      	ldr	r1, [r7, #0]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]
        return true;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e006      	b.n	8003a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	dde3      	ble.n	8003a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8003a6a:	2300      	movs	r3, #0
  }
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f8d5 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8003a8a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d903      	bls.n	8003aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d903      	bls.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d014      	beq.n	8003af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff f8ae 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad2      	subs	r2, r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	bf8c      	ite	hi
 8003ae8:	2301      	movhi	r3, #1
 8003aea:	2300      	movls	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003af2:	f06f 0301 	mvn.w	r3, #1
 8003af6:	e194      	b.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ffc7 	bl	8002a90 <_ZN13STM32Hardware4readEv>
 8003b02:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f2c0 8174 	blt.w	8003df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b22:	2b07      	cmp	r3, #7
 8003b24:	d11e      	bne.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	b2d1      	uxtb	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1b4      	bne.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b62:	e7af      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d128      	bne.n	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2bff      	cmp	r3, #255	; 0xff
 8003b72:	d10d      	bne.n	8003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f103 0214 	add.w	r2, r3, #20
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003b8e:	e799      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f84d 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf8c      	ite	hi
 8003ba8:	2301      	movhi	r3, #1
 8003baa:	2300      	movls	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d088      	beq.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003bba:	f06f 0301 	mvn.w	r3, #1
 8003bbe:	e130      	b.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d118      	bne.n	8003bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2bfe      	cmp	r3, #254	; 0xfe
 8003bce:	d107      	bne.n	8003be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003bde:	e771      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f47f af68 	bne.w	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f930 	bl	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003bfa:	e763      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d113      	bne.n	8003c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003c2c:	e74a      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d110      	bne.n	8003c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003c58:	e734      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d116      	bne.n	8003c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003c6a:	425a      	negs	r2, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	bf58      	it	pl
 8003c72:	4253      	negpl	r3, r2
 8003c74:	2bff      	cmp	r3, #255	; 0xff
 8003c76:	d107      	bne.n	8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003c86:	e71d      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003c90:	e718      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d10f      	bne.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003cba:	e703      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d117      	bne.n	8003cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	441a      	add	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2207      	movs	r2, #7
 8003cdc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f47f aeec 	bne.w	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003cf4:	e6e6      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f47f aee1 	bne.w	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003d10:	425a      	negs	r2, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	bf58      	it	pl
 8003d18:	4253      	negpl	r3, r2
 8003d1a:	2bff      	cmp	r3, #255	; 0xff
 8003d1c:	f47f aed2 	bne.w	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d110      	bne.n	8003d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f895 	bl	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8b0 	bl	8003e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	e06a      	b.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d107      	bne.n	8003d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f978 	bl	8004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003d64:	e6ae      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d10e      	bne.n	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe fc77 	bl	8002672 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003d8c:	e69a      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003d94:	2b0b      	cmp	r3, #11
 8003d96:	d104      	bne.n	8003da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003da0:	e690      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003da8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f43f ae84 	beq.w	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003dc2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dcc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003dd6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003dee:	4611      	mov	r1, r2
 8003df0:	4798      	blx	r3
    while (true)
 8003df2:	e667      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003df4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00f      	beq.n	8003e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d906      	bls.n	8003e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f821 	bl	8003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003e20:	2300      	movs	r3, #0
  }
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc fb22 	bl	800047c <__aeabi_i2d>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	ec43 2b10 	vmov	d0, r2, r3
 8003e40:	f004 fd88 	bl	8008954 <sqrt>
 8003e44:	eeb0 7a40 	vmov.f32	s14, s0
 8003e48:	eef0 7a60 	vmov.f32	s15, s1
 8003e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003e50:	eef0 0a67 	vmov.f32	s1, s15
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd ff60 	bl	8001d2c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f107 020c 	add.w	r2, r7, #12
 8003e76:	210a      	movs	r1, #10
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
    rt_time = hardware_.time();
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fed7 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8003e86:	4602      	mov	r2, r0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003e96:	b590      	push	{r4, r7, lr}
 8003e98:	b08b      	sub	sp, #44	; 0x2c
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f832 	bl	8001f0c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e062      	b.n	8003f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d056      	beq.n	8003f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4798      	blx	r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	6859      	ldr	r1, [r3, #4]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4798      	blx	r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f46:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681c      	ldr	r4, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fd40 	bl	80029e2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003f62:	4601      	mov	r1, r0
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3301      	adds	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2b18      	cmp	r3, #24
 8003f78:	dd99      	ble.n	8003eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e05e      	b.n	800403e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d053      	beq.n	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4798      	blx	r3
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4798      	blx	r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004002:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681c      	ldr	r4, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800401e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3304      	adds	r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4608      	mov	r0, r1
 800402a:	4798      	blx	r3
 800402c:	4601      	mov	r1, r0
 800402e:	f107 030c 	add.w	r3, r7, #12
 8004032:	461a      	mov	r2, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	3301      	adds	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b18      	cmp	r3, #24
 8004042:	dd9d      	ble.n	8003f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800404c:	bf00      	nop
 800404e:	372c      	adds	r7, #44	; 0x2c
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800405e:	f107 0308 	add.w	r3, r7, #8
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fe62 	bl	8001d2c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fde1 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd fec1 	bl	8001e0c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4915      	ldr	r1, [pc, #84]	; (80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004090:	fba1 1303 	umull	r1, r3, r1, r3
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	4413      	add	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800409a:	6939      	ldr	r1, [r7, #16]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80040a0:	fba3 0302 	umull	r0, r3, r3, r2
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	440b      	add	r3, r1
 80040b8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8a6 	bl	8004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fdb1 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	10624dd3 	.word	0x10624dd3
 80040e8:	000f4240 	.word	0x000f4240

080040ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b63      	cmp	r3, #99	; 0x63
 80040fc:	dd09      	ble.n	8004112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004104:	f083 0301 	eor.w	r3, r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800410e:	2300      	movs	r3, #0
 8004110:	e079      	b.n	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800411e:	3207      	adds	r2, #7
 8004120:	4611      	mov	r1, r2
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	22fe      	movs	r2, #254	; 0xfe
 8004134:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	b29b      	uxth	r3, r3
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2da      	uxtb	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800415e:	4413      	add	r3, r2
 8004160:	b2db      	uxtb	r3, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	b21b      	sxth	r3, r3
 800417a:	121b      	asrs	r3, r3, #8
 800417c:	b21b      	sxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800418a:	2305      	movs	r3, #5
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e00c      	b.n	80041aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	3301      	adds	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3306      	adds	r3, #6
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	dded      	ble.n	8004190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3307      	adds	r3, #7
 80041b8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	425a      	negs	r2, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	bf58      	it	pl
 80041c4:	4253      	negpl	r3, r2
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1c59      	adds	r1, r3, #1
 80041cc:	6179      	str	r1, [r7, #20]
 80041ce:	43d2      	mvns	r2, r2
 80041d0:	b2d1      	uxtb	r1, r2
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	460a      	mov	r2, r1
 80041d8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e2:	dc0a      	bgt.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1d18      	adds	r0, r3, #4
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f7fe fcd9 	bl	8002ba8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	e005      	b.n	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80041fa:	4905      	ldr	r1, [pc, #20]	; (8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f849 	bl	8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08009024 	.word	0x08009024

08004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fd06 	bl	8002c34 <_ZN13STM32Hardware4timeEv>
 8004228:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4915      	ldr	r1, [pc, #84]	; (8004288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004232:	fba1 1303 	umull	r1, r3, r1, r3
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	1e5a      	subs	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800424a:	fba3 0302 	umull	r0, r3, r3, r2
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004254:	fb00 f303 	mul.w	r3, r0, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	1aca      	subs	r2, r1, r3
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004264:	4413      	add	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fc fde6 	bl	8000e4c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	10624dd3 	.word	0x10624dd3
 800428c:	000f4240 	.word	0x000f4240
 8004290:	3b9aca00 	.word	0x3b9aca00

08004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	2103      	movs	r1, #3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f804 	bl	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	460b      	mov	r3, r1
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fd ffe6 	bl	8002294 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f107 0214 	add.w	r2, r7, #20
 80042da:	2107      	movs	r1, #7
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	4798      	blx	r3
  }
 80042e0:	bf00      	nop
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_Z41__static_initialization_and_destruction_0ii>:
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d122      	bne.n	800433e <_Z41__static_initialization_and_destruction_0ii+0x56>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11d      	bne.n	800433e <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 8004302:	4811      	ldr	r0, [pc, #68]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004304:	f7ff f870 	bl	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float32MultiArray vel_set_msg;
 8004308:	4810      	ldr	r0, [pc, #64]	; (800434c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800430a:	f7fe ff23 	bl	8003154 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray vel_enc_msg;
 800430e:	4810      	ldr	r0, [pc, #64]	; (8004350 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004310:	f7fe ff20 	bl	8003154 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray cmd_vel_msg;
 8004314:	480f      	ldr	r0, [pc, #60]	; (8004354 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004316:	f7fe ff1d 	bl	8003154 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher vel_set("vel_set", &vel_set_msg);
 800431a:	2300      	movs	r3, #0
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800431e:	490e      	ldr	r1, [pc, #56]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004320:	480e      	ldr	r0, [pc, #56]	; (800435c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004322:	f7fe fb33 	bl	800298c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher vel_enc("vel_enc", &vel_enc_msg);
 8004326:	2300      	movs	r3, #0
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800432a:	490d      	ldr	r1, [pc, #52]	; (8004360 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800432c:	480d      	ldr	r0, [pc, #52]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800432e:	f7fe fb2d 	bl	800298c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32MultiArray> cmd_vel("cmd_vel",&cmd_vel_callback);
 8004332:	2301      	movs	r3, #1
 8004334:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004336:	490d      	ldr	r1, [pc, #52]	; (800436c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004338:	480d      	ldr	r0, [pc, #52]	; (8004370 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800433a:	f7ff faf5 	bl	8003928 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000400 	.word	0x20000400
 800434c:	20000d3c 	.word	0x20000d3c
 8004350:	20000d6c 	.word	0x20000d6c
 8004354:	20000d9c 	.word	0x20000d9c
 8004358:	08009060 	.word	0x08009060
 800435c:	20000dcc 	.word	0x20000dcc
 8004360:	08009068 	.word	0x08009068
 8004364:	20000de0 	.word	0x20000de0
 8004368:	080035b5 	.word	0x080035b5
 800436c:	08009070 	.word	0x08009070
 8004370:	20000df4 	.word	0x20000df4

08004374 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	330c      	adds	r3, #12
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ff77 	bl	8003278 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	320c      	adds	r2, #12
 8004392:	4610      	mov	r0, r2
 8004394:	4798      	blx	r3
  }
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	330c      	adds	r3, #12
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe ffe4 	bl	8003390 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 80043c8:	4603      	mov	r3, r0
  }
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	330c      	adds	r3, #12
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe ffe4 	bl	80033ac <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 80043e4:	4603      	mov	r3, r0
  }
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
    return configured_;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_GLOBAL__sub_I_nh>:
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
 800440c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004410:	2001      	movs	r0, #1
 8004412:	f7ff ff69 	bl	80042e8 <_Z41__static_initialization_and_destruction_0ii>
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_MspInit+0x4c>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <HAL_MspInit+0x4c>)
 8004428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442c:	6453      	str	r3, [r2, #68]	; 0x44
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <HAL_MspInit+0x4c>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_MspInit+0x4c>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <HAL_MspInit+0x4c>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_MspInit+0x4c>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_TIM_Base_MspInit+0x80>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d116      	bne.n	80044a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6453      	str	r3, [r2, #68]	; 0x44
 800448a:	4b18      	ldr	r3, [pc, #96]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	2018      	movs	r0, #24
 800449c:	f000 fc75 	bl	8004d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80044a0:	2018      	movs	r0, #24
 80044a2:	f000 fc8e 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80044a6:	e01a      	b.n	80044de <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM9)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <HAL_TIM_Base_MspInit+0x88>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d115      	bne.n	80044de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_TIM_Base_MspInit+0x84>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2018      	movs	r0, #24
 80044d4:	f000 fc59 	bl	8004d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80044d8:	2018      	movs	r0, #24
 80044da:	f000 fc72 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40014000 	.word	0x40014000

080044f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b092      	sub	sp, #72	; 0x48
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d14a      	bne.n	80045ac <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
 800451a:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a7f      	ldr	r2, [pc, #508]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b7d      	ldr	r3, [pc, #500]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004536:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a78      	ldr	r2, [pc, #480]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a71      	ldr	r2, [pc, #452]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800456a:	2320      	movs	r3, #32
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004572:	2301      	movs	r3, #1
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004576:	2300      	movs	r3, #0
 8004578:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800457a:	2301      	movs	r3, #1
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004582:	4619      	mov	r1, r3
 8004584:	4866      	ldr	r0, [pc, #408]	; (8004720 <HAL_TIM_Encoder_MspInit+0x22c>)
 8004586:	f001 f839 	bl	80055fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800458a:	2308      	movs	r3, #8
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004592:	2301      	movs	r3, #1
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800459a:	2301      	movs	r3, #1
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045a2:	4619      	mov	r1, r3
 80045a4:	485f      	ldr	r0, [pc, #380]	; (8004724 <HAL_TIM_Encoder_MspInit+0x230>)
 80045a6:	f001 f829 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80045aa:	e0b3      	b.n	8004714 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5d      	ldr	r2, [pc, #372]	; (8004728 <HAL_TIM_Encoder_MspInit+0x234>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12c      	bne.n	8004610 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ba:	4b58      	ldr	r3, [pc, #352]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a57      	ldr	r2, [pc, #348]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045c0:	f043 0302 	orr.w	r3, r3, #2
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b55      	ldr	r3, [pc, #340]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a50      	ldr	r2, [pc, #320]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045ee:	23c0      	movs	r3, #192	; 0xc0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f6:	2301      	movs	r3, #1
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045fe:	2302      	movs	r3, #2
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004602:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004606:	4619      	mov	r1, r3
 8004608:	4845      	ldr	r0, [pc, #276]	; (8004720 <HAL_TIM_Encoder_MspInit+0x22c>)
 800460a:	f000 fff7 	bl	80055fc <HAL_GPIO_Init>
}
 800460e:	e081      	b.n	8004714 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a45      	ldr	r2, [pc, #276]	; (800472c <HAL_TIM_Encoder_MspInit+0x238>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d14b      	bne.n	80046b2 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	4b3f      	ldr	r3, [pc, #252]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a3e      	ldr	r2, [pc, #248]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b3c      	ldr	r3, [pc, #240]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	4a37      	ldr	r2, [pc, #220]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	6313      	str	r3, [r2, #48]	; 0x30
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a30      	ldr	r2, [pc, #192]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6313      	str	r3, [r2, #48]	; 0x30
 8004662:	4b2e      	ldr	r3, [pc, #184]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800466e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004678:	2301      	movs	r3, #1
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467c:	2300      	movs	r3, #0
 800467e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004680:	2302      	movs	r3, #2
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004688:	4619      	mov	r1, r3
 800468a:	4829      	ldr	r0, [pc, #164]	; (8004730 <HAL_TIM_Encoder_MspInit+0x23c>)
 800468c:	f000 ffb6 	bl	80055fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004698:	2301      	movs	r3, #1
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469c:	2300      	movs	r3, #0
 800469e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046a0:	2302      	movs	r3, #2
 80046a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046a8:	4619      	mov	r1, r3
 80046aa:	481e      	ldr	r0, [pc, #120]	; (8004724 <HAL_TIM_Encoder_MspInit+0x230>)
 80046ac:	f000 ffa6 	bl	80055fc <HAL_GPIO_Init>
}
 80046b0:	e030      	b.n	8004714 <HAL_TIM_Encoder_MspInit+0x220>
  else if(htim_encoder->Instance==TIM5)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <HAL_TIM_Encoder_MspInit+0x240>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d12b      	bne.n	8004714 <HAL_TIM_Encoder_MspInit+0x220>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046c6:	f043 0308 	orr.w	r3, r3, #8
 80046ca:	6413      	str	r3, [r2, #64]	; 0x40
 80046cc:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_TIM_Encoder_MspInit+0x228>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046f4:	2303      	movs	r3, #3
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f8:	2302      	movs	r3, #2
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046fc:	2301      	movs	r3, #1
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004704:	2302      	movs	r3, #2
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800470c:	4619      	mov	r1, r3
 800470e:	4804      	ldr	r0, [pc, #16]	; (8004720 <HAL_TIM_Encoder_MspInit+0x22c>)
 8004710:	f000 ff74 	bl	80055fc <HAL_GPIO_Init>
}
 8004714:	bf00      	nop
 8004716:	3748      	adds	r7, #72	; 0x48
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40023800 	.word	0x40023800
 8004720:	40020000 	.word	0x40020000
 8004724:	40020400 	.word	0x40020400
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40020c00 	.word	0x40020c00
 8004734:	40000c00 	.word	0x40000c00

08004738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004740:	f107 030c 	add.w	r3, r7, #12
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <HAL_TIM_MspPostInit+0x68>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d11e      	bne.n	8004798 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_TIM_MspPostInit+0x6c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	4a10      	ldr	r2, [pc, #64]	; (80047a4 <HAL_TIM_MspPostInit+0x6c>)
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	6313      	str	r3, [r2, #48]	; 0x30
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_TIM_MspPostInit+0x6c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8004776:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800477a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004788:	2301      	movs	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	4619      	mov	r1, r3
 8004792:	4805      	ldr	r0, [pc, #20]	; (80047a8 <HAL_TIM_MspPostInit+0x70>)
 8004794:	f000 ff32 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004798:	bf00      	nop
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40021000 	.word	0x40021000

080047ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <HAL_UART_MspInit+0x150>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f040 8091 	bne.w	80048f2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	4a49      	ldr	r2, [pc, #292]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047de:	6413      	str	r3, [r2, #64]	; 0x40
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6313      	str	r3, [r2, #48]	; 0x30
 80047fc:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004808:	230c      	movs	r3, #12
 800480a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004818:	2307      	movs	r3, #7
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	4619      	mov	r1, r3
 8004822:	4838      	ldr	r0, [pc, #224]	; (8004904 <HAL_UART_MspInit+0x158>)
 8004824:	f000 feea 	bl	80055fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004828:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_UART_MspInit+0x15c>)
 800482a:	4a38      	ldr	r2, [pc, #224]	; (800490c <HAL_UART_MspInit+0x160>)
 800482c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004834:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004836:	4b34      	ldr	r3, [pc, #208]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800483c:	4b32      	ldr	r3, [pc, #200]	; (8004908 <HAL_UART_MspInit+0x15c>)
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004848:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800484a:	4b2f      	ldr	r3, [pc, #188]	; (8004908 <HAL_UART_MspInit+0x15c>)
 800484c:	2200      	movs	r2, #0
 800484e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004856:	4b2c      	ldr	r3, [pc, #176]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800485c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004860:	2200      	movs	r2, #0
 8004862:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004864:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004866:	2200      	movs	r2, #0
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800486a:	4827      	ldr	r0, [pc, #156]	; (8004908 <HAL_UART_MspInit+0x15c>)
 800486c:	f000 fac4 	bl	8004df8 <HAL_DMA_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004876:	f7fd f9fb 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a22      	ldr	r2, [pc, #136]	; (8004908 <HAL_UART_MspInit+0x15c>)
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
 8004880:	4a21      	ldr	r2, [pc, #132]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004886:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_UART_MspInit+0x164>)
 8004888:	4a22      	ldr	r2, [pc, #136]	; (8004914 <HAL_UART_MspInit+0x168>)
 800488a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_UART_MspInit+0x164>)
 800488e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004892:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <HAL_UART_MspInit+0x164>)
 8004896:	2240      	movs	r2, #64	; 0x40
 8004898:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_UART_MspInit+0x164>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048bc:	2200      	movs	r2, #0
 80048be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048c6:	4812      	ldr	r0, [pc, #72]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048c8:	f000 fa96 	bl	8004df8 <HAL_DMA_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80048d2:	f7fd f9cd 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048da:	635a      	str	r2, [r3, #52]	; 0x34
 80048dc:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <HAL_UART_MspInit+0x164>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	2026      	movs	r0, #38	; 0x26
 80048e8:	f000 fa4f 	bl	8004d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048ec:	2026      	movs	r0, #38	; 0x26
 80048ee:	f000 fa68 	bl	8004dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048f2:	bf00      	nop
 80048f4:	3728      	adds	r7, #40	; 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40004400 	.word	0x40004400
 8004900:	40023800 	.word	0x40023800
 8004904:	40020000 	.word	0x40020000
 8004908:	200002b8 	.word	0x200002b8
 800490c:	40026088 	.word	0x40026088
 8004910:	20000318 	.word	0x20000318
 8004914:	400260a0 	.word	0x400260a0

08004918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800491c:	e7fe      	b.n	800491c <NMI_Handler+0x4>

0800491e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004922:	e7fe      	b.n	8004922 <HardFault_Handler+0x4>

08004924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004928:	e7fe      	b.n	8004928 <MemManage_Handler+0x4>

0800492a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800492e:	e7fe      	b.n	800492e <BusFault_Handler+0x4>

08004930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004934:	e7fe      	b.n	8004934 <UsageFault_Handler+0x4>

08004936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004964:	f000 f8f2 	bl	8004b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}

0800496c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004970:	4802      	ldr	r0, [pc, #8]	; (800497c <DMA1_Stream5_IRQHandler+0x10>)
 8004972:	f000 fbd9 	bl	8005128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200002b8 	.word	0x200002b8

08004980 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004984:	4802      	ldr	r0, [pc, #8]	; (8004990 <DMA1_Stream6_IRQHandler+0x10>)
 8004986:	f000 fbcf 	bl	8005128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000318 	.word	0x20000318

08004994 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004998:	4803      	ldr	r0, [pc, #12]	; (80049a8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800499a:	f001 ff53 	bl	8006844 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800499e:	4803      	ldr	r0, [pc, #12]	; (80049ac <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80049a0:	f001 ff50 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200000c4 	.word	0x200000c4
 80049ac:	2000022c 	.word	0x2000022c

080049b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049b4:	4802      	ldr	r0, [pc, #8]	; (80049c0 <USART2_IRQHandler+0x10>)
 80049b6:	f002 feed 	bl	8007794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000274 	.word	0x20000274

080049c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <_sbrk+0x5c>)
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <_sbrk+0x60>)
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <_sbrk+0x64>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <_sbrk+0x64>)
 80049e2:	4a12      	ldr	r2, [pc, #72]	; (8004a2c <_sbrk+0x68>)
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <_sbrk+0x64>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d207      	bcs.n	8004a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049f4:	f004 f8f4 	bl	8008be0 <__errno>
 80049f8:	4603      	mov	r3, r0
 80049fa:	220c      	movs	r2, #12
 80049fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	e009      	b.n	8004a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <_sbrk+0x64>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <_sbrk+0x64>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <_sbrk+0x64>)
 8004a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20020000 	.word	0x20020000
 8004a24:	00000400 	.word	0x00000400
 8004a28:	20000e38 	.word	0x20000e38
 8004a2c:	20000f88 	.word	0x20000f88

08004a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <SystemInit+0x20>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <SystemInit+0x20>)
 8004a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a58:	480d      	ldr	r0, [pc, #52]	; (8004a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a5a:	490e      	ldr	r1, [pc, #56]	; (8004a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a5c:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a60:	e002      	b.n	8004a68 <LoopCopyDataInit>

08004a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a66:	3304      	adds	r3, #4

08004a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a6c:	d3f9      	bcc.n	8004a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a70:	4c0b      	ldr	r4, [pc, #44]	; (8004aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a74:	e001      	b.n	8004a7a <LoopFillZerobss>

08004a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a78:	3204      	adds	r2, #4

08004a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a7c:	d3fb      	bcc.n	8004a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a7e:	f7ff ffd7 	bl	8004a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a82:	f004 f8b3 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a86:	f7fc fc75 	bl	8001374 <main>
  bx  lr    
 8004a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a94:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004a98:	080091e4 	.word	0x080091e4
  ldr r2, =_sbss
 8004a9c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004aa0:	20000f88 	.word	0x20000f88

08004aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aa4:	e7fe      	b.n	8004aa4 <ADC_IRQHandler>
	...

08004aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004aac:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <HAL_Init+0x40>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <HAL_Init+0x40>)
 8004ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_Init+0x40>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <HAL_Init+0x40>)
 8004abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_Init+0x40>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_Init+0x40>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad0:	2003      	movs	r0, #3
 8004ad2:	f000 f94f 	bl	8004d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad6:	200f      	movs	r0, #15
 8004ad8:	f000 f808 	bl	8004aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004adc:	f7ff fc9c 	bl	8004418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023c00 	.word	0x40023c00

08004aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_InitTick+0x54>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_InitTick+0x58>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f967 	bl	8004dde <HAL_SYSTICK_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e00e      	b.n	8004b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b0f      	cmp	r3, #15
 8004b1e:	d80a      	bhi.n	8004b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b20:	2200      	movs	r2, #0
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	f000 f92f 	bl	8004d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b2c:	4a06      	ldr	r2, [pc, #24]	; (8004b48 <HAL_InitTick+0x5c>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	2000003c 	.word	0x2000003c
 8004b44:	20000044 	.word	0x20000044
 8004b48:	20000040 	.word	0x20000040

08004b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x20>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_IncTick+0x24>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <HAL_IncTick+0x24>)
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000044 	.word	0x20000044
 8004b70:	20000e3c 	.word	0x20000e3c

08004b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return uwTick;
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_GetTick+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000e3c 	.word	0x20000e3c

08004b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff ffee 	bl	8004b74 <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d005      	beq.n	8004bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_Delay+0x44>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bb2:	bf00      	nop
 8004bb4:	f7ff ffde 	bl	8004b74 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d8f7      	bhi.n	8004bb4 <HAL_Delay+0x28>
  {
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000044 	.word	0x20000044

08004bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	60d3      	str	r3, [r2, #12]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <__NVIC_GetPriorityGrouping+0x18>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f003 0307 	and.w	r3, r3, #7
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	db0b      	blt.n	8004c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	f003 021f 	and.w	r2, r3, #31
 8004c50:	4907      	ldr	r1, [pc, #28]	; (8004c70 <__NVIC_EnableIRQ+0x38>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2001      	movs	r0, #1
 8004c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e100 	.word	0xe000e100

08004c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	db0a      	blt.n	8004c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	490c      	ldr	r1, [pc, #48]	; (8004cc0 <__NVIC_SetPriority+0x4c>)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	0112      	lsls	r2, r2, #4
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	440b      	add	r3, r1
 8004c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c9c:	e00a      	b.n	8004cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4908      	ldr	r1, [pc, #32]	; (8004cc4 <__NVIC_SetPriority+0x50>)
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	3b04      	subs	r3, #4
 8004cac:	0112      	lsls	r2, r2, #4
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	761a      	strb	r2, [r3, #24]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000e100 	.word	0xe000e100
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f1c3 0307 	rsb	r3, r3, #7
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	bf28      	it	cs
 8004ce6:	2304      	movcs	r3, #4
 8004ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3304      	adds	r3, #4
 8004cee:	2b06      	cmp	r3, #6
 8004cf0:	d902      	bls.n	8004cf8 <NVIC_EncodePriority+0x30>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3b03      	subs	r3, #3
 8004cf6:	e000      	b.n	8004cfa <NVIC_EncodePriority+0x32>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43da      	mvns	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d10:	f04f 31ff 	mov.w	r1, #4294967295
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	43d9      	mvns	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d20:	4313      	orrs	r3, r2
         );
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3724      	adds	r7, #36	; 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d40:	d301      	bcc.n	8004d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d42:	2301      	movs	r3, #1
 8004d44:	e00f      	b.n	8004d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <SysTick_Config+0x40>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d4e:	210f      	movs	r1, #15
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	f7ff ff8e 	bl	8004c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <SysTick_Config+0x40>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <SysTick_Config+0x40>)
 8004d60:	2207      	movs	r2, #7
 8004d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	e000e010 	.word	0xe000e010

08004d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff29 	bl	8004bd4 <__NVIC_SetPriorityGrouping>
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	4603      	mov	r3, r0
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d9c:	f7ff ff3e 	bl	8004c1c <__NVIC_GetPriorityGrouping>
 8004da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f7ff ff8e 	bl	8004cc8 <NVIC_EncodePriority>
 8004dac:	4602      	mov	r2, r0
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ff5d 	bl	8004c74 <__NVIC_SetPriority>
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff ff31 	bl	8004c38 <__NVIC_EnableIRQ>
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff ffa2 	bl	8004d30 <SysTick_Config>
 8004dec:	4603      	mov	r3, r0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e04:	f7ff feb6 	bl	8004b74 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e099      	b.n	8004f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e34:	e00f      	b.n	8004e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e36:	f7ff fe9d 	bl	8004b74 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	d908      	bls.n	8004e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e078      	b.n	8004f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e8      	bne.n	8004e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4b38      	ldr	r3, [pc, #224]	; (8004f50 <HAL_DMA_Init+0x158>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d107      	bne.n	8004ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0307 	bic.w	r3, r3, #7
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d117      	bne.n	8004f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00e      	beq.n	8004f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fb01 	bl	8005504 <DMA_CheckFifoParam>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f16:	2301      	movs	r3, #1
 8004f18:	e016      	b.n	8004f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fab8 	bl	8005498 <DMA_CalcBaseAndBitshift>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	223f      	movs	r2, #63	; 0x3f
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	f010803f 	.word	0xf010803f

08004f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_DMA_Start_IT+0x26>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e040      	b.n	8004ffc <HAL_DMA_Start_IT+0xa8>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12f      	bne.n	8004fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa4a 	bl	800543c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fac:	223f      	movs	r2, #63	; 0x3f
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0216 	orr.w	r2, r2, #22
 8004fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0208 	orr.w	r2, r2, #8
 8004fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e005      	b.n	8004ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005012:	f7ff fdaf 	bl	8004b74 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d008      	beq.n	8005036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2280      	movs	r2, #128	; 0x80
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e052      	b.n	80050dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0216 	bic.w	r2, r2, #22
 8005044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <HAL_DMA_Abort+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0208 	bic.w	r2, r2, #8
 8005074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005086:	e013      	b.n	80050b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005088:	f7ff fd74 	bl	8004b74 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b05      	cmp	r3, #5
 8005094:	d90c      	bls.n	80050b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2203      	movs	r2, #3
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e015      	b.n	80050dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e4      	bne.n	8005088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	223f      	movs	r2, #63	; 0x3f
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e00c      	b.n	800511c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2205      	movs	r2, #5
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005134:	4b8e      	ldr	r3, [pc, #568]	; (8005370 <HAL_DMA_IRQHandler+0x248>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a8e      	ldr	r2, [pc, #568]	; (8005374 <HAL_DMA_IRQHandler+0x24c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0a9b      	lsrs	r3, r3, #10
 8005140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2208      	movs	r2, #8
 8005154:	409a      	lsls	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01a      	beq.n	8005194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	2208      	movs	r2, #8
 8005182:	409a      	lsls	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	2201      	movs	r2, #1
 80051b8:	409a      	lsls	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0202 	orr.w	r2, r3, #2
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	2204      	movs	r2, #4
 80051d0:	409a      	lsls	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d012      	beq.n	8005200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	2204      	movs	r2, #4
 80051ee:	409a      	lsls	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0204 	orr.w	r2, r3, #4
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	2210      	movs	r2, #16
 8005206:	409a      	lsls	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d043      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d03c      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	2210      	movs	r2, #16
 8005224:	409a      	lsls	r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d018      	beq.n	800526a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d024      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
 8005256:	e01f      	b.n	8005298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
 8005268:	e016      	b.n	8005298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0208 	bic.w	r2, r2, #8
 8005286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	2220      	movs	r2, #32
 800529e:	409a      	lsls	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 808f 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8087 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	2220      	movs	r2, #32
 80052c0:	409a      	lsls	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d136      	bne.n	8005340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0216 	bic.w	r2, r2, #22
 80052e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <HAL_DMA_IRQHandler+0x1da>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0208 	bic.w	r2, r2, #8
 8005310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	223f      	movs	r2, #63	; 0x3f
 8005318:	409a      	lsls	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07e      	beq.n	8005434 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
        }
        return;
 800533e:	e079      	b.n	8005434 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01d      	beq.n	800538a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	2b00      	cmp	r3, #0
 8005362:	d031      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	e02c      	b.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
 800536e:	bf00      	nop
 8005370:	2000003c 	.word	0x2000003c
 8005374:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d023      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
 8005388:	e01e      	b.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10f      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0210 	bic.w	r2, r2, #16
 80053a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d032      	beq.n	8005436 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d022      	beq.n	8005422 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2205      	movs	r2, #5
 80053e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d307      	bcc.n	8005410 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f2      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x2cc>
 800540e:	e000      	b.n	8005412 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005410:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
 8005432:	e000      	b.n	8005436 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005434:	bf00      	nop
    }
  }
}
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005458:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d108      	bne.n	800547c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800547a:	e007      	b.n	800548c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	3b10      	subs	r3, #16
 80054a8:	4a14      	ldr	r2, [pc, #80]	; (80054fc <DMA_CalcBaseAndBitshift+0x64>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054b2:	4a13      	ldr	r2, [pc, #76]	; (8005500 <DMA_CalcBaseAndBitshift+0x68>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d909      	bls.n	80054da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	659a      	str	r2, [r3, #88]	; 0x58
 80054d8:	e007      	b.n	80054ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	aaaaaaab 	.word	0xaaaaaaab
 8005500:	080091c4 	.word	0x080091c4

08005504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d11f      	bne.n	800555e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d856      	bhi.n	80055d2 <DMA_CheckFifoParam+0xce>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <DMA_CheckFifoParam+0x28>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800554f 	.word	0x0800554f
 8005534:	0800553d 	.word	0x0800553d
 8005538:	080055d3 	.word	0x080055d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d046      	beq.n	80055d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554c:	e043      	b.n	80055d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005556:	d140      	bne.n	80055da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555c:	e03d      	b.n	80055da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005566:	d121      	bne.n	80055ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d837      	bhi.n	80055de <DMA_CheckFifoParam+0xda>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <DMA_CheckFifoParam+0x70>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005585 	.word	0x08005585
 8005578:	0800558b 	.word	0x0800558b
 800557c:	08005585 	.word	0x08005585
 8005580:	0800559d 	.word	0x0800559d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      break;
 8005588:	e030      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d025      	beq.n	80055e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559a:	e022      	b.n	80055e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055a4:	d11f      	bne.n	80055e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055aa:	e01c      	b.n	80055e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d903      	bls.n	80055ba <DMA_CheckFifoParam+0xb6>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d003      	beq.n	80055c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055b8:	e018      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]
      break;
 80055be:	e015      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00e      	beq.n	80055ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e00b      	b.n	80055ea <DMA_CheckFifoParam+0xe6>
      break;
 80055d2:	bf00      	nop
 80055d4:	e00a      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e008      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;
 80055da:	bf00      	nop
 80055dc:	e006      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;
 80055de:	bf00      	nop
 80055e0:	e004      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;   
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <DMA_CheckFifoParam+0xe8>
      break;
 80055ea:	bf00      	nop
    }
  } 
  
  return status; 
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop

080055fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e16b      	b.n	80058f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005618:	2201      	movs	r2, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	f040 815a 	bne.w	80058ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d005      	beq.n	800564e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800564a:	2b02      	cmp	r3, #2
 800564c:	d130      	bne.n	80056b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005684:	2201      	movs	r2, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 0201 	and.w	r2, r3, #1
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d017      	beq.n	80056ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d123      	bne.n	8005740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	69b9      	ldr	r1, [r7, #24]
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80b4 	beq.w	80058ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	4b60      	ldr	r3, [pc, #384]	; (8005908 <HAL_GPIO_Init+0x30c>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	4a5f      	ldr	r2, [pc, #380]	; (8005908 <HAL_GPIO_Init+0x30c>)
 800578c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
 8005792:	4b5d      	ldr	r3, [pc, #372]	; (8005908 <HAL_GPIO_Init+0x30c>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800579e:	4a5b      	ldr	r2, [pc, #364]	; (800590c <HAL_GPIO_Init+0x310>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	3302      	adds	r3, #2
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	220f      	movs	r2, #15
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a52      	ldr	r2, [pc, #328]	; (8005910 <HAL_GPIO_Init+0x314>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02b      	beq.n	8005822 <HAL_GPIO_Init+0x226>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a51      	ldr	r2, [pc, #324]	; (8005914 <HAL_GPIO_Init+0x318>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d025      	beq.n	800581e <HAL_GPIO_Init+0x222>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a50      	ldr	r2, [pc, #320]	; (8005918 <HAL_GPIO_Init+0x31c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <HAL_GPIO_Init+0x21e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a4f      	ldr	r2, [pc, #316]	; (800591c <HAL_GPIO_Init+0x320>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_GPIO_Init+0x21a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a4e      	ldr	r2, [pc, #312]	; (8005920 <HAL_GPIO_Init+0x324>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_GPIO_Init+0x216>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a4d      	ldr	r2, [pc, #308]	; (8005924 <HAL_GPIO_Init+0x328>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00d      	beq.n	800580e <HAL_GPIO_Init+0x212>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a4c      	ldr	r2, [pc, #304]	; (8005928 <HAL_GPIO_Init+0x32c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <HAL_GPIO_Init+0x20e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a4b      	ldr	r2, [pc, #300]	; (800592c <HAL_GPIO_Init+0x330>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_GPIO_Init+0x20a>
 8005802:	2307      	movs	r3, #7
 8005804:	e00e      	b.n	8005824 <HAL_GPIO_Init+0x228>
 8005806:	2308      	movs	r3, #8
 8005808:	e00c      	b.n	8005824 <HAL_GPIO_Init+0x228>
 800580a:	2306      	movs	r3, #6
 800580c:	e00a      	b.n	8005824 <HAL_GPIO_Init+0x228>
 800580e:	2305      	movs	r3, #5
 8005810:	e008      	b.n	8005824 <HAL_GPIO_Init+0x228>
 8005812:	2304      	movs	r3, #4
 8005814:	e006      	b.n	8005824 <HAL_GPIO_Init+0x228>
 8005816:	2303      	movs	r3, #3
 8005818:	e004      	b.n	8005824 <HAL_GPIO_Init+0x228>
 800581a:	2302      	movs	r3, #2
 800581c:	e002      	b.n	8005824 <HAL_GPIO_Init+0x228>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_GPIO_Init+0x228>
 8005822:	2300      	movs	r3, #0
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	f002 0203 	and.w	r2, r2, #3
 800582a:	0092      	lsls	r2, r2, #2
 800582c:	4093      	lsls	r3, r2
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005834:	4935      	ldr	r1, [pc, #212]	; (800590c <HAL_GPIO_Init+0x310>)
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	3302      	adds	r3, #2
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005842:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <HAL_GPIO_Init+0x334>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005866:	4a32      	ldr	r2, [pc, #200]	; (8005930 <HAL_GPIO_Init+0x334>)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800586c:	4b30      	ldr	r3, [pc, #192]	; (8005930 <HAL_GPIO_Init+0x334>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005890:	4a27      	ldr	r2, [pc, #156]	; (8005930 <HAL_GPIO_Init+0x334>)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <HAL_GPIO_Init+0x334>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_GPIO_Init+0x334>)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <HAL_GPIO_Init+0x334>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058e4:	4a12      	ldr	r2, [pc, #72]	; (8005930 <HAL_GPIO_Init+0x334>)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	f67f ae90 	bls.w	8005618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	40013800 	.word	0x40013800
 8005910:	40020000 	.word	0x40020000
 8005914:	40020400 	.word	0x40020400
 8005918:	40020800 	.word	0x40020800
 800591c:	40020c00 	.word	0x40020c00
 8005920:	40021000 	.word	0x40021000
 8005924:	40021400 	.word	0x40021400
 8005928:	40021800 	.word	0x40021800
 800592c:	40021c00 	.word	0x40021c00
 8005930:	40013c00 	.word	0x40013c00

08005934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
 8005940:	4613      	mov	r3, r2
 8005942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005944:	787b      	ldrb	r3, [r7, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800594a:	887a      	ldrh	r2, [r7, #2]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005950:	e003      	b.n	800595a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	041a      	lsls	r2, r3, #16
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	619a      	str	r2, [r3, #24]
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e267      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d075      	beq.n	8005a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005986:	4b88      	ldr	r3, [pc, #544]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00c      	beq.n	80059ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005992:	4b85      	ldr	r3, [pc, #532]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800599a:	2b08      	cmp	r3, #8
 800599c:	d112      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800599e:	4b82      	ldr	r3, [pc, #520]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059aa:	d10b      	bne.n	80059c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ac:	4b7e      	ldr	r3, [pc, #504]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d05b      	beq.n	8005a70 <HAL_RCC_OscConfig+0x108>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d157      	bne.n	8005a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e242      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059cc:	d106      	bne.n	80059dc <HAL_RCC_OscConfig+0x74>
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a75      	ldr	r2, [pc, #468]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e01d      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x98>
 80059e6:	4b70      	ldr	r3, [pc, #448]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6f      	ldr	r2, [pc, #444]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	4b6d      	ldr	r3, [pc, #436]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a6c      	ldr	r2, [pc, #432]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e00b      	b.n	8005a18 <HAL_RCC_OscConfig+0xb0>
 8005a00:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a68      	ldr	r2, [pc, #416]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b66      	ldr	r3, [pc, #408]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a65      	ldr	r2, [pc, #404]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a20:	f7ff f8a8 	bl	8004b74 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a28:	f7ff f8a4 	bl	8004b74 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e207      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0xc0>
 8005a46:	e014      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a48:	f7ff f894 	bl	8004b74 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a50:	f7ff f890 	bl	8004b74 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e1f3      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a62:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f0      	bne.n	8005a50 <HAL_RCC_OscConfig+0xe8>
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d063      	beq.n	8005b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8a:	4b47      	ldr	r3, [pc, #284]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d11c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a96:	4b44      	ldr	r3, [pc, #272]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa2:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e1c7      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4937      	ldr	r1, [pc, #220]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ace:	e03a      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad8:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_RCC_OscConfig+0x244>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7ff f849 	bl	8004b74 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae6:	f7ff f845 	bl	8004b74 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e1a8      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af8:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b04:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4925      	ldr	r1, [pc, #148]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]
 8005b18:	e015      	b.n	8005b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <HAL_RCC_OscConfig+0x244>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7ff f828 	bl	8004b74 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b28:	f7ff f824 	bl	8004b74 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e187      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0308 	and.w	r3, r3, #8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d036      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <HAL_RCC_OscConfig+0x248>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7ff f808 	bl	8004b74 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b68:	f7ff f804 	bl	8004b74 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e167      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x200>
 8005b86:	e01b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <HAL_RCC_OscConfig+0x248>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7fe fff1 	bl	8004b74 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b94:	e00e      	b.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b96:	f7fe ffed 	bl	8004b74 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d907      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e150      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	42470000 	.word	0x42470000
 8005bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb4:	4b88      	ldr	r3, [pc, #544]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ea      	bne.n	8005b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8097 	beq.w	8005cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd2:	4b81      	ldr	r3, [pc, #516]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	4b7d      	ldr	r3, [pc, #500]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	4a7c      	ldr	r2, [pc, #496]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6413      	str	r3, [r2, #64]	; 0x40
 8005bee:	4b7a      	ldr	r3, [pc, #488]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfe:	4b77      	ldr	r3, [pc, #476]	; (8005ddc <HAL_RCC_OscConfig+0x474>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d118      	bne.n	8005c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0a:	4b74      	ldr	r3, [pc, #464]	; (8005ddc <HAL_RCC_OscConfig+0x474>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a73      	ldr	r2, [pc, #460]	; (8005ddc <HAL_RCC_OscConfig+0x474>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c16:	f7fe ffad 	bl	8004b74 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c1e:	f7fe ffa9 	bl	8004b74 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e10c      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c30:	4b6a      	ldr	r3, [pc, #424]	; (8005ddc <HAL_RCC_OscConfig+0x474>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d106      	bne.n	8005c52 <HAL_RCC_OscConfig+0x2ea>
 8005c44:	4b64      	ldr	r3, [pc, #400]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	4a63      	ldr	r2, [pc, #396]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c50:	e01c      	b.n	8005c8c <HAL_RCC_OscConfig+0x324>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x30c>
 8005c5a:	4b5f      	ldr	r3, [pc, #380]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a5e      	ldr	r2, [pc, #376]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c60:	f043 0304 	orr.w	r3, r3, #4
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
 8005c66:	4b5c      	ldr	r3, [pc, #368]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6a:	4a5b      	ldr	r2, [pc, #364]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	6713      	str	r3, [r2, #112]	; 0x70
 8005c72:	e00b      	b.n	8005c8c <HAL_RCC_OscConfig+0x324>
 8005c74:	4b58      	ldr	r3, [pc, #352]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	4a57      	ldr	r2, [pc, #348]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c80:	4b55      	ldr	r3, [pc, #340]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	4a54      	ldr	r2, [pc, #336]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005c86:	f023 0304 	bic.w	r3, r3, #4
 8005c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7fe ff6e 	bl	8004b74 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c9c:	f7fe ff6a 	bl	8004b74 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0cb      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb2:	4b49      	ldr	r3, [pc, #292]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ee      	beq.n	8005c9c <HAL_RCC_OscConfig+0x334>
 8005cbe:	e014      	b.n	8005cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc0:	f7fe ff58 	bl	8004b74 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc6:	e00a      	b.n	8005cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fe ff54 	bl	8004b74 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e0b5      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cde:	4b3e      	ldr	r3, [pc, #248]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ee      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	4a38      	ldr	r2, [pc, #224]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80a1 	beq.w	8005e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d06:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d05c      	beq.n	8005dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d141      	bne.n	8005d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1a:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <HAL_RCC_OscConfig+0x478>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d20:	f7fe ff28 	bl	8004b74 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d28:	f7fe ff24 	bl	8004b74 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e087      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3a:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	019b      	lsls	r3, r3, #6
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	491b      	ldr	r1, [pc, #108]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x478>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d76:	f7fe fefd 	bl	8004b74 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7e:	f7fe fef9 	bl	8004b74 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e05c      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x416>
 8005d9c:	e054      	b.n	8005e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_RCC_OscConfig+0x478>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fe fee6 	bl	8004b74 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dac:	f7fe fee2 	bl	8004b74 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e045      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x444>
 8005dca:	e03d      	b.n	8005e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e038      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005de4:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <HAL_RCC_OscConfig+0x4ec>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d028      	beq.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d121      	bne.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d11a      	bne.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d111      	bne.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40023800 	.word	0x40023800

08005e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0cc      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6c:	4b68      	ldr	r3, [pc, #416]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d90c      	bls.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7a:	4b65      	ldr	r3, [pc, #404]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e82:	4b63      	ldr	r3, [pc, #396]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d001      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0b8      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eac:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	4a58      	ldr	r2, [pc, #352]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ec4:	4b53      	ldr	r3, [pc, #332]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed0:	4b50      	ldr	r3, [pc, #320]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	494d      	ldr	r1, [pc, #308]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d044      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b47      	ldr	r3, [pc, #284]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d119      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e07f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d107      	bne.n	8005f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	4b3f      	ldr	r3, [pc, #252]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e06f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f26:	4b3b      	ldr	r3, [pc, #236]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e067      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 0203 	bic.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4934      	ldr	r1, [pc, #208]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f48:	f7fe fe14 	bl	8004b74 <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4e:	e00a      	b.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f50:	f7fe fe10 	bl	8004b74 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e04f      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 020c 	and.w	r2, r3, #12
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d1eb      	bne.n	8005f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20c      	bcs.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e032      	b.n	8006006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4916      	ldr	r1, [pc, #88]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	490e      	ldr	r1, [pc, #56]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fde:	f000 f821 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	490a      	ldr	r1, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff0:	5ccb      	ldrb	r3, [r1, r3]
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fd74 	bl	8004aec <HAL_InitTick>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00
 8006014:	40023800 	.word	0x40023800
 8006018:	080091ac 	.word	0x080091ac
 800601c:	2000003c 	.word	0x2000003c
 8006020:	20000040 	.word	0x20000040

08006024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006028:	b090      	sub	sp, #64	; 0x40
 800602a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
 8006030:	2300      	movs	r3, #0
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006034:	2300      	movs	r3, #0
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800603c:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d00d      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0x40>
 8006048:	2b08      	cmp	r3, #8
 800604a:	f200 80a1 	bhi.w	8006190 <HAL_RCC_GetSysClockFreq+0x16c>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x34>
 8006052:	2b04      	cmp	r3, #4
 8006054:	d003      	beq.n	800605e <HAL_RCC_GetSysClockFreq+0x3a>
 8006056:	e09b      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006058:	4b53      	ldr	r3, [pc, #332]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800605a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800605c:	e09b      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800605e:	4b53      	ldr	r3, [pc, #332]	; (80061ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006062:	e098      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006064:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800606e:	4b4d      	ldr	r3, [pc, #308]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d028      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607a:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	099b      	lsrs	r3, r3, #6
 8006080:	2200      	movs	r2, #0
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	627a      	str	r2, [r7, #36]	; 0x24
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800608c:	2100      	movs	r1, #0
 800608e:	4b47      	ldr	r3, [pc, #284]	; (80061ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006090:	fb03 f201 	mul.w	r2, r3, r1
 8006094:	2300      	movs	r3, #0
 8006096:	fb00 f303 	mul.w	r3, r0, r3
 800609a:	4413      	add	r3, r2
 800609c:	4a43      	ldr	r2, [pc, #268]	; (80061ac <HAL_RCC_GetSysClockFreq+0x188>)
 800609e:	fba0 1202 	umull	r1, r2, r0, r2
 80060a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a4:	460a      	mov	r2, r1
 80060a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80060a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060aa:	4413      	add	r3, r2
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	2200      	movs	r2, #0
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	61fa      	str	r2, [r7, #28]
 80060b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060be:	f7fa fd47 	bl	8000b50 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4613      	mov	r3, r2
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ca:	e053      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060cc:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	2200      	movs	r2, #0
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	617a      	str	r2, [r7, #20]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060de:	f04f 0b00 	mov.w	fp, #0
 80060e2:	4652      	mov	r2, sl
 80060e4:	465b      	mov	r3, fp
 80060e6:	f04f 0000 	mov.w	r0, #0
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	0159      	lsls	r1, r3, #5
 80060f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060f4:	0150      	lsls	r0, r2, #5
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	ebb2 080a 	subs.w	r8, r2, sl
 80060fe:	eb63 090b 	sbc.w	r9, r3, fp
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800610e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006112:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006116:	ebb2 0408 	subs.w	r4, r2, r8
 800611a:	eb63 0509 	sbc.w	r5, r3, r9
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	00eb      	lsls	r3, r5, #3
 8006128:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612c:	00e2      	lsls	r2, r4, #3
 800612e:	4614      	mov	r4, r2
 8006130:	461d      	mov	r5, r3
 8006132:	eb14 030a 	adds.w	r3, r4, sl
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	eb45 030b 	adc.w	r3, r5, fp
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800614a:	4629      	mov	r1, r5
 800614c:	028b      	lsls	r3, r1, #10
 800614e:	4621      	mov	r1, r4
 8006150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006154:	4621      	mov	r1, r4
 8006156:	028a      	lsls	r2, r1, #10
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	2200      	movs	r2, #0
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	60fa      	str	r2, [r7, #12]
 8006164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006168:	f7fa fcf2 	bl	8000b50 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	3301      	adds	r3, #1
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800618e:	e002      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006198:	4618      	mov	r0, r3
 800619a:	3740      	adds	r7, #64	; 0x40
 800619c:	46bd      	mov	sp, r7
 800619e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	017d7840 	.word	0x017d7840

080061b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	2000003c 	.word	0x2000003c

080061c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061cc:	f7ff fff0 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	0a9b      	lsrs	r3, r3, #10
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	4903      	ldr	r1, [pc, #12]	; (80061ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80061de:	5ccb      	ldrb	r3, [r1, r3]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40023800 	.word	0x40023800
 80061ec:	080091bc 	.word	0x080091bc

080061f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061f4:	f7ff ffdc 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061f8:	4602      	mov	r2, r0
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	0b5b      	lsrs	r3, r3, #13
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	4903      	ldr	r1, [pc, #12]	; (8006214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006206:	5ccb      	ldrb	r3, [r1, r3]
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800620c:	4618      	mov	r0, r3
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40023800 	.word	0x40023800
 8006214:	080091bc 	.word	0x080091bc

08006218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e041      	b.n	80062ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fe f912 	bl	8004468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f000 fdae 	bl	8006db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d001      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e04e      	b.n	800636e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a23      	ldr	r2, [pc, #140]	; (800637c <HAL_TIM_Base_Start_IT+0xc4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fa:	d01d      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <HAL_TIM_Base_Start_IT+0xc8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <HAL_TIM_Base_Start_IT+0xcc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <HAL_TIM_Base_Start_IT+0xd0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1b      	ldr	r2, [pc, #108]	; (800638c <HAL_TIM_Base_Start_IT+0xd4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a19      	ldr	r2, [pc, #100]	; (8006390 <HAL_TIM_Base_Start_IT+0xd8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x80>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <HAL_TIM_Base_Start_IT+0xdc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d111      	bne.n	800635c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b06      	cmp	r3, #6
 8006348:	d010      	beq.n	800636c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0201 	orr.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635a:	e007      	b.n	800636c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40001800 	.word	0x40001800

08006398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e041      	b.n	800642e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f839 	bl	8006436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f000 fcee 	bl	8006db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_TIM_PWM_Start+0x24>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e022      	b.n	80064b6 <HAL_TIM_PWM_Start+0x6a>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b04      	cmp	r3, #4
 8006474:	d109      	bne.n	800648a <HAL_TIM_PWM_Start+0x3e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	e015      	b.n	80064b6 <HAL_TIM_PWM_Start+0x6a>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d109      	bne.n	80064a4 <HAL_TIM_PWM_Start+0x58>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e008      	b.n	80064b6 <HAL_TIM_PWM_Start+0x6a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07c      	b.n	80065b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Start+0x82>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064cc:	e013      	b.n	80064f6 <HAL_TIM_PWM_Start+0xaa>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0x92>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064dc:	e00b      	b.n	80064f6 <HAL_TIM_PWM_Start+0xaa>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_PWM_Start+0xa2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ec:	e003      	b.n	80064f6 <HAL_TIM_PWM_Start+0xaa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2201      	movs	r2, #1
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ff44 	bl	800738c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2d      	ldr	r2, [pc, #180]	; (80065c0 <HAL_TIM_PWM_Start+0x174>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_TIM_PWM_Start+0xcc>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <HAL_TIM_PWM_Start+0x178>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_TIM_PWM_Start+0xd0>
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <HAL_TIM_PWM_Start+0xd2>
 800651c:	2300      	movs	r3, #0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <HAL_TIM_PWM_Start+0x174>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d01d      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <HAL_TIM_PWM_Start+0x17c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <HAL_TIM_PWM_Start+0x180>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_TIM_PWM_Start+0x184>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <HAL_TIM_PWM_Start+0x178>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_TIM_PWM_Start+0x188>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIM_PWM_Start+0x136>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <HAL_TIM_PWM_Start+0x18c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d111      	bne.n	80065a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b06      	cmp	r3, #6
 8006592:	d010      	beq.n	80065b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	e007      	b.n	80065b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40000c00 	.word	0x40000c00
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40001800 	.word	0x40001800

080065dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e097      	b.n	8006720 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fd ff75 	bl	80044f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f000 fbc1 	bl	8006db8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	4313      	orrs	r3, r2
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800667c:	f023 030c 	bic.w	r3, r3, #12
 8006680:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	4313      	orrs	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	011a      	lsls	r2, r3, #4
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	031b      	lsls	r3, r3, #12
 80066ac:	4313      	orrs	r3, r2
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	4313      	orrs	r3, r2
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006738:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006740:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006748:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006750:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d110      	bne.n	800677a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d102      	bne.n	8006764 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800675e:	7b7b      	ldrb	r3, [r7, #13]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e069      	b.n	800683c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006778:	e031      	b.n	80067de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d110      	bne.n	80067a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006786:	7b3b      	ldrb	r3, [r7, #12]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e055      	b.n	800683c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a0:	e01d      	b.n	80067de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d108      	bne.n	80067ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d105      	bne.n	80067ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ae:	7b7b      	ldrb	r3, [r7, #13]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d102      	bne.n	80067ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067b4:	7b3b      	ldrb	r3, [r7, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e03e      	b.n	800683c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_TIM_Encoder_Start+0xc4>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d008      	beq.n	80067fc <HAL_TIM_Encoder_Start+0xd4>
 80067ea:	e00f      	b.n	800680c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2201      	movs	r2, #1
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fdc9 	bl	800738c <TIM_CCxChannelCmd>
      break;
 80067fa:	e016      	b.n	800682a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	2104      	movs	r1, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fdc1 	bl	800738c <TIM_CCxChannelCmd>
      break;
 800680a:	e00e      	b.n	800682a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2201      	movs	r2, #1
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fdb9 	bl	800738c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2201      	movs	r2, #1
 8006820:	2104      	movs	r1, #4
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fdb2 	bl	800738c <TIM_CCxChannelCmd>
      break;
 8006828:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b02      	cmp	r3, #2
 8006858:	d122      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d11b      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0202 	mvn.w	r2, #2
 8006870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa77 	bl	8006d7a <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa69 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa7a 	bl	8006d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0204 	mvn.w	r2, #4
 80068c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa4d 	bl	8006d7a <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa3f 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa50 	bl	8006d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d122      	bne.n	8006948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b08      	cmp	r3, #8
 800690e:	d11b      	bne.n	8006948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0208 	mvn.w	r2, #8
 8006918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2204      	movs	r2, #4
 800691e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa23 	bl	8006d7a <HAL_TIM_IC_CaptureCallback>
 8006934:	e005      	b.n	8006942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa15 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa26 	bl	8006d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b10      	cmp	r3, #16
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b10      	cmp	r3, #16
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0210 	mvn.w	r2, #16
 800696c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2208      	movs	r2, #8
 8006972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9f9 	bl	8006d7a <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9eb 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9fc 	bl	8006d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0201 	mvn.w	r2, #1
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fa fc1c 	bl	8001200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b80      	cmp	r3, #128	; 0x80
 80069d4:	d10e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d107      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fdca 	bl	8007588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d10e      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d107      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9c1 	bl	8006da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d10e      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d107      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0220 	mvn.w	r2, #32
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fd94 	bl	8007574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0ae      	b.n	8006bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	f200 809f 	bhi.w	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006bc1 	.word	0x08006bc1
 8006a90:	08006bc1 	.word	0x08006bc1
 8006a94:	08006bc1 	.word	0x08006bc1
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006bc1 	.word	0x08006bc1
 8006aa0:	08006bc1 	.word	0x08006bc1
 8006aa4:	08006bc1 	.word	0x08006bc1
 8006aa8:	08006b3f 	.word	0x08006b3f
 8006aac:	08006bc1 	.word	0x08006bc1
 8006ab0:	08006bc1 	.word	0x08006bc1
 8006ab4:	08006bc1 	.word	0x08006bc1
 8006ab8:	08006b7f 	.word	0x08006b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fa18 	bl	8006ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0204 	bic.w	r2, r2, #4
 8006ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6999      	ldr	r1, [r3, #24]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	619a      	str	r2, [r3, #24]
      break;
 8006afa:	e064      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fa68 	bl	8006fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6999      	ldr	r1, [r3, #24]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	021a      	lsls	r2, r3, #8
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	619a      	str	r2, [r3, #24]
      break;
 8006b3c:	e043      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fabd 	bl	80070c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0208 	orr.w	r2, r2, #8
 8006b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0204 	bic.w	r2, r2, #4
 8006b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69d9      	ldr	r1, [r3, #28]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	61da      	str	r2, [r3, #28]
      break;
 8006b7c:	e023      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fb11 	bl	80071ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69d9      	ldr	r1, [r3, #28]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	021a      	lsls	r2, r3, #8
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	61da      	str	r2, [r3, #28]
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e0b4      	b.n	8006d5e <HAL_TIM_ConfigClockSource+0x186>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2c:	d03e      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0xd4>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c32:	f200 8087 	bhi.w	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3a:	f000 8086 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x172>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d87f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c44:	2b70      	cmp	r3, #112	; 0x70
 8006c46:	d01a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xa6>
 8006c48:	2b70      	cmp	r3, #112	; 0x70
 8006c4a:	d87b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c4c:	2b60      	cmp	r3, #96	; 0x60
 8006c4e:	d050      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d877      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c54:	2b50      	cmp	r3, #80	; 0x50
 8006c56:	d03c      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c58:	2b50      	cmp	r3, #80	; 0x50
 8006c5a:	d873      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d058      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x13a>
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d86f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d064      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c68:	2b30      	cmp	r3, #48	; 0x30
 8006c6a:	d86b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d060      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d867      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d05c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d05a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7c:	e062      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f000 fb5d 	bl	800734c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
      break;
 8006caa:	e04f      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f000 fb46 	bl	800734c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cce:	609a      	str	r2, [r3, #8]
      break;
 8006cd0:	e03c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6818      	ldr	r0, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f000 faba 	bl	8007258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2150      	movs	r1, #80	; 0x50
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fb13 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006cf0:	e02c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 fad9 	bl	80072b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2160      	movs	r1, #96	; 0x60
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fb03 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006d10:	e01c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 fa9a 	bl	8007258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 faf3 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006d30:	e00c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 faea 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006d42:	e003      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e000      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a40      	ldr	r2, [pc, #256]	; (8006ecc <TIM_Base_SetConfig+0x114>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d013      	beq.n	8006df8 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd6:	d00f      	beq.n	8006df8 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3d      	ldr	r2, [pc, #244]	; (8006ed0 <TIM_Base_SetConfig+0x118>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00b      	beq.n	8006df8 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3c      	ldr	r2, [pc, #240]	; (8006ed4 <TIM_Base_SetConfig+0x11c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d007      	beq.n	8006df8 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3b      	ldr	r2, [pc, #236]	; (8006ed8 <TIM_Base_SetConfig+0x120>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a3a      	ldr	r2, [pc, #232]	; (8006edc <TIM_Base_SetConfig+0x124>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d108      	bne.n	8006e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a2f      	ldr	r2, [pc, #188]	; (8006ecc <TIM_Base_SetConfig+0x114>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02b      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d027      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <TIM_Base_SetConfig+0x118>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d023      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2b      	ldr	r2, [pc, #172]	; (8006ed4 <TIM_Base_SetConfig+0x11c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01f      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <TIM_Base_SetConfig+0x120>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01b      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a29      	ldr	r2, [pc, #164]	; (8006edc <TIM_Base_SetConfig+0x124>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d017      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <TIM_Base_SetConfig+0x128>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <TIM_Base_SetConfig+0x12c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00f      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a26      	ldr	r2, [pc, #152]	; (8006ee8 <TIM_Base_SetConfig+0x130>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a25      	ldr	r2, [pc, #148]	; (8006eec <TIM_Base_SetConfig+0x134>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d007      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <TIM_Base_SetConfig+0x138>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d003      	beq.n	8006e6a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a23      	ldr	r2, [pc, #140]	; (8006ef4 <TIM_Base_SetConfig+0x13c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d108      	bne.n	8006e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <TIM_Base_SetConfig+0x114>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0xf8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a0c      	ldr	r2, [pc, #48]	; (8006edc <TIM_Base_SetConfig+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d103      	bne.n	8006eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	615a      	str	r2, [r3, #20]
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	40000400 	.word	0x40000400
 8006ed4:	40000800 	.word	0x40000800
 8006ed8:	40000c00 	.word	0x40000c00
 8006edc:	40010400 	.word	0x40010400
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800
 8006eec:	40001800 	.word	0x40001800
 8006ef0:	40001c00 	.word	0x40001c00
 8006ef4:	40002000 	.word	0x40002000

08006ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0201 	bic.w	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f023 0302 	bic.w	r3, r3, #2
 8006f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <TIM_OC1_SetConfig+0xd8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d003      	beq.n	8006f5c <TIM_OC1_SetConfig+0x64>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <TIM_OC1_SetConfig+0xdc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10c      	bne.n	8006f76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0308 	bic.w	r3, r3, #8
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f023 0304 	bic.w	r3, r3, #4
 8006f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <TIM_OC1_SetConfig+0xd8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_OC1_SetConfig+0x8e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <TIM_OC1_SetConfig+0xdc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d111      	bne.n	8006faa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400

08006fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0210 	bic.w	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0320 	bic.w	r3, r3, #32
 8007022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a22      	ldr	r2, [pc, #136]	; (80070bc <TIM_OC2_SetConfig+0xe4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC2_SetConfig+0x68>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a21      	ldr	r2, [pc, #132]	; (80070c0 <TIM_OC2_SetConfig+0xe8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10d      	bne.n	800705c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a17      	ldr	r2, [pc, #92]	; (80070bc <TIM_OC2_SetConfig+0xe4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC2_SetConfig+0x94>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <TIM_OC2_SetConfig+0xe8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d113      	bne.n	8007094 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800707a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40010400 	.word	0x40010400

080070c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800710c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <TIM_OC3_SetConfig+0xe0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_OC3_SetConfig+0x66>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a20      	ldr	r2, [pc, #128]	; (80071a8 <TIM_OC3_SetConfig+0xe4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d10d      	bne.n	8007146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <TIM_OC3_SetConfig+0xe0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC3_SetConfig+0x92>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <TIM_OC3_SetConfig+0xe4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d113      	bne.n	800717e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800715c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	621a      	str	r2, [r3, #32]
}
 8007198:	bf00      	nop
 800719a:	371c      	adds	r7, #28
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40010400 	.word	0x40010400

080071ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	031b      	lsls	r3, r3, #12
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a12      	ldr	r2, [pc, #72]	; (8007250 <TIM_OC4_SetConfig+0xa4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_OC4_SetConfig+0x68>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a11      	ldr	r2, [pc, #68]	; (8007254 <TIM_OC4_SetConfig+0xa8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d109      	bne.n	8007228 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800721a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40010000 	.word	0x40010000
 8007254:	40010400 	.word	0x40010400

08007258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 030a 	bic.w	r3, r3, #10
 8007294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0210 	bic.w	r2, r3, #16
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	031b      	lsls	r3, r3, #12
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	f043 0307 	orr.w	r3, r3, #7
 8007338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	431a      	orrs	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4313      	orrs	r3, r2
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	609a      	str	r2, [r3, #8]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2201      	movs	r2, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	401a      	ands	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	431a      	orrs	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e05a      	b.n	80074a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d022      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d01d      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1d      	ldr	r2, [pc, #116]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d018      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1b      	ldr	r2, [pc, #108]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1a      	ldr	r2, [pc, #104]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00e      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d009      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d004      	beq.n	800747a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d10c      	bne.n	8007494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4313      	orrs	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40010400 	.word	0x40010400
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40001800 	.word	0x40001800

080074d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e03d      	b.n	8007568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e03f      	b.n	800762e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fd f8f2 	bl	80047ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 ff43 	bl	800846c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08c      	sub	sp, #48	; 0x30
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b20      	cmp	r3, #32
 8007650:	d165      	bne.n	800771e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_UART_Transmit_DMA+0x26>
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e05e      	b.n	8007720 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_UART_Transmit_DMA+0x38>
 800766c:	2302      	movs	r3, #2
 800766e:	e057      	b.n	8007720 <HAL_UART_Transmit_DMA+0xe8>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	88fa      	ldrh	r2, [r7, #6]
 8007682:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2221      	movs	r2, #33	; 0x21
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_UART_Transmit_DMA+0xf0>)
 800769e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	4a21      	ldr	r2, [pc, #132]	; (800772c <HAL_UART_Transmit_DMA+0xf4>)
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	4a20      	ldr	r2, [pc, #128]	; (8007730 <HAL_UART_Transmit_DMA+0xf8>)
 80076ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b4:	2200      	movs	r2, #0
 80076b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80076b8:	f107 0308 	add.w	r3, r7, #8
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	6819      	ldr	r1, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3304      	adds	r3, #4
 80076cc:	461a      	mov	r2, r3
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	f7fd fc40 	bl	8004f54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	617b      	str	r3, [r7, #20]
   return(result);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007706:	627a      	str	r2, [r7, #36]	; 0x24
 8007708:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6a39      	ldr	r1, [r7, #32]
 800770c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	61fb      	str	r3, [r7, #28]
   return(result);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	; 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	08007d05 	.word	0x08007d05
 800772c:	08007d9f 	.word	0x08007d9f
 8007730:	08007f17 	.word	0x08007f17

08007734 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b20      	cmp	r3, #32
 800774c:	d11d      	bne.n	800778a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_UART_Receive_DMA+0x26>
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e016      	b.n	800778c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_UART_Receive_DMA+0x38>
 8007768:	2302      	movs	r3, #2
 800776a:	e00f      	b.n	800778c <HAL_UART_Receive_DMA+0x58>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	461a      	mov	r2, r3
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fc13 	bl	8007fac <UART_Start_Receive_DMA>
 8007786:	4603      	mov	r3, r0
 8007788:	e000      	b.n	800778c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0ba      	sub	sp, #232	; 0xe8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <HAL_UART_IRQHandler+0x66>
 80077e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fd7f 	bl	80082f6 <UART_Receive_IT>
      return;
 80077f8:	e256      	b.n	8007ca8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80de 	beq.w	80079c0 <HAL_UART_IRQHandler+0x22c>
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80d1 	beq.w	80079c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_UART_IRQHandler+0xae>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	f043 0201 	orr.w	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <HAL_UART_IRQHandler+0xd2>
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f043 0202 	orr.w	r2, r3, #2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <HAL_UART_IRQHandler+0xf6>
 8007872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f043 0204 	orr.w	r2, r3, #4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800788a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d011      	beq.n	80078ba <HAL_UART_IRQHandler+0x126>
 8007896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d105      	bne.n	80078ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f043 0208 	orr.w	r2, r3, #8
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 81ed 	beq.w	8007c9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <HAL_UART_IRQHandler+0x14e>
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fd0a 	bl	80082f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <HAL_UART_IRQHandler+0x17a>
 8007906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04f      	beq.n	80079ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc12 	bl	8008138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b40      	cmp	r3, #64	; 0x40
 8007920:	d141      	bne.n	80079a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3314      	adds	r3, #20
 8007928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800793c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3314      	adds	r3, #20
 800794a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800794e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800795a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1d9      	bne.n	8007922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	d013      	beq.n	800799e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	4a7d      	ldr	r2, [pc, #500]	; (8007b70 <HAL_UART_IRQHandler+0x3dc>)
 800797c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	4618      	mov	r0, r3
 8007984:	f7fd fbae 	bl	80050e4 <HAL_DMA_Abort_IT>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799c:	e00e      	b.n	80079bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f99a 	bl	8007cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	e00a      	b.n	80079bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f996 	bl	8007cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	e006      	b.n	80079bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f992 	bl	8007cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079ba:	e170      	b.n	8007c9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	bf00      	nop
    return;
 80079be:	e16e      	b.n	8007c9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f040 814a 	bne.w	8007c5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8143 	beq.w	8007c5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 813c 	beq.w	8007c5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60bb      	str	r3, [r7, #8]
 80079fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a06:	2b40      	cmp	r3, #64	; 0x40
 8007a08:	f040 80b4 	bne.w	8007b74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8140 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f080 8139 	bcs.w	8007ca2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	f000 8088 	beq.w	8007b56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1d9      	bne.n	8007a46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3314      	adds	r3, #20
 8007a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e1      	bne.n	8007a92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3314      	adds	r3, #20
 8007ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3314      	adds	r3, #20
 8007aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e3      	bne.n	8007ace <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b38:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e3      	bne.n	8007b14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fd fa57 	bl	8005004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8c0 	bl	8007cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b6c:	e099      	b.n	8007ca2 <HAL_UART_IRQHandler+0x50e>
 8007b6e:	bf00      	nop
 8007b70:	080081ff 	.word	0x080081ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 808b 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8086 	beq.w	8007ca6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e3      	bne.n	8007b9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	623b      	str	r3, [r7, #32]
   return(result);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e3      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0310 	bic.w	r3, r3, #16
 8007c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c3c:	61fa      	str	r2, [r7, #28]
 8007c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	617b      	str	r3, [r7, #20]
   return(result);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e3      	bne.n	8007c18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f848 	bl	8007cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c5c:	e023      	b.n	8007ca6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <HAL_UART_IRQHandler+0x4ea>
 8007c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fad5 	bl	8008226 <UART_Transmit_IT>
    return;
 8007c7c:	e014      	b.n	8007ca8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x514>
 8007c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb15 	bl	80082c6 <UART_EndTransmit_IT>
    return;
 8007c9c:	e004      	b.n	8007ca8 <HAL_UART_IRQHandler+0x514>
    return;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ca6:	bf00      	nop
  }
}
 8007ca8:	37e8      	adds	r7, #232	; 0xe8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop

08007cb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b090      	sub	sp, #64	; 0x40
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d137      	bne.n	8007d90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d22:	2200      	movs	r2, #0
 8007d24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	623b      	str	r3, [r7, #32]
   return(result);
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d46:	633a      	str	r2, [r7, #48]	; 0x30
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d7a:	61fa      	str	r2, [r7, #28]
 8007d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	617b      	str	r3, [r7, #20]
   return(result);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d8e:	e002      	b.n	8007d96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d92:	f7fb fba1 	bl	80034d8 <HAL_UART_TxCpltCallback>
}
 8007d96:	bf00      	nop
 8007d98:	3740      	adds	r7, #64	; 0x40
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff7f 	bl	8007cb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b09c      	sub	sp, #112	; 0x70
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d172      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	f023 0301 	bic.w	r3, r3, #1
 8007e26:	667b      	str	r3, [r7, #100]	; 0x64
 8007e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e30:	647a      	str	r2, [r7, #68]	; 0x44
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e5      	bne.n	8007e10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3314      	adds	r3, #20
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	623b      	str	r3, [r7, #32]
   return(result);
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8007e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e64:	633a      	str	r2, [r7, #48]	; 0x30
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e5      	bne.n	8007e44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d119      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0310 	bic.w	r3, r3, #16
 8007e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e5      	bne.n	8007e88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d106      	bne.n	8007ed2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ecc:	f7ff ff0e 	bl	8007cec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ed0:	e002      	b.n	8007ed8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007ed2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ed4:	f7fb fb12 	bl	80034fc <HAL_UART_RxCpltCallback>
}
 8007ed8:	bf00      	nop
 8007eda:	3770      	adds	r7, #112	; 0x70
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d108      	bne.n	8007f08 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fef3 	bl	8007cec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f06:	e002      	b.n	8007f0e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff fedb 	bl	8007cc4 <HAL_UART_RxHalfCpltCallback>
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b21      	cmp	r3, #33	; 0x21
 8007f48:	d108      	bne.n	8007f5c <UART_DMAError+0x46>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f56:	68b8      	ldr	r0, [r7, #8]
 8007f58:	f000 f8c6 	bl	80080e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	bf0c      	ite	eq
 8007f6a:	2301      	moveq	r3, #1
 8007f6c:	2300      	movne	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b22      	cmp	r3, #34	; 0x22
 8007f7c:	d108      	bne.n	8007f90 <UART_DMAError+0x7a>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f8a:	68b8      	ldr	r0, [r7, #8]
 8007f8c:	f000 f8d4 	bl	8008138 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f043 0210 	orr.w	r2, r3, #16
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f7ff fe9b 	bl	8007cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b098      	sub	sp, #96	; 0x60
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2222      	movs	r2, #34	; 0x22
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	4a40      	ldr	r2, [pc, #256]	; (80080dc <UART_Start_Receive_DMA+0x130>)
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	4a3f      	ldr	r2, [pc, #252]	; (80080e0 <UART_Start_Receive_DMA+0x134>)
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	4a3e      	ldr	r2, [pc, #248]	; (80080e4 <UART_Start_Receive_DMA+0x138>)
 8007fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ff4:	f107 0308 	add.w	r3, r7, #8
 8007ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	f7fc ffa2 	bl	8004f54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d019      	beq.n	800806a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804c:	65bb      	str	r3, [r7, #88]	; 0x58
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008056:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008058:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800805c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3314      	adds	r3, #20
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	657b      	str	r3, [r7, #84]	; 0x54
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3314      	adds	r3, #20
 8008088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800808a:	63ba      	str	r2, [r7, #56]	; 0x38
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3314      	adds	r3, #20
 80080a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	617b      	str	r3, [r7, #20]
   return(result);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b4:	653b      	str	r3, [r7, #80]	; 0x50
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3314      	adds	r3, #20
 80080bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080be:	627a      	str	r2, [r7, #36]	; 0x24
 80080c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6a39      	ldr	r1, [r7, #32]
 80080c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3760      	adds	r7, #96	; 0x60
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	08007dbb 	.word	0x08007dbb
 80080e0:	08007ee1 	.word	0x08007ee1
 80080e4:	08007f17 	.word	0x08007f17

080080e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	; 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	61ba      	str	r2, [r7, #24]
 8008112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6979      	ldr	r1, [r7, #20]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	613b      	str	r3, [r7, #16]
   return(result);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800812c:	bf00      	nop
 800812e:	3724      	adds	r7, #36	; 0x24
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b095      	sub	sp, #84	; 0x54
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	330c      	adds	r3, #12
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	330c      	adds	r3, #12
 800815e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008160:	643a      	str	r2, [r7, #64]	; 0x40
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e5      	bne.n	8008140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3314      	adds	r3, #20
 800817a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	61fb      	str	r3, [r7, #28]
   return(result);
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	64bb      	str	r3, [r7, #72]	; 0x48
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3314      	adds	r3, #20
 8008192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800819a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e5      	bne.n	8008174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d119      	bne.n	80081e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	330c      	adds	r3, #12
 80081b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0310 	bic.w	r3, r3, #16
 80081c6:	647b      	str	r3, [r7, #68]	; 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d0:	61ba      	str	r2, [r7, #24]
 80081d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6979      	ldr	r1, [r7, #20]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	613b      	str	r3, [r7, #16]
   return(result);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081f2:	bf00      	nop
 80081f4:	3754      	adds	r7, #84	; 0x54
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff fd5d 	bl	8007cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b21      	cmp	r3, #33	; 0x21
 8008238:	d13e      	bne.n	80082b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d114      	bne.n	800826e <UART_Transmit_IT+0x48>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d110      	bne.n	800826e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008260:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	1c9a      	adds	r2, r3, #2
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]
 800826c:	e008      	b.n	8008280 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	1c59      	adds	r1, r3, #1
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6211      	str	r1, [r2, #32]
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008284:	b29b      	uxth	r3, r3
 8008286:	3b01      	subs	r3, #1
 8008288:	b29b      	uxth	r3, r3
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10f      	bne.n	80082b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e000      	b.n	80082ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082b8:	2302      	movs	r3, #2
  }
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fb f8f6 	bl	80034d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b08c      	sub	sp, #48	; 0x30
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b22      	cmp	r3, #34	; 0x22
 8008308:	f040 80ab 	bne.w	8008462 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008314:	d117      	bne.n	8008346 <UART_Receive_IT+0x50>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d113      	bne.n	8008346 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008334:	b29a      	uxth	r2, r3
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	629a      	str	r2, [r3, #40]	; 0x28
 8008344:	e026      	b.n	8008394 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	d007      	beq.n	800836a <UART_Receive_IT+0x74>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <UART_Receive_IT+0x82>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e008      	b.n	800838a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008384:	b2da      	uxtb	r2, r3
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4619      	mov	r1, r3
 80083a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d15a      	bne.n	800845e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0220 	bic.w	r2, r2, #32
 80083b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d135      	bne.n	8008454 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f023 0310 	bic.w	r3, r3, #16
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	330c      	adds	r3, #12
 800840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840e:	623a      	str	r2, [r7, #32]
 8008410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	61bb      	str	r3, [r7, #24]
   return(result);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d10a      	bne.n	8008446 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fc4d 	bl	8007cec <HAL_UARTEx_RxEventCallback>
 8008452:	e002      	b.n	800845a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fb f851 	bl	80034fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e002      	b.n	8008464 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008462:	2302      	movs	r3, #2
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3730      	adds	r7, #48	; 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800846c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008470:	b0c0      	sub	sp, #256	; 0x100
 8008472:	af00      	add	r7, sp, #0
 8008474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	68d9      	ldr	r1, [r3, #12]
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	ea40 0301 	orr.w	r3, r0, r1
 8008494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084c4:	f021 010c 	bic.w	r1, r1, #12
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084d2:	430b      	orrs	r3, r1
 80084d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	6999      	ldr	r1, [r3, #24]
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	ea40 0301 	orr.w	r3, r0, r1
 80084f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b8f      	ldr	r3, [pc, #572]	; (8008738 <UART_SetConfig+0x2cc>)
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d005      	beq.n	800850c <UART_SetConfig+0xa0>
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b8d      	ldr	r3, [pc, #564]	; (800873c <UART_SetConfig+0x2d0>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d104      	bne.n	8008516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800850c:	f7fd fe70 	bl	80061f0 <HAL_RCC_GetPCLK2Freq>
 8008510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008514:	e003      	b.n	800851e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008516:	f7fd fe57 	bl	80061c8 <HAL_RCC_GetPCLK1Freq>
 800851a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008528:	f040 810c 	bne.w	8008744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800852c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008530:	2200      	movs	r2, #0
 8008532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800853a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800853e:	4622      	mov	r2, r4
 8008540:	462b      	mov	r3, r5
 8008542:	1891      	adds	r1, r2, r2
 8008544:	65b9      	str	r1, [r7, #88]	; 0x58
 8008546:	415b      	adcs	r3, r3
 8008548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800854a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800854e:	4621      	mov	r1, r4
 8008550:	eb12 0801 	adds.w	r8, r2, r1
 8008554:	4629      	mov	r1, r5
 8008556:	eb43 0901 	adc.w	r9, r3, r1
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800856a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800856e:	4690      	mov	r8, r2
 8008570:	4699      	mov	r9, r3
 8008572:	4623      	mov	r3, r4
 8008574:	eb18 0303 	adds.w	r3, r8, r3
 8008578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800857c:	462b      	mov	r3, r5
 800857e:	eb49 0303 	adc.w	r3, r9, r3
 8008582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800859a:	460b      	mov	r3, r1
 800859c:	18db      	adds	r3, r3, r3
 800859e:	653b      	str	r3, [r7, #80]	; 0x50
 80085a0:	4613      	mov	r3, r2
 80085a2:	eb42 0303 	adc.w	r3, r2, r3
 80085a6:	657b      	str	r3, [r7, #84]	; 0x54
 80085a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085b0:	f7f8 face 	bl	8000b50 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b61      	ldr	r3, [pc, #388]	; (8008740 <UART_SetConfig+0x2d4>)
 80085ba:	fba3 2302 	umull	r2, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	011c      	lsls	r4, r3, #4
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	1891      	adds	r1, r2, r2
 80085da:	64b9      	str	r1, [r7, #72]	; 0x48
 80085dc:	415b      	adcs	r3, r3
 80085de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085e4:	4641      	mov	r1, r8
 80085e6:	eb12 0a01 	adds.w	sl, r2, r1
 80085ea:	4649      	mov	r1, r9
 80085ec:	eb43 0b01 	adc.w	fp, r3, r1
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008604:	4692      	mov	sl, r2
 8008606:	469b      	mov	fp, r3
 8008608:	4643      	mov	r3, r8
 800860a:	eb1a 0303 	adds.w	r3, sl, r3
 800860e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008612:	464b      	mov	r3, r9
 8008614:	eb4b 0303 	adc.w	r3, fp, r3
 8008618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800862c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008630:	460b      	mov	r3, r1
 8008632:	18db      	adds	r3, r3, r3
 8008634:	643b      	str	r3, [r7, #64]	; 0x40
 8008636:	4613      	mov	r3, r2
 8008638:	eb42 0303 	adc.w	r3, r2, r3
 800863c:	647b      	str	r3, [r7, #68]	; 0x44
 800863e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008646:	f7f8 fa83 	bl	8000b50 <__aeabi_uldivmod>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4611      	mov	r1, r2
 8008650:	4b3b      	ldr	r3, [pc, #236]	; (8008740 <UART_SetConfig+0x2d4>)
 8008652:	fba3 2301 	umull	r2, r3, r3, r1
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	2264      	movs	r2, #100	; 0x64
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	1acb      	subs	r3, r1, r3
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008666:	4b36      	ldr	r3, [pc, #216]	; (8008740 <UART_SetConfig+0x2d4>)
 8008668:	fba3 2302 	umull	r2, r3, r3, r2
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008674:	441c      	add	r4, r3
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	1891      	adds	r1, r2, r2
 800868e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008690:	415b      	adcs	r3, r3
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008698:	4641      	mov	r1, r8
 800869a:	1851      	adds	r1, r2, r1
 800869c:	6339      	str	r1, [r7, #48]	; 0x30
 800869e:	4649      	mov	r1, r9
 80086a0:	414b      	adcs	r3, r1
 80086a2:	637b      	str	r3, [r7, #52]	; 0x34
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086b0:	4659      	mov	r1, fp
 80086b2:	00cb      	lsls	r3, r1, #3
 80086b4:	4651      	mov	r1, sl
 80086b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ba:	4651      	mov	r1, sl
 80086bc:	00ca      	lsls	r2, r1, #3
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	4642      	mov	r2, r8
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086cc:	464b      	mov	r3, r9
 80086ce:	460a      	mov	r2, r1
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086ec:	460b      	mov	r3, r1
 80086ee:	18db      	adds	r3, r3, r3
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f2:	4613      	mov	r3, r2
 80086f4:	eb42 0303 	adc.w	r3, r2, r3
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008702:	f7f8 fa25 	bl	8000b50 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <UART_SetConfig+0x2d4>)
 800870c:	fba3 1302 	umull	r1, r3, r3, r2
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	2164      	movs	r1, #100	; 0x64
 8008714:	fb01 f303 	mul.w	r3, r1, r3
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	3332      	adds	r3, #50	; 0x32
 800871e:	4a08      	ldr	r2, [pc, #32]	; (8008740 <UART_SetConfig+0x2d4>)
 8008720:	fba2 2303 	umull	r2, r3, r2, r3
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	f003 0207 	and.w	r2, r3, #7
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4422      	add	r2, r4
 8008732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008734:	e106      	b.n	8008944 <UART_SetConfig+0x4d8>
 8008736:	bf00      	nop
 8008738:	40011000 	.word	0x40011000
 800873c:	40011400 	.word	0x40011400
 8008740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008748:	2200      	movs	r2, #0
 800874a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800874e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008756:	4642      	mov	r2, r8
 8008758:	464b      	mov	r3, r9
 800875a:	1891      	adds	r1, r2, r2
 800875c:	6239      	str	r1, [r7, #32]
 800875e:	415b      	adcs	r3, r3
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
 8008762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008766:	4641      	mov	r1, r8
 8008768:	1854      	adds	r4, r2, r1
 800876a:	4649      	mov	r1, r9
 800876c:	eb43 0501 	adc.w	r5, r3, r1
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	00eb      	lsls	r3, r5, #3
 800877a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800877e:	00e2      	lsls	r2, r4, #3
 8008780:	4614      	mov	r4, r2
 8008782:	461d      	mov	r5, r3
 8008784:	4643      	mov	r3, r8
 8008786:	18e3      	adds	r3, r4, r3
 8008788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800878c:	464b      	mov	r3, r9
 800878e:	eb45 0303 	adc.w	r3, r5, r3
 8008792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087b2:	4629      	mov	r1, r5
 80087b4:	008b      	lsls	r3, r1, #2
 80087b6:	4621      	mov	r1, r4
 80087b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087bc:	4621      	mov	r1, r4
 80087be:	008a      	lsls	r2, r1, #2
 80087c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087c4:	f7f8 f9c4 	bl	8000b50 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4b60      	ldr	r3, [pc, #384]	; (8008950 <UART_SetConfig+0x4e4>)
 80087ce:	fba3 2302 	umull	r2, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	011c      	lsls	r4, r3, #4
 80087d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	1891      	adds	r1, r2, r2
 80087ee:	61b9      	str	r1, [r7, #24]
 80087f0:	415b      	adcs	r3, r3
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f8:	4641      	mov	r1, r8
 80087fa:	1851      	adds	r1, r2, r1
 80087fc:	6139      	str	r1, [r7, #16]
 80087fe:	4649      	mov	r1, r9
 8008800:	414b      	adcs	r3, r1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008810:	4659      	mov	r1, fp
 8008812:	00cb      	lsls	r3, r1, #3
 8008814:	4651      	mov	r1, sl
 8008816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800881a:	4651      	mov	r1, sl
 800881c:	00ca      	lsls	r2, r1, #3
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	4603      	mov	r3, r0
 8008824:	4642      	mov	r2, r8
 8008826:	189b      	adds	r3, r3, r2
 8008828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800882c:	464b      	mov	r3, r9
 800882e:	460a      	mov	r2, r1
 8008830:	eb42 0303 	adc.w	r3, r2, r3
 8008834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	67bb      	str	r3, [r7, #120]	; 0x78
 8008842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008844:	f04f 0200 	mov.w	r2, #0
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008850:	4649      	mov	r1, r9
 8008852:	008b      	lsls	r3, r1, #2
 8008854:	4641      	mov	r1, r8
 8008856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800885a:	4641      	mov	r1, r8
 800885c:	008a      	lsls	r2, r1, #2
 800885e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008862:	f7f8 f975 	bl	8000b50 <__aeabi_uldivmod>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4611      	mov	r1, r2
 800886c:	4b38      	ldr	r3, [pc, #224]	; (8008950 <UART_SetConfig+0x4e4>)
 800886e:	fba3 2301 	umull	r2, r3, r3, r1
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	2264      	movs	r2, #100	; 0x64
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	1acb      	subs	r3, r1, r3
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	3332      	adds	r3, #50	; 0x32
 8008880:	4a33      	ldr	r2, [pc, #204]	; (8008950 <UART_SetConfig+0x4e4>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800888c:	441c      	add	r4, r3
 800888e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008892:	2200      	movs	r2, #0
 8008894:	673b      	str	r3, [r7, #112]	; 0x70
 8008896:	677a      	str	r2, [r7, #116]	; 0x74
 8008898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800889c:	4642      	mov	r2, r8
 800889e:	464b      	mov	r3, r9
 80088a0:	1891      	adds	r1, r2, r2
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	415b      	adcs	r3, r3
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ac:	4641      	mov	r1, r8
 80088ae:	1851      	adds	r1, r2, r1
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	4649      	mov	r1, r9
 80088b4:	414b      	adcs	r3, r1
 80088b6:	607b      	str	r3, [r7, #4]
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088c4:	4659      	mov	r1, fp
 80088c6:	00cb      	lsls	r3, r1, #3
 80088c8:	4651      	mov	r1, sl
 80088ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ce:	4651      	mov	r1, sl
 80088d0:	00ca      	lsls	r2, r1, #3
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	4642      	mov	r2, r8
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80088de:	464b      	mov	r3, r9
 80088e0:	460a      	mov	r2, r1
 80088e2:	eb42 0303 	adc.w	r3, r2, r3
 80088e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	663b      	str	r3, [r7, #96]	; 0x60
 80088f2:	667a      	str	r2, [r7, #100]	; 0x64
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008900:	4649      	mov	r1, r9
 8008902:	008b      	lsls	r3, r1, #2
 8008904:	4641      	mov	r1, r8
 8008906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800890a:	4641      	mov	r1, r8
 800890c:	008a      	lsls	r2, r1, #2
 800890e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008912:	f7f8 f91d 	bl	8000b50 <__aeabi_uldivmod>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <UART_SetConfig+0x4e4>)
 800891c:	fba3 1302 	umull	r1, r3, r3, r2
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	2164      	movs	r1, #100	; 0x64
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	3332      	adds	r3, #50	; 0x32
 800892e:	4a08      	ldr	r2, [pc, #32]	; (8008950 <UART_SetConfig+0x4e4>)
 8008930:	fba2 2303 	umull	r2, r3, r2, r3
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	f003 020f 	and.w	r2, r3, #15
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4422      	add	r2, r4
 8008942:	609a      	str	r2, [r3, #8]
}
 8008944:	bf00      	nop
 8008946:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800894a:	46bd      	mov	sp, r7
 800894c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008950:	51eb851f 	.word	0x51eb851f

08008954 <sqrt>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	ed2d 8b02 	vpush	{d8}
 800895a:	ec55 4b10 	vmov	r4, r5, d0
 800895e:	f000 f825 	bl	80089ac <__ieee754_sqrt>
 8008962:	4622      	mov	r2, r4
 8008964:	462b      	mov	r3, r5
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	eeb0 8a40 	vmov.f32	s16, s0
 800896e:	eef0 8a60 	vmov.f32	s17, s1
 8008972:	f7f8 f887 	bl	8000a84 <__aeabi_dcmpun>
 8008976:	b990      	cbnz	r0, 800899e <sqrt+0x4a>
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f8 f858 	bl	8000a34 <__aeabi_dcmplt>
 8008984:	b158      	cbz	r0, 800899e <sqrt+0x4a>
 8008986:	f000 f92b 	bl	8008be0 <__errno>
 800898a:	2321      	movs	r3, #33	; 0x21
 800898c:	6003      	str	r3, [r0, #0]
 800898e:	2200      	movs	r2, #0
 8008990:	2300      	movs	r3, #0
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	f7f7 ff05 	bl	80007a4 <__aeabi_ddiv>
 800899a:	ec41 0b18 	vmov	d8, r0, r1
 800899e:	eeb0 0a48 	vmov.f32	s0, s16
 80089a2:	eef0 0a68 	vmov.f32	s1, s17
 80089a6:	ecbd 8b02 	vpop	{d8}
 80089aa:	bd38      	pop	{r3, r4, r5, pc}

080089ac <__ieee754_sqrt>:
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	ec55 4b10 	vmov	r4, r5, d0
 80089b4:	4e67      	ldr	r6, [pc, #412]	; (8008b54 <__ieee754_sqrt+0x1a8>)
 80089b6:	43ae      	bics	r6, r5
 80089b8:	ee10 0a10 	vmov	r0, s0
 80089bc:	ee10 2a10 	vmov	r2, s0
 80089c0:	4629      	mov	r1, r5
 80089c2:	462b      	mov	r3, r5
 80089c4:	d10d      	bne.n	80089e2 <__ieee754_sqrt+0x36>
 80089c6:	f7f7 fdc3 	bl	8000550 <__aeabi_dmul>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 fc07 	bl	80001e4 <__adddf3>
 80089d6:	4604      	mov	r4, r0
 80089d8:	460d      	mov	r5, r1
 80089da:	ec45 4b10 	vmov	d0, r4, r5
 80089de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	dc0b      	bgt.n	80089fe <__ieee754_sqrt+0x52>
 80089e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80089ea:	4326      	orrs	r6, r4
 80089ec:	d0f5      	beq.n	80089da <__ieee754_sqrt+0x2e>
 80089ee:	b135      	cbz	r5, 80089fe <__ieee754_sqrt+0x52>
 80089f0:	f7f7 fbf6 	bl	80001e0 <__aeabi_dsub>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	f7f7 fed4 	bl	80007a4 <__aeabi_ddiv>
 80089fc:	e7eb      	b.n	80089d6 <__ieee754_sqrt+0x2a>
 80089fe:	1509      	asrs	r1, r1, #20
 8008a00:	f000 808d 	beq.w	8008b1e <__ieee754_sqrt+0x172>
 8008a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a10:	07c9      	lsls	r1, r1, #31
 8008a12:	bf5c      	itt	pl
 8008a14:	005b      	lslpl	r3, r3, #1
 8008a16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a1e:	bf58      	it	pl
 8008a20:	0052      	lslpl	r2, r2, #1
 8008a22:	2500      	movs	r5, #0
 8008a24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a28:	1076      	asrs	r6, r6, #1
 8008a2a:	0052      	lsls	r2, r2, #1
 8008a2c:	f04f 0e16 	mov.w	lr, #22
 8008a30:	46ac      	mov	ip, r5
 8008a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a36:	eb0c 0001 	add.w	r0, ip, r1
 8008a3a:	4298      	cmp	r0, r3
 8008a3c:	bfde      	ittt	le
 8008a3e:	1a1b      	suble	r3, r3, r0
 8008a40:	eb00 0c01 	addle.w	ip, r0, r1
 8008a44:	186d      	addle	r5, r5, r1
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	f1be 0e01 	subs.w	lr, lr, #1
 8008a4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a58:	d1ed      	bne.n	8008a36 <__ieee754_sqrt+0x8a>
 8008a5a:	4674      	mov	r4, lr
 8008a5c:	2720      	movs	r7, #32
 8008a5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a62:	4563      	cmp	r3, ip
 8008a64:	eb01 000e 	add.w	r0, r1, lr
 8008a68:	dc02      	bgt.n	8008a70 <__ieee754_sqrt+0xc4>
 8008a6a:	d113      	bne.n	8008a94 <__ieee754_sqrt+0xe8>
 8008a6c:	4290      	cmp	r0, r2
 8008a6e:	d811      	bhi.n	8008a94 <__ieee754_sqrt+0xe8>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	eb00 0e01 	add.w	lr, r0, r1
 8008a76:	da57      	bge.n	8008b28 <__ieee754_sqrt+0x17c>
 8008a78:	f1be 0f00 	cmp.w	lr, #0
 8008a7c:	db54      	blt.n	8008b28 <__ieee754_sqrt+0x17c>
 8008a7e:	f10c 0801 	add.w	r8, ip, #1
 8008a82:	eba3 030c 	sub.w	r3, r3, ip
 8008a86:	4290      	cmp	r0, r2
 8008a88:	bf88      	it	hi
 8008a8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a8e:	1a12      	subs	r2, r2, r0
 8008a90:	440c      	add	r4, r1
 8008a92:	46c4      	mov	ip, r8
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	3f01      	subs	r7, #1
 8008a98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008a9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008aa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008aa4:	d1dd      	bne.n	8008a62 <__ieee754_sqrt+0xb6>
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	d01b      	beq.n	8008ae2 <__ieee754_sqrt+0x136>
 8008aaa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008b58 <__ieee754_sqrt+0x1ac>
 8008aae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008b5c <__ieee754_sqrt+0x1b0>
 8008ab2:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ab6:	e9db 2300 	ldrd	r2, r3, [fp]
 8008aba:	f7f7 fb91 	bl	80001e0 <__aeabi_dsub>
 8008abe:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4649      	mov	r1, r9
 8008aca:	f7f7 ffbd 	bl	8000a48 <__aeabi_dcmple>
 8008ace:	b140      	cbz	r0, 8008ae2 <__ieee754_sqrt+0x136>
 8008ad0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008ad4:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ad8:	e9db 2300 	ldrd	r2, r3, [fp]
 8008adc:	d126      	bne.n	8008b2c <__ieee754_sqrt+0x180>
 8008ade:	3501      	adds	r5, #1
 8008ae0:	463c      	mov	r4, r7
 8008ae2:	106a      	asrs	r2, r5, #1
 8008ae4:	0863      	lsrs	r3, r4, #1
 8008ae6:	07e9      	lsls	r1, r5, #31
 8008ae8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008aec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008af0:	bf48      	it	mi
 8008af2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008af6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008afa:	461c      	mov	r4, r3
 8008afc:	e76d      	b.n	80089da <__ieee754_sqrt+0x2e>
 8008afe:	0ad3      	lsrs	r3, r2, #11
 8008b00:	3815      	subs	r0, #21
 8008b02:	0552      	lsls	r2, r2, #21
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0fa      	beq.n	8008afe <__ieee754_sqrt+0x152>
 8008b08:	02dc      	lsls	r4, r3, #11
 8008b0a:	d50a      	bpl.n	8008b22 <__ieee754_sqrt+0x176>
 8008b0c:	f1c1 0420 	rsb	r4, r1, #32
 8008b10:	fa22 f404 	lsr.w	r4, r2, r4
 8008b14:	1e4d      	subs	r5, r1, #1
 8008b16:	408a      	lsls	r2, r1
 8008b18:	4323      	orrs	r3, r4
 8008b1a:	1b41      	subs	r1, r0, r5
 8008b1c:	e772      	b.n	8008a04 <__ieee754_sqrt+0x58>
 8008b1e:	4608      	mov	r0, r1
 8008b20:	e7f0      	b.n	8008b04 <__ieee754_sqrt+0x158>
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	3101      	adds	r1, #1
 8008b26:	e7ef      	b.n	8008b08 <__ieee754_sqrt+0x15c>
 8008b28:	46e0      	mov	r8, ip
 8008b2a:	e7aa      	b.n	8008a82 <__ieee754_sqrt+0xd6>
 8008b2c:	f7f7 fb5a 	bl	80001e4 <__adddf3>
 8008b30:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 ff7a 	bl	8000a34 <__aeabi_dcmplt>
 8008b40:	b120      	cbz	r0, 8008b4c <__ieee754_sqrt+0x1a0>
 8008b42:	1ca0      	adds	r0, r4, #2
 8008b44:	bf08      	it	eq
 8008b46:	3501      	addeq	r5, #1
 8008b48:	3402      	adds	r4, #2
 8008b4a:	e7ca      	b.n	8008ae2 <__ieee754_sqrt+0x136>
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	f024 0401 	bic.w	r4, r4, #1
 8008b52:	e7c6      	b.n	8008ae2 <__ieee754_sqrt+0x136>
 8008b54:	7ff00000 	.word	0x7ff00000
 8008b58:	20000048 	.word	0x20000048
 8008b5c:	20000050 	.word	0x20000050

08008b60 <realloc>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <realloc+0xc>)
 8008b62:	460a      	mov	r2, r1
 8008b64:	4601      	mov	r1, r0
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	f000 b802 	b.w	8008b70 <_realloc_r>
 8008b6c:	200000a4 	.word	0x200000a4

08008b70 <_realloc_r>:
 8008b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	4680      	mov	r8, r0
 8008b76:	4614      	mov	r4, r2
 8008b78:	460e      	mov	r6, r1
 8008b7a:	b921      	cbnz	r1, 8008b86 <_realloc_r+0x16>
 8008b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b80:	4611      	mov	r1, r2
 8008b82:	f000 b8d3 	b.w	8008d2c <_malloc_r>
 8008b86:	b92a      	cbnz	r2, 8008b94 <_realloc_r+0x24>
 8008b88:	f000 f864 	bl	8008c54 <_free_r>
 8008b8c:	4625      	mov	r5, r4
 8008b8e:	4628      	mov	r0, r5
 8008b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b94:	f000 f956 	bl	8008e44 <_malloc_usable_size_r>
 8008b98:	4284      	cmp	r4, r0
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	d802      	bhi.n	8008ba4 <_realloc_r+0x34>
 8008b9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ba2:	d812      	bhi.n	8008bca <_realloc_r+0x5a>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	f000 f8c0 	bl	8008d2c <_malloc_r>
 8008bac:	4605      	mov	r5, r0
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d0ed      	beq.n	8008b8e <_realloc_r+0x1e>
 8008bb2:	42bc      	cmp	r4, r7
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	bf28      	it	cs
 8008bba:	463a      	movcs	r2, r7
 8008bbc:	f000 f83c 	bl	8008c38 <memcpy>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f000 f846 	bl	8008c54 <_free_r>
 8008bc8:	e7e1      	b.n	8008b8e <_realloc_r+0x1e>
 8008bca:	4635      	mov	r5, r6
 8008bcc:	e7df      	b.n	8008b8e <_realloc_r+0x1e>

08008bce <memset>:
 8008bce:	4402      	add	r2, r0
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d100      	bne.n	8008bd8 <memset+0xa>
 8008bd6:	4770      	bx	lr
 8008bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008bdc:	e7f9      	b.n	8008bd2 <memset+0x4>
	...

08008be0 <__errno>:
 8008be0:	4b01      	ldr	r3, [pc, #4]	; (8008be8 <__errno+0x8>)
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	200000a4 	.word	0x200000a4

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4d0d      	ldr	r5, [pc, #52]	; (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	; (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4d0b      	ldr	r5, [pc, #44]	; (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	; (8008c30 <__libc_init_array+0x44>)
 8008c00:	f000 f938 	bl	8008e74 <_init>
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2600      	movs	r6, #0
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c14:	4798      	blx	r3
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1e:	4798      	blx	r3
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	080091d4 	.word	0x080091d4
 8008c28:	080091d4 	.word	0x080091d4
 8008c2c:	080091d4 	.word	0x080091d4
 8008c30:	080091e0 	.word	0x080091e0

08008c34 <__retarget_lock_acquire_recursive>:
 8008c34:	4770      	bx	lr

08008c36 <__retarget_lock_release_recursive>:
 8008c36:	4770      	bx	lr

08008c38 <memcpy>:
 8008c38:	440a      	add	r2, r1
 8008c3a:	4291      	cmp	r1, r2
 8008c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c40:	d100      	bne.n	8008c44 <memcpy+0xc>
 8008c42:	4770      	bx	lr
 8008c44:	b510      	push	{r4, lr}
 8008c46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c4e:	4291      	cmp	r1, r2
 8008c50:	d1f9      	bne.n	8008c46 <memcpy+0xe>
 8008c52:	bd10      	pop	{r4, pc}

08008c54 <_free_r>:
 8008c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d044      	beq.n	8008ce4 <_free_r+0x90>
 8008c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c5e:	9001      	str	r0, [sp, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f1a1 0404 	sub.w	r4, r1, #4
 8008c66:	bfb8      	it	lt
 8008c68:	18e4      	addlt	r4, r4, r3
 8008c6a:	f000 f8df 	bl	8008e2c <__malloc_lock>
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ce8 <_free_r+0x94>)
 8008c70:	9801      	ldr	r0, [sp, #4]
 8008c72:	6813      	ldr	r3, [r2, #0]
 8008c74:	b933      	cbnz	r3, 8008c84 <_free_r+0x30>
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	6014      	str	r4, [r2, #0]
 8008c7a:	b003      	add	sp, #12
 8008c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c80:	f000 b8da 	b.w	8008e38 <__malloc_unlock>
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d908      	bls.n	8008c9a <_free_r+0x46>
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	1961      	adds	r1, r4, r5
 8008c8c:	428b      	cmp	r3, r1
 8008c8e:	bf01      	itttt	eq
 8008c90:	6819      	ldreq	r1, [r3, #0]
 8008c92:	685b      	ldreq	r3, [r3, #4]
 8008c94:	1949      	addeq	r1, r1, r5
 8008c96:	6021      	streq	r1, [r4, #0]
 8008c98:	e7ed      	b.n	8008c76 <_free_r+0x22>
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b10b      	cbz	r3, 8008ca4 <_free_r+0x50>
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	d9fa      	bls.n	8008c9a <_free_r+0x46>
 8008ca4:	6811      	ldr	r1, [r2, #0]
 8008ca6:	1855      	adds	r5, r2, r1
 8008ca8:	42a5      	cmp	r5, r4
 8008caa:	d10b      	bne.n	8008cc4 <_free_r+0x70>
 8008cac:	6824      	ldr	r4, [r4, #0]
 8008cae:	4421      	add	r1, r4
 8008cb0:	1854      	adds	r4, r2, r1
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	d1e0      	bne.n	8008c7a <_free_r+0x26>
 8008cb8:	681c      	ldr	r4, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	6053      	str	r3, [r2, #4]
 8008cbe:	440c      	add	r4, r1
 8008cc0:	6014      	str	r4, [r2, #0]
 8008cc2:	e7da      	b.n	8008c7a <_free_r+0x26>
 8008cc4:	d902      	bls.n	8008ccc <_free_r+0x78>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	e7d6      	b.n	8008c7a <_free_r+0x26>
 8008ccc:	6825      	ldr	r5, [r4, #0]
 8008cce:	1961      	adds	r1, r4, r5
 8008cd0:	428b      	cmp	r3, r1
 8008cd2:	bf04      	itt	eq
 8008cd4:	6819      	ldreq	r1, [r3, #0]
 8008cd6:	685b      	ldreq	r3, [r3, #4]
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	bf04      	itt	eq
 8008cdc:	1949      	addeq	r1, r1, r5
 8008cde:	6021      	streq	r1, [r4, #0]
 8008ce0:	6054      	str	r4, [r2, #4]
 8008ce2:	e7ca      	b.n	8008c7a <_free_r+0x26>
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	20000f80 	.word	0x20000f80

08008cec <sbrk_aligned>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4e0e      	ldr	r6, [pc, #56]	; (8008d28 <sbrk_aligned+0x3c>)
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	6831      	ldr	r1, [r6, #0]
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	b911      	cbnz	r1, 8008cfe <sbrk_aligned+0x12>
 8008cf8:	f000 f8ac 	bl	8008e54 <_sbrk_r>
 8008cfc:	6030      	str	r0, [r6, #0]
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4628      	mov	r0, r5
 8008d02:	f000 f8a7 	bl	8008e54 <_sbrk_r>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d00a      	beq.n	8008d20 <sbrk_aligned+0x34>
 8008d0a:	1cc4      	adds	r4, r0, #3
 8008d0c:	f024 0403 	bic.w	r4, r4, #3
 8008d10:	42a0      	cmp	r0, r4
 8008d12:	d007      	beq.n	8008d24 <sbrk_aligned+0x38>
 8008d14:	1a21      	subs	r1, r4, r0
 8008d16:	4628      	mov	r0, r5
 8008d18:	f000 f89c 	bl	8008e54 <_sbrk_r>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d101      	bne.n	8008d24 <sbrk_aligned+0x38>
 8008d20:	f04f 34ff 	mov.w	r4, #4294967295
 8008d24:	4620      	mov	r0, r4
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	20000f84 	.word	0x20000f84

08008d2c <_malloc_r>:
 8008d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d30:	1ccd      	adds	r5, r1, #3
 8008d32:	f025 0503 	bic.w	r5, r5, #3
 8008d36:	3508      	adds	r5, #8
 8008d38:	2d0c      	cmp	r5, #12
 8008d3a:	bf38      	it	cc
 8008d3c:	250c      	movcc	r5, #12
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	4607      	mov	r7, r0
 8008d42:	db01      	blt.n	8008d48 <_malloc_r+0x1c>
 8008d44:	42a9      	cmp	r1, r5
 8008d46:	d905      	bls.n	8008d54 <_malloc_r+0x28>
 8008d48:	230c      	movs	r3, #12
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e28 <_malloc_r+0xfc>
 8008d58:	f000 f868 	bl	8008e2c <__malloc_lock>
 8008d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d60:	461c      	mov	r4, r3
 8008d62:	bb5c      	cbnz	r4, 8008dbc <_malloc_r+0x90>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7ff ffc0 	bl	8008cec <sbrk_aligned>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	4604      	mov	r4, r0
 8008d70:	d155      	bne.n	8008e1e <_malloc_r+0xf2>
 8008d72:	f8d8 4000 	ldr.w	r4, [r8]
 8008d76:	4626      	mov	r6, r4
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	d145      	bne.n	8008e08 <_malloc_r+0xdc>
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d048      	beq.n	8008e12 <_malloc_r+0xe6>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	4631      	mov	r1, r6
 8008d84:	4638      	mov	r0, r7
 8008d86:	eb04 0903 	add.w	r9, r4, r3
 8008d8a:	f000 f863 	bl	8008e54 <_sbrk_r>
 8008d8e:	4581      	cmp	r9, r0
 8008d90:	d13f      	bne.n	8008e12 <_malloc_r+0xe6>
 8008d92:	6821      	ldr	r1, [r4, #0]
 8008d94:	1a6d      	subs	r5, r5, r1
 8008d96:	4629      	mov	r1, r5
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ffa7 	bl	8008cec <sbrk_aligned>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d037      	beq.n	8008e12 <_malloc_r+0xe6>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	442b      	add	r3, r5
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d038      	beq.n	8008e22 <_malloc_r+0xf6>
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	42a2      	cmp	r2, r4
 8008db4:	d12b      	bne.n	8008e0e <_malloc_r+0xe2>
 8008db6:	2200      	movs	r2, #0
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	e00f      	b.n	8008ddc <_malloc_r+0xb0>
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	1b52      	subs	r2, r2, r5
 8008dc0:	d41f      	bmi.n	8008e02 <_malloc_r+0xd6>
 8008dc2:	2a0b      	cmp	r2, #11
 8008dc4:	d917      	bls.n	8008df6 <_malloc_r+0xca>
 8008dc6:	1961      	adds	r1, r4, r5
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	6025      	str	r5, [r4, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	6059      	strne	r1, [r3, #4]
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	bf08      	it	eq
 8008dd4:	f8c8 1000 	streq.w	r1, [r8]
 8008dd8:	5162      	str	r2, [r4, r5]
 8008dda:	604b      	str	r3, [r1, #4]
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f104 060b 	add.w	r6, r4, #11
 8008de2:	f000 f829 	bl	8008e38 <__malloc_unlock>
 8008de6:	f026 0607 	bic.w	r6, r6, #7
 8008dea:	1d23      	adds	r3, r4, #4
 8008dec:	1af2      	subs	r2, r6, r3
 8008dee:	d0ae      	beq.n	8008d4e <_malloc_r+0x22>
 8008df0:	1b9b      	subs	r3, r3, r6
 8008df2:	50a3      	str	r3, [r4, r2]
 8008df4:	e7ab      	b.n	8008d4e <_malloc_r+0x22>
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	6862      	ldr	r2, [r4, #4]
 8008dfa:	d1dd      	bne.n	8008db8 <_malloc_r+0x8c>
 8008dfc:	f8c8 2000 	str.w	r2, [r8]
 8008e00:	e7ec      	b.n	8008ddc <_malloc_r+0xb0>
 8008e02:	4623      	mov	r3, r4
 8008e04:	6864      	ldr	r4, [r4, #4]
 8008e06:	e7ac      	b.n	8008d62 <_malloc_r+0x36>
 8008e08:	4634      	mov	r4, r6
 8008e0a:	6876      	ldr	r6, [r6, #4]
 8008e0c:	e7b4      	b.n	8008d78 <_malloc_r+0x4c>
 8008e0e:	4613      	mov	r3, r2
 8008e10:	e7cc      	b.n	8008dac <_malloc_r+0x80>
 8008e12:	230c      	movs	r3, #12
 8008e14:	603b      	str	r3, [r7, #0]
 8008e16:	4638      	mov	r0, r7
 8008e18:	f000 f80e 	bl	8008e38 <__malloc_unlock>
 8008e1c:	e797      	b.n	8008d4e <_malloc_r+0x22>
 8008e1e:	6025      	str	r5, [r4, #0]
 8008e20:	e7dc      	b.n	8008ddc <_malloc_r+0xb0>
 8008e22:	605b      	str	r3, [r3, #4]
 8008e24:	deff      	udf	#255	; 0xff
 8008e26:	bf00      	nop
 8008e28:	20000f80 	.word	0x20000f80

08008e2c <__malloc_lock>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	; (8008e34 <__malloc_lock+0x8>)
 8008e2e:	f7ff bf01 	b.w	8008c34 <__retarget_lock_acquire_recursive>
 8008e32:	bf00      	nop
 8008e34:	20000f7c 	.word	0x20000f7c

08008e38 <__malloc_unlock>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__malloc_unlock+0x8>)
 8008e3a:	f7ff befc 	b.w	8008c36 <__retarget_lock_release_recursive>
 8008e3e:	bf00      	nop
 8008e40:	20000f7c 	.word	0x20000f7c

08008e44 <_malloc_usable_size_r>:
 8008e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e48:	1f18      	subs	r0, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfbc      	itt	lt
 8008e4e:	580b      	ldrlt	r3, [r1, r0]
 8008e50:	18c0      	addlt	r0, r0, r3
 8008e52:	4770      	bx	lr

08008e54 <_sbrk_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d06      	ldr	r5, [pc, #24]	; (8008e70 <_sbrk_r+0x1c>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	602b      	str	r3, [r5, #0]
 8008e60:	f7fb fdb0 	bl	80049c4 <_sbrk>
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d102      	bne.n	8008e6e <_sbrk_r+0x1a>
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	b103      	cbz	r3, 8008e6e <_sbrk_r+0x1a>
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	bd38      	pop	{r3, r4, r5, pc}
 8008e70:	20000f78 	.word	0x20000f78

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
